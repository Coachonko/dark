{"version":3,"file":"125.build.js","mappings":"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","sources":["webpack:///./api/index.ts","webpack:///./components/product-list.tsx","webpack:///../../../packages/core/src/use-resource/use-resource.ts","webpack:///../../../packages/web-router/src/use-match/use-match.ts"],"sourcesContent":["export type ProductBrief = {\r\n  id: number;\r\n  name: string;\r\n};\r\n\r\nexport type Product = {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n};\r\n\r\nexport enum State {\r\n  PRODUCTS = 'products',\r\n  PRODUCT_ITEM = 'product-item',\r\n}\r\n\r\nconst IS_SERVER = typeof globalThis.window === 'undefined';\r\nconst TIMEOUT = IS_SERVER ? 100 : 600;\r\n\r\nconst sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// sumulates the database\r\nlet nextId = 0;\r\nconst products: Array<Product> = new Array(50).fill(null).map(() => ({\r\n  id: ++nextId,\r\n  name: `Product #${nextId}`,\r\n  description:\r\n    'Lorem ipsum dolor sit amet consectetur, adipisicing elit. Nostrum blanditiis quia minus corrupti quidem. Ipsam quae ad velit repudiandae molestias unde'.repeat(\r\n      3,\r\n    ),\r\n}));\r\n\r\n// api\r\nconst api = {\r\n  async fetchProductList() {\r\n    console.log('[fetch]: product-list');\r\n    await sleep(TIMEOUT);\r\n    const briefs = products.map(x => ({ ...x, description: null })) as Array<ProductBrief>;\r\n\r\n    return briefs;\r\n  },\r\n  async fetchProduct(id: number) {\r\n    console.log('[fetch]: product', id);\r\n    if (!detectIsValidId(id)) throwError();\r\n    await sleep(TIMEOUT);\r\n    const product = products.find(x => x.id === id) || null;\r\n\r\n    return product;\r\n  },\r\n  async addProduct(product: Partial<Product>) {\r\n    if (detectIsValidId(product.id)) throwError();\r\n    await sleep(TIMEOUT);\r\n\r\n    product.id = ++nextId;\r\n    products.push(product as Product);\r\n\r\n    return product as Product;\r\n  },\r\n  async changeProduct(product: Product) {\r\n    if (!detectIsValidId(product.id)) throwError();\r\n    if (!product) return null;\r\n    await sleep(TIMEOUT);\r\n    const idx = products.findIndex(x => x.id === product.id);\r\n\r\n    if (idx !== -1) {\r\n      products.splice(idx, 1, product);\r\n    }\r\n\r\n    return product;\r\n  },\r\n  async removeProduct(id: number) {\r\n    if (!detectIsValidId(id)) throwError();\r\n    await sleep(TIMEOUT);\r\n    const idx = products.findIndex(x => x.id === id);\r\n\r\n    if (idx !== -1) {\r\n      products.splice(idx, 1);\r\n    }\r\n\r\n    return true;\r\n  },\r\n};\r\n\r\nconst detectIsValidId = (id: unknown) => typeof id === 'number' && !Number.isNaN(id);\r\n\r\nconst throwError = () => {\r\n  throw new Error('Invalid id!');\r\n};\r\n\r\nexport { api };\r\n","import { type DarkElement, h, component, useResource } from '@dark-engine/core';\r\nimport { RouterLink, useMatch, useLocation } from '@dark-engine/web-router';\r\nimport { styled } from '@dark-engine/styled';\r\n\r\nimport { State, api } from '../api';\r\nimport { Spinner, Error, AnimationFade, Button, List, ListItem } from './ui';\r\n\r\nconst Header = styled.header`\r\n  display: grid;\r\n  grid-template-columns: 1fr 4fr;\r\n  grid-template-rows: auto;\r\n  padding: 16px 0;\r\n\r\n  & h2 {\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nconst ProductList = component<{ slot: DarkElement }>(({ slot }) => {\r\n  const { url } = useMatch();\r\n  const { pathname } = useLocation();\r\n  const { data, loading, error } = useResource(() => api.fetchProductList(), { key: State.PRODUCTS });\r\n  const isList = pathname.endsWith('list/');\r\n  const urlToAdd = url + 'add/';\r\n  const renderList = () => {\r\n    return (\r\n      <List>\r\n        {[...data].reverse().map(x => {\r\n          return (\r\n            <ListItem key={x.id}>\r\n              <RouterLink to={`${url}${x.id}`}>{x.name}</RouterLink>\r\n            </ListItem>\r\n          );\r\n        })}\r\n      </List>\r\n    );\r\n  };\r\n\r\n  if (loading) return <Spinner />;\r\n  if (error) return <Error value={error} />;\r\n\r\n  return (\r\n    <AnimationFade>\r\n      <Header>\r\n        <div>\r\n          {isList ? (\r\n            <Button as={RouterLink} to={urlToAdd}>\r\n              Add product\r\n            </Button>\r\n          ) : (\r\n            <Button onClick={() => history.back()}>Back</Button>\r\n          )}\r\n        </div>\r\n      </Header>\r\n      <AnimationFade key={pathname}>{slot || renderList()}</AnimationFade>\r\n    </AnimationFade>\r\n  );\r\n});\r\n\r\nexport default ProductList;\r\n","import { type InMemoryCache, useCache, CACHE_ROOT_ID } from '../cache';\r\nimport { type AppResource, type Callback, type TextBased } from '../shared';\r\nimport { error, detectIsFunction, mapRecord } from '../utils';\r\nimport { useLayoutEffect } from '../use-layout-effect';\r\nimport { detectIsServer } from '../platform';\r\nimport { useEffect } from '../use-effect';\r\nimport { useSuspense } from '../suspense';\r\nimport { useUpdate } from '../use-update';\r\nimport { useMemo } from '../use-memo';\r\nimport { $$scope } from '../scope';\r\n\r\ntype UseResourceOptions<V extends Variables> = {\r\n  variables?: V;\r\n  key?: string;\r\n  extractId?: (x: V) => TextBased;\r\n};\r\n\r\nfunction useResource<T, V extends Variables>(query: Query<T, V>, options?: UseResourceOptions<V>) {\r\n  const { variables = {} as V, key: cacheKey, extractId = () => CACHE_ROOT_ID } = options || { variables: {} as V };\r\n  const $scope = $$scope();\r\n  const cache = useCache();\r\n  const cacheId = extractId(variables);\r\n  const id = useMemo(() => $scope.getNextResourceId(), []);\r\n  const state = useMemo<State<T>>(() => createState<T>(cache, cacheKey, cacheId), []);\r\n  const { register, unregister } = useSuspense();\r\n  const [mounted, firstTime] = useMounted();\r\n  const update = useUpdate();\r\n  const $update = () => mounted() && update();\r\n  const isServer = detectIsServer();\r\n  const isHydrateZone = $scope.getIsHydrateZone();\r\n  const { isLoaded } = state;\r\n\r\n  state.cacheKey = cacheKey;\r\n  state.cacheId = cacheId;\r\n\r\n  const make = async (isRefetch?: boolean, $variables?: V) => {\r\n    const $$variables = isRefetch ? $variables : variables;\r\n    const $cacheId = extractId($$variables);\r\n\r\n    try {\r\n      if (!isServer && !firstTime()) {\r\n        state.isFetching = true;\r\n        $update();\r\n      }\r\n      const data = await query($$variables);\r\n\r\n      if (isServer) {\r\n        $scope.setResource(id, [data, null]);\r\n      } else {\r\n        unregister(id);\r\n        state.data = data;\r\n        state.isFetching = false;\r\n        state.error = null;\r\n      }\r\n\r\n      if (cacheKey && cache && data) {\r\n        cache.write({ key: cacheKey, id: $cacheId, data });\r\n      }\r\n\r\n      return data;\r\n    } catch (err) {\r\n      error(err);\r\n\r\n      if (isServer) {\r\n        $scope.setResource(id, [null, String(err)]);\r\n      } else {\r\n        unregister(id);\r\n        state.isFetching = false;\r\n        state.error = String(err);\r\n      }\r\n    } finally {\r\n      if (!isServer) {\r\n        state.isLoaded = true;\r\n        $update();\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isHydrateZone) return;\r\n    if (cacheKey && cache) {\r\n      const record = cache.read({ key: cacheKey, id: cacheId });\r\n\r\n      if (record?.valid) return;\r\n    }\r\n\r\n    make();\r\n  }, [...mapRecord(variables)]);\r\n\r\n  useEffect(() => {\r\n    let off: Callback = null;\r\n\r\n    if (cache) {\r\n      off = cache.onChange(({ type, key, id }) => {\r\n        if (key === state.cacheKey && id === state.cacheId) {\r\n          if (type === 'invalidate' || type === 'optimistic') {\r\n            make();\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      unregister(id);\r\n      detectIsFunction(off) && off();\r\n    };\r\n  }, []);\r\n\r\n  if (isServer || isHydrateZone) {\r\n    const res = $scope.getResource(id) as AppResource<T>;\r\n\r\n    if (isServer) {\r\n      if (res) {\r\n        mutate(state, res);\r\n      } else {\r\n        $scope.defer(make);\r\n      }\r\n    } else if (isHydrateZone) {\r\n      if (!res) throw new Error('[Dark]: can not read app state from the server!');\r\n      const [data] = res;\r\n\r\n      mutate(state, res);\r\n\r\n      if (cacheKey && cache && data) {\r\n        cache.write({ key: cacheKey, id: cacheId, data });\r\n      }\r\n    }\r\n  } else {\r\n    firstTime() && !isLoaded && register(id);\r\n  }\r\n\r\n  const result: Result<T> = {\r\n    loading: state.isFetching,\r\n    data: state.data,\r\n    error: state.error,\r\n    refetch: (variables: V) => make(true, variables),\r\n  };\r\n\r\n  return result;\r\n}\r\n\r\nfunction createState<T>(cache: InMemoryCache, cacheKey: string, cacheId: TextBased) {\r\n  const state: State<T> = {\r\n    isFetching: true,\r\n    isLoaded: false,\r\n    data: null,\r\n    error: null,\r\n    cacheKey,\r\n    cacheId,\r\n  };\r\n\r\n  if (cache) {\r\n    const record = cache.read({ key: cacheKey, id: cacheId });\r\n\r\n    if (record) {\r\n      state.isFetching = false;\r\n      state.isLoaded = true;\r\n      state.data = record.data as T;\r\n    }\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nfunction mutate<T>(state: State<T>, res: AppResource<T>) {\r\n  const [data, error] = res;\r\n\r\n  state.isFetching = false;\r\n  state.isLoaded = true;\r\n  state.data = data;\r\n  state.error = error;\r\n}\r\n\r\nfunction useMounted() {\r\n  const scope = useMemo(() => ({ isMounted: true, isFirstTime: true }), []);\r\n  const { isFirstTime } = scope;\r\n\r\n  useLayoutEffect(() => {\r\n    scope.isFirstTime = false;\r\n    return () => (scope.isMounted = false);\r\n  }, []);\r\n\r\n  return [() => scope.isMounted, () => isFirstTime] as [BooleanFn, BooleanFn];\r\n}\r\n\r\ntype BooleanFn = () => boolean;\r\n\r\ntype State<T> = {\r\n  isFetching: boolean;\r\n  isLoaded: boolean;\r\n  data: T;\r\n  error: string;\r\n  cacheId: TextBased;\r\n  cacheKey: string;\r\n};\r\n\r\ntype Result<T> = {\r\n  loading: boolean;\r\n  data: T;\r\n  error: string;\r\n  refetch: Query<T>;\r\n};\r\n\r\ntype Variables<K extends string = string, V = any> = Record<K, V>;\r\n\r\ntype Query<T, V extends Variables = Variables> = (variables: V) => Promise<T>;\r\n\r\nexport { useResource };\r\n","import { useMemo } from '@dark-engine/core';\r\n\r\nimport { useActiveRouteContext, useCurrentPathContext, checkContextValue } from '../context';\r\nimport { createPathname } from '../create-routes';\r\n\r\nexport type Match = {\r\n  path: string;\r\n  url: string;\r\n};\r\n\r\nfunction useMatch(): Match {\r\n  const activeRoute = useActiveRouteContext();\r\n  checkContextValue(activeRoute);\r\n  const path = useCurrentPathContext();\r\n  const {\r\n    location: { pathname },\r\n  } = activeRoute;\r\n  const url = useMemo(() => (path ? createPathname(pathname, path) : ''), [path, pathname]);\r\n  const value: Match = { path, url };\r\n\r\n  return value;\r\n}\r\n\r\nexport { useMatch };\r\n"],"names":["State","TIMEOUT","globalThis","window","sleep","ms","Promise","resolve","setTimeout","nextId","products","Array","fill","map","id","name","description","repeat","api","async","console","log","x","detectIsValidId","throwError","find","product","push","idx","findIndex","splice","Number","isNaN","Error","Header","slot","url","pathname","data","loading","error","key","isList","endsWith","urlToAdd","value","as","to","onClick","history","back","reverse","useResource","query","options","variables","cacheKey","extractId","$scope","cache","cacheId","getNextResourceId","state","isFetching","isLoaded","record","read","createState","register","unregister","mounted","firstTime","scope","isMounted","isFirstTime","useMounted","update","$update","isServer","isHydrateZone","getIsHydrateZone","make","isRefetch","$variables","$$variables","$cacheId","setResource","write","err","String","valid","off","onChange","type","res","getResource","mutate","defer","result","refetch","useMatch","activeRoute","path","location"],"sourceRoot":""}