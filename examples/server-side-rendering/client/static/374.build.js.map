{"version":3,"file":"374.build.js","mappings":"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","sources":["webpack:///./components/product-remove.tsx","webpack:///../../../packages/core/src/use-query/use-query.ts","webpack:///../../../packages/core/src/use-mutation/use-mutation.ts","webpack:///./api/index.ts","webpack:///./hooks/index.ts","webpack:///../../../packages/web-router/src/use-match/use-match.ts","webpack:///../../../packages/web-router/src/use-params/use-params.ts"],"sourcesContent":["import { h, component } from '@dark-engine/core';\r\nimport { useMatch, useHistory, useParams } from '@dark-engine/web-router';\r\n\r\nimport { useRemoveProductMutation } from '../hooks';\r\nimport { Card, Button } from './ui';\r\n\r\nconst ProductRemove = component(() => {\r\n  const { url } = useMatch();\r\n  const history = useHistory();\r\n  const params = useParams();\r\n  const id = Number(params.get('id'));\r\n  const [removeProduct, { loading }] = useRemoveProductMutation(id);\r\n  const urlToList = url.replace(`${id}/remove/`, '');\r\n\r\n  const handleRemove = async () => {\r\n    if (loading) return;\r\n    await removeProduct();\r\n    history.push(urlToList);\r\n  };\r\n\r\n  return (\r\n    <Card $loading={loading}>\r\n      <h3>Do you want to remove product #{id}? ðŸ¤”</h3>\r\n      <Button onClick={handleRemove}>Yes</Button>\r\n      <Button onClick={() => history.back()}>No</Button>\r\n    </Card>\r\n  );\r\n});\r\n\r\nexport default ProductRemove;\r\n","import { type InMemoryCache, useCache, MonitorEventType, checkCache, CACHE_ROOT_ID } from '../cache';\r\nimport { type AppResource, type Callback, type TextBased } from '../shared';\r\nimport { error, detectIsFunction, mapRecord } from '../utils';\r\nimport { useLayoutEffect } from '../use-layout-effect';\r\nimport { detectIsServer } from '../platform';\r\nimport { useEffect } from '../use-effect';\r\nimport { useSuspense } from '../suspense';\r\nimport { useUpdate } from '../use-update';\r\nimport { useMemo } from '../use-memo';\r\nimport { $$scope } from '../scope';\r\n\r\nexport type UseQueryOptions<V extends Variables> = {\r\n  key: string;\r\n  variables?: V;\r\n  extractId?: (x: V) => TextBased;\r\n  lazy?: boolean;\r\n};\r\n\r\nfunction useQuery<T, V extends Variables>(query: Query<T, V>, options: UseQueryOptions<V>) {\r\n  const {\r\n    variables = {} as V,\r\n    key: cacheKey,\r\n    extractId = () => CACHE_ROOT_ID,\r\n    lazy = false,\r\n  } = options || { variables: {} as V };\r\n  const $scope = $$scope();\r\n  const cache = useCache();\r\n  checkCache(cache);\r\n  const cacheId = extractId(variables);\r\n  const id = useMemo(() => $scope.getNextResourceId(), []);\r\n  const state = useMemo<State<T>>(() => createState<T>(cache, cacheKey, cacheId, lazy), []);\r\n  const { register, unregister } = useSuspense();\r\n  const [mounted, firstTime] = useMounted();\r\n  const update = useUpdate();\r\n  const $update = () => mounted() && update();\r\n  const isServer = detectIsServer();\r\n  const isHydrateZone = $scope.getIsHydrateZone();\r\n  const { isLoaded } = state;\r\n\r\n  state.cacheKey = cacheKey;\r\n  state.cacheId = cacheId;\r\n\r\n  const make = async ($variables?: V) => {\r\n    const $$variables = $variables || variables;\r\n    const $cacheId = extractId($$variables);\r\n\r\n    cache.__emit({ type: MonitorEventType.QUERY, phase: 'start', key: cacheKey, data: $$variables });\r\n\r\n    try {\r\n      if (!isServer && !firstTime()) {\r\n        state.isFetching = true;\r\n        $update();\r\n      }\r\n\r\n      const data = await query($$variables);\r\n\r\n      cache.__emit({ type: MonitorEventType.QUERY, phase: 'finish', key: cacheKey, data });\r\n\r\n      if (isServer) {\r\n        $scope.setResource(id, [data, null]);\r\n      } else {\r\n        unregister(id);\r\n        state.data = data;\r\n        state.isFetching = false;\r\n        state.error = null;\r\n      }\r\n\r\n      if (data) {\r\n        cache.write({ key: cacheKey, id: $cacheId, data });\r\n      }\r\n\r\n      return data;\r\n    } catch (err) {\r\n      error(err);\r\n      cache.__emit({ type: MonitorEventType.QUERY, phase: 'error', key: cacheKey, data: err });\r\n\r\n      if (isServer) {\r\n        $scope.setResource(id, [null, String(err)]);\r\n      } else {\r\n        unregister(id);\r\n        state.isFetching = false;\r\n        state.error = String(err);\r\n      }\r\n    } finally {\r\n      if (!isServer) {\r\n        state.isLoaded = true;\r\n        $update();\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isHydrateZone) return;\r\n    if (lazy) return;\r\n    const record = cache.read({ key: cacheKey, id: cacheId });\r\n\r\n    if (record?.valid) return;\r\n\r\n    make();\r\n  }, [...mapRecord(variables)]);\r\n\r\n  useEffect(() => {\r\n    let off: Callback = null;\r\n\r\n    off = cache.subscribe(({ type, key, id }) => {\r\n      if (key === state.cacheKey && id === state.cacheId) {\r\n        if (type === 'invalidate' || type === 'optimistic') {\r\n          if (cache.__canUpdate(key)) {\r\n            make();\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      unregister(id);\r\n      detectIsFunction(off) && off();\r\n    };\r\n  }, []);\r\n\r\n  if (isServer || isHydrateZone) {\r\n    const res = $scope.getResource(id) as AppResource<T>;\r\n\r\n    if (isServer) {\r\n      if (res) {\r\n        mutate(state, res);\r\n      } else {\r\n        $scope.defer(make);\r\n      }\r\n    } else if (isHydrateZone) {\r\n      if (!res) throw new Error('[Dark]: can not read app state from the server!');\r\n      const [data] = res;\r\n\r\n      mutate(state, res);\r\n\r\n      if (data) {\r\n        cache.write({ key: cacheKey, id: cacheId, data });\r\n      }\r\n    }\r\n  } else {\r\n    firstTime() && !isLoaded && !lazy && register(id);\r\n  }\r\n\r\n  const result: QueryResult<T> = {\r\n    loading: state.isFetching,\r\n    data: state.data,\r\n    error: state.error,\r\n    refetch: make,\r\n  };\r\n\r\n  return result;\r\n}\r\n\r\nfunction createState<T>(cache: InMemoryCache, cacheKey: string, cacheId: TextBased, lazy) {\r\n  const state: State<T> = {\r\n    isFetching: !lazy,\r\n    isLoaded: false,\r\n    data: null,\r\n    error: null,\r\n    cacheKey,\r\n    cacheId,\r\n  };\r\n  const record = cache.read({ key: cacheKey, id: cacheId });\r\n\r\n  if (record) {\r\n    state.isFetching = false;\r\n    state.isLoaded = true;\r\n    state.data = record.data as T;\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nfunction mutate<T>(state: State<T>, res: AppResource<T>) {\r\n  const [data, error] = res;\r\n\r\n  state.isFetching = false;\r\n  state.isLoaded = true;\r\n  state.data = data;\r\n  state.error = error;\r\n}\r\n\r\nfunction useMounted() {\r\n  const scope = useMemo(() => ({ isMounted: true, isFirstTime: true }), []);\r\n  const { isFirstTime } = scope;\r\n\r\n  useLayoutEffect(() => {\r\n    scope.isFirstTime = false;\r\n    return () => (scope.isMounted = false);\r\n  }, []);\r\n\r\n  return [() => scope.isMounted, () => isFirstTime] as [BooleanFn, BooleanFn];\r\n}\r\n\r\ntype BooleanFn = () => boolean;\r\n\r\ntype State<T> = {\r\n  isFetching: boolean;\r\n  isLoaded: boolean;\r\n  data: T;\r\n  error: string;\r\n  cacheId: TextBased;\r\n  cacheKey: string;\r\n};\r\n\r\nexport type QueryResult<T> = {\r\n  loading: boolean;\r\n  refetch: Query<T>;\r\n} & Pick<State<T>, 'data' | 'error'>;\r\n\r\nexport type Variables<K extends string = string, V = any> = Record<K, V>;\r\nexport type Query<T, V extends Variables = Variables> = (variables?: V) => Promise<T>;\r\n\r\nexport { useQuery };\r\n","import { type InMemoryCache, useCache, MonitorEventType, checkCache } from '../cache';\r\nimport { error, detectIsFunction } from '../utils';\r\nimport { useUpdate } from '../use-update';\r\nimport { useMemo } from '../use-memo';\r\n\r\ntype UseMutatinOptions<T> = {\r\n  key: string;\r\n  refetchQueries?: Array<string>;\r\n  onSuccess?: (x: InMemoryCache, data: T) => void;\r\n};\r\n\r\nfunction useMutation<M extends Mutation>(mutation: M, options: UseMutatinOptions<Awaited<ReturnType<M>>>) {\r\n  type Params = Parameters<M>;\r\n  type AwaitedResult = Awaited<ReturnType<M>>;\r\n  const { key, refetchQueries = [], onSuccess } = options || {};\r\n  const update = useUpdate();\r\n  const cache = useCache();\r\n  checkCache(cache);\r\n  const state = useMemo<State<AwaitedResult>>(() => ({ isFetching: false, data: null, error: null }), []);\r\n  const make = async (...args: Params) => {\r\n    let data: AwaitedResult = null;\r\n\r\n    cache.__emit({ type: MonitorEventType.MUTATION, phase: 'start', key, data: args });\r\n\r\n    try {\r\n      state.isFetching = true;\r\n      state.error = null;\r\n      update();\r\n      data = (await mutation(...args)) as AwaitedResult;\r\n      cache.__emit({ type: MonitorEventType.MUTATION, phase: 'finish', key, data });\r\n      detectIsFunction(onSuccess) && onSuccess(cache, data);\r\n      refetchQueries.forEach(x => cache.invalidate({ key: x }));\r\n    } catch (err) {\r\n      error(err);\r\n      state.error = String(err);\r\n      cache.__emit({ type: MonitorEventType.MUTATION, phase: 'error', key, data: err });\r\n    } finally {\r\n      state.isFetching = false;\r\n      update();\r\n    }\r\n\r\n    return data;\r\n  };\r\n  const result: MutationResult<AwaitedResult> = {\r\n    loading: state.isFetching,\r\n    data: state.data,\r\n    error: state.error,\r\n  };\r\n\r\n  return [make, result] as [(...args: Params) => ReturnType<M>, MutationResult<AwaitedResult>];\r\n}\r\n\r\ntype State<T> = {\r\n  isFetching: boolean;\r\n  data: T;\r\n  error: string;\r\n};\r\n\r\ntype MutationResult<T> = {\r\n  loading: boolean;\r\n} & Pick<State<T>, 'data' | 'error'>;\r\n\r\ntype Mutation = (...args: Array<unknown>) => Promise<unknown>;\r\n\r\nexport { useMutation };\r\n","export type ProductBrief = {\r\n  id: number;\r\n  name: string;\r\n};\r\n\r\nexport type Product = {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n};\r\n\r\nconst IS_SERVER = typeof globalThis.window === 'undefined';\r\nconst TIMEOUT = IS_SERVER ? 100 : 600;\r\n\r\nconst sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// sumulates the database\r\nlet nextId = 0;\r\nconst products: Array<Product> = new Array(50).fill(null).map(() => ({\r\n  id: ++nextId,\r\n  name: `Product #${nextId}`,\r\n  description:\r\n    'Lorem ipsum dolor sit amet consectetur, adipisicing elit. Nostrum blanditiis quia minus corrupti quidem. Ipsam quae ad velit repudiandae molestias unde'.repeat(\r\n      3,\r\n    ),\r\n}));\r\n\r\n// api\r\nconst api = {\r\n  async fetchProducts() {\r\n    await sleep(TIMEOUT);\r\n    const briefs = products.map(x => ({ ...x, description: null })) as Array<ProductBrief>;\r\n\r\n    return briefs;\r\n  },\r\n  async fetchProduct(id: number) {\r\n    if (!detectIsValidId(id)) throwError();\r\n    await sleep(TIMEOUT);\r\n    const product = products.find(x => x.id === id) || null;\r\n\r\n    return product;\r\n  },\r\n  async addProduct(product: Partial<Product>) {\r\n    if (detectIsValidId(product.id)) throwError();\r\n    await sleep(TIMEOUT);\r\n\r\n    product.id = ++nextId;\r\n    products.push(product as Product);\r\n\r\n    return product as Product;\r\n  },\r\n  async changeProduct(product: Product) {\r\n    if (!detectIsValidId(product.id)) throwError();\r\n    if (!product) return null;\r\n    await sleep(TIMEOUT);\r\n    const idx = products.findIndex(x => x.id === product.id);\r\n\r\n    if (idx !== -1) {\r\n      products.splice(idx, 1, product);\r\n    }\r\n\r\n    return product;\r\n  },\r\n  async removeProduct(id: number) {\r\n    if (!detectIsValidId(id)) throwError();\r\n    await sleep(TIMEOUT);\r\n    const idx = products.findIndex(x => x.id === id);\r\n\r\n    if (idx !== -1) {\r\n      products.splice(idx, 1);\r\n    }\r\n\r\n    return true;\r\n  },\r\n};\r\n\r\nconst detectIsValidId = (id: unknown) => typeof id === 'number' && !Number.isNaN(id);\r\n\r\nconst throwError = () => {\r\n  throw new Error('Invalid id!');\r\n};\r\n\r\nexport { api };\r\n","import { useQuery, useMutation } from '@dark-engine/core';\r\n\r\nimport { type ProductBrief, api } from '../api';\r\n\r\nexport enum Key {\r\n  FETCH_PRODUCTS = 'FETCH_PRODUCTS',\r\n  FETCH_PRODUCT = 'FETCH_PRODUCT',\r\n  ADD_PRODUCT = 'ADD_PRODUCT',\r\n  CHANGE_PRODUCT = 'CHANGE_PRODUCT',\r\n  REMOVE_PRODUCT = 'REMOVE_PRODUCT',\r\n}\r\n\r\nfunction useProducts() {\r\n  return useQuery(() => api.fetchProducts(), { key: Key.FETCH_PRODUCTS });\r\n}\r\n\r\nfunction useProduct(id: number) {\r\n  return useQuery(({ id }) => api.fetchProduct(id), {\r\n    key: Key.FETCH_PRODUCT,\r\n    variables: { id },\r\n    extractId: x => x.id,\r\n  });\r\n}\r\n\r\nfunction useAddProductMutation() {\r\n  return useMutation(api.addProduct, {\r\n    key: Key.ADD_PRODUCT,\r\n    onSuccess: (cache, product) => {\r\n      const record = cache.read<Array<ProductBrief>>({ key: Key.FETCH_PRODUCTS });\r\n\r\n      if (record) {\r\n        const products = record.data;\r\n\r\n        products.push(product);\r\n        cache.optimistic({ key: Key.FETCH_PRODUCTS, data: products });\r\n      }\r\n    },\r\n  });\r\n}\r\n\r\nfunction useChangeProductMutation() {\r\n  return useMutation(api.changeProduct, {\r\n    key: Key.CHANGE_PRODUCT,\r\n    onSuccess: (cache, product) => {\r\n      const record = cache.read<Array<ProductBrief>>({ key: Key.FETCH_PRODUCTS });\r\n\r\n      if (record) {\r\n        const products = record.data;\r\n        const $product = products.find(x => x.id === product.id);\r\n\r\n        $product.name = product.name;\r\n        cache.optimistic({ key: Key.FETCH_PRODUCTS, data: products });\r\n        cache.optimistic({ key: Key.FETCH_PRODUCT, data: product, id: product.id });\r\n      }\r\n    },\r\n  });\r\n}\r\n\r\nfunction useRemoveProductMutation(id: number) {\r\n  return useMutation(() => api.removeProduct(id), {\r\n    key: Key.REMOVE_PRODUCT,\r\n    onSuccess: cache => {\r\n      const record = cache.read<Array<ProductBrief>>({ key: Key.FETCH_PRODUCTS });\r\n\r\n      if (record) {\r\n        const products = record.data;\r\n        const idx = products.findIndex(x => x.id === id);\r\n\r\n        if (idx !== -1) {\r\n          products.splice(idx, 1);\r\n          cache.optimistic({ key: Key.FETCH_PRODUCTS, data: products });\r\n        }\r\n      }\r\n\r\n      cache.delete({ key: Key.FETCH_PRODUCT, id });\r\n    },\r\n  });\r\n}\r\n\r\nexport { useProducts, useProduct, useAddProductMutation, useChangeProductMutation, useRemoveProductMutation };\r\n","import { useMemo } from '@dark-engine/core';\r\n\r\nimport { useActiveRouteContext, useCurrentPathContext, checkContextValue } from '../context';\r\nimport { createPathname } from '../create-routes';\r\n\r\nexport type Match = {\r\n  path: string;\r\n  url: string;\r\n};\r\n\r\nfunction useMatch(): Match {\r\n  const activeRoute = useActiveRouteContext();\r\n  checkContextValue(activeRoute);\r\n  const path = useCurrentPathContext();\r\n  const {\r\n    location: { pathname },\r\n  } = activeRoute;\r\n  const url = useMemo(() => (path ? createPathname(pathname, path) : ''), [path, pathname]);\r\n  const value: Match = { path, url };\r\n\r\n  return value;\r\n}\r\n\r\nexport { useMatch };\r\n","import { useActiveRouteContext, checkContextValue } from '../context';\r\nimport { type Params } from '../create-routes';\r\n\r\nfunction useParams(): Params {\r\n  const value = useActiveRouteContext();\r\n\r\n  checkContextValue(value);\r\n\r\n  return value.params;\r\n}\r\n\r\nexport { Params, useParams };\r\n"],"names":["url","history","params","id","Number","get","removeProduct","loading","urlToList","replace","onClick","async","push","back","useQuery","query","options","variables","key","cacheKey","extractId","lazy","$scope","cache","cacheId","getNextResourceId","state","isFetching","isLoaded","data","error","record","read","createState","register","unregister","mounted","firstTime","scope","isMounted","isFirstTime","useMounted","update","$update","isServer","isHydrateZone","getIsHydrateZone","make","$variables","$$variables","$cacheId","__emit","type","phase","setResource","write","err","String","valid","off","subscribe","__canUpdate","res","getResource","mutate","defer","Error","refetch","useMutation","mutation","refetchQueries","onSuccess","args","forEach","x","invalidate","TIMEOUT","globalThis","window","sleep","ms","Promise","resolve","setTimeout","nextId","products","Array","fill","map","name","description","repeat","api","detectIsValidId","throwError","find","product","idx","findIndex","splice","isNaN","Key","useProducts","fetchProducts","FETCH_PRODUCTS","useProduct","fetchProduct","FETCH_PRODUCT","useAddProductMutation","addProduct","ADD_PRODUCT","optimistic","useChangeProductMutation","changeProduct","CHANGE_PRODUCT","useRemoveProductMutation","REMOVE_PRODUCT","delete","useMatch","activeRoute","path","location","pathname","useParams","value"],"sourceRoot":""}