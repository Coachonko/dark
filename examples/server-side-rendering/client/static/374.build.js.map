{"version":3,"file":"374.build.js","mappings":"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","sources":["webpack:///./components/product-remove.tsx","webpack:///../../../packages/core/src/use-query/use-query.ts","webpack:///../../../packages/core/src/use-mutation/use-mutation.ts","webpack:///./api/index.ts","webpack:///./hooks/index.ts","webpack:///../../../packages/web-router/src/use-match/use-match.ts","webpack:///../../../packages/web-router/src/use-params/use-params.ts"],"sourcesContent":["import { h, component } from '@dark-engine/core';\r\nimport { useMatch, useHistory, useParams } from '@dark-engine/web-router';\r\n\r\nimport { useRemoveProductMutation } from '../hooks';\r\nimport { Card, Button } from './ui';\r\n\r\nconst ProductRemove = component(() => {\r\n  const { url } = useMatch();\r\n  const history = useHistory();\r\n  const params = useParams();\r\n  const id = Number(params.get('id'));\r\n  const [removeProduct, { loading }] = useRemoveProductMutation(id);\r\n  const urlToList = url.replace(`${id}/remove/`, '');\r\n\r\n  const handleRemove = async () => {\r\n    if (loading) return;\r\n    await removeProduct();\r\n    history.push(urlToList);\r\n  };\r\n\r\n  return (\r\n    <Card $loading={loading}>\r\n      <h3>Do you want to remove product #{id}? ðŸ¤”</h3>\r\n      <Button onClick={handleRemove}>Yes</Button>\r\n      <Button onClick={() => history.back()}>No</Button>\r\n    </Card>\r\n  );\r\n});\r\n\r\nexport default ProductRemove;\r\n","import { type InMemoryCache, useCache, MonitorEventType, CACHE_ROOT_ID } from '../cache';\r\nimport { type AppResource, type Callback, type TextBased } from '../shared';\r\nimport { error, detectIsFunction, mapRecord } from '../utils';\r\nimport { useLayoutEffect } from '../use-layout-effect';\r\nimport { detectIsServer } from '../platform';\r\nimport { useEffect } from '../use-effect';\r\nimport { useSuspense } from '../suspense';\r\nimport { useUpdate } from '../use-update';\r\nimport { useMemo } from '../use-memo';\r\nimport { $$scope } from '../scope';\r\n\r\ntype UseQueryOptions<V extends Variables> = {\r\n  key: string;\r\n  variables?: V;\r\n  extractId?: (x: V) => TextBased;\r\n};\r\n\r\nfunction useQuery<T, V extends Variables>(query: Query<T, V>, options: UseQueryOptions<V>) {\r\n  const { variables = {} as V, key: cacheKey, extractId = () => CACHE_ROOT_ID } = options || { variables: {} as V };\r\n  const $scope = $$scope();\r\n  const cache = useCache();\r\n  const cacheId = extractId(variables);\r\n  const id = useMemo(() => $scope.getNextResourceId(), []);\r\n  const state = useMemo<State<T>>(() => createState<T>(cache, cacheKey, cacheId), []);\r\n  const { register, unregister } = useSuspense();\r\n  const [mounted, firstTime] = useMounted();\r\n  const update = useUpdate();\r\n  const $update = () => mounted() && update();\r\n  const isServer = detectIsServer();\r\n  const isHydrateZone = $scope.getIsHydrateZone();\r\n  const { isLoaded } = state;\r\n\r\n  state.cacheKey = cacheKey;\r\n  state.cacheId = cacheId;\r\n\r\n  const make = async (isRefetch?: boolean, $variables?: V) => {\r\n    const $$variables = isRefetch ? $variables : variables;\r\n    const $cacheId = extractId($$variables);\r\n\r\n    cache.__emit({ type: MonitorEventType.QUERY, phase: 'start', key: cacheKey, data: $$variables });\r\n\r\n    try {\r\n      if (!isServer && !firstTime()) {\r\n        state.isFetching = true;\r\n        $update();\r\n      }\r\n\r\n      const data = await query($$variables);\r\n\r\n      cache.__emit({ type: MonitorEventType.QUERY, phase: 'finish', key: cacheKey, data });\r\n\r\n      if (isServer) {\r\n        $scope.setResource(id, [data, null]);\r\n      } else {\r\n        unregister(id);\r\n        state.data = data;\r\n        state.isFetching = false;\r\n        state.error = null;\r\n      }\r\n\r\n      if (data) {\r\n        cache.write({ key: cacheKey, id: $cacheId, data });\r\n      }\r\n\r\n      return data;\r\n    } catch (err) {\r\n      error(err);\r\n      cache.__emit({ type: MonitorEventType.QUERY, phase: 'error', key: cacheKey, data: err });\r\n\r\n      if (isServer) {\r\n        $scope.setResource(id, [null, String(err)]);\r\n      } else {\r\n        unregister(id);\r\n        state.isFetching = false;\r\n        state.error = String(err);\r\n      }\r\n    } finally {\r\n      if (!isServer) {\r\n        state.isLoaded = true;\r\n        $update();\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isHydrateZone) return;\r\n    const record = cache.read({ key: cacheKey, id: cacheId });\r\n\r\n    if (record?.valid) return;\r\n\r\n    make();\r\n  }, [...mapRecord(variables)]);\r\n\r\n  useEffect(() => {\r\n    let off: Callback = null;\r\n\r\n    off = cache.subscribe(({ type, key, id }) => {\r\n      if (key === state.cacheKey && id === state.cacheId) {\r\n        if (type === 'invalidate' || type === 'optimistic') {\r\n          if (cache.__canUpdate(key)) {\r\n            make();\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      unregister(id);\r\n      detectIsFunction(off) && off();\r\n    };\r\n  }, []);\r\n\r\n  if (isServer || isHydrateZone) {\r\n    const res = $scope.getResource(id) as AppResource<T>;\r\n\r\n    if (isServer) {\r\n      if (res) {\r\n        mutate(state, res);\r\n      } else {\r\n        $scope.defer(make);\r\n      }\r\n    } else if (isHydrateZone) {\r\n      if (!res) throw new Error('[Dark]: can not read app state from the server!');\r\n      const [data] = res;\r\n\r\n      mutate(state, res);\r\n\r\n      if (data) {\r\n        cache.write({ key: cacheKey, id: cacheId, data });\r\n      }\r\n    }\r\n  } else {\r\n    firstTime() && !isLoaded && register(id);\r\n  }\r\n\r\n  const result: Result<T> = {\r\n    loading: state.isFetching,\r\n    data: state.data,\r\n    error: state.error,\r\n    refetch: (variables: V) => make(true, variables),\r\n  };\r\n\r\n  return result;\r\n}\r\n\r\nfunction createState<T>(cache: InMemoryCache, cacheKey: string, cacheId: TextBased) {\r\n  const state: State<T> = {\r\n    isFetching: true,\r\n    isLoaded: false,\r\n    data: null,\r\n    error: null,\r\n    cacheKey,\r\n    cacheId,\r\n  };\r\n  const record = cache.read({ key: cacheKey, id: cacheId });\r\n\r\n  if (record) {\r\n    state.isFetching = false;\r\n    state.isLoaded = true;\r\n    state.data = record.data as T;\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nfunction mutate<T>(state: State<T>, res: AppResource<T>) {\r\n  const [data, error] = res;\r\n\r\n  state.isFetching = false;\r\n  state.isLoaded = true;\r\n  state.data = data;\r\n  state.error = error;\r\n}\r\n\r\nfunction useMounted() {\r\n  const scope = useMemo(() => ({ isMounted: true, isFirstTime: true }), []);\r\n  const { isFirstTime } = scope;\r\n\r\n  useLayoutEffect(() => {\r\n    scope.isFirstTime = false;\r\n    return () => (scope.isMounted = false);\r\n  }, []);\r\n\r\n  return [() => scope.isMounted, () => isFirstTime] as [BooleanFn, BooleanFn];\r\n}\r\n\r\ntype BooleanFn = () => boolean;\r\n\r\ntype State<T> = {\r\n  isFetching: boolean;\r\n  isLoaded: boolean;\r\n  data: T;\r\n  error: string;\r\n  cacheId: TextBased;\r\n  cacheKey: string;\r\n};\r\n\r\ntype Result<T> = {\r\n  loading: boolean;\r\n  data: T;\r\n  error: string;\r\n  refetch: Query<T>;\r\n};\r\n\r\ntype Variables<K extends string = string, V = any> = Record<K, V>;\r\n\r\ntype Query<T, V extends Variables = Variables> = (variables: V) => Promise<T>;\r\n\r\nexport { useQuery };\r\n","import { type InMemoryCache, useCache, MonitorEventType } from '../cache';\r\nimport { error, detectIsFunction } from '../utils';\r\nimport { useUpdate } from '../use-update';\r\nimport { useMemo } from '../use-memo';\r\n\r\ntype UseMutatinOptions<T> = {\r\n  key: string;\r\n  refetchQueries?: Array<string>;\r\n  onSuccess?: (x: InMemoryCache, data: T) => void;\r\n};\r\n\r\nfunction useMutation<M extends Mutation>(mutation: M, options: UseMutatinOptions<Awaited<ReturnType<M>>>) {\r\n  type Params = Parameters<M>;\r\n  type AwaitedResult = Awaited<ReturnType<M>>;\r\n  const { key, refetchQueries = [], onSuccess } = options || {};\r\n  const update = useUpdate();\r\n  const cache = useCache();\r\n  const state = useMemo<State<AwaitedResult>>(() => ({ isFetching: false, data: null, error: null }), []);\r\n  const make = async (...args: Params) => {\r\n    let data: AwaitedResult = null;\r\n\r\n    cache.__emit({ type: MonitorEventType.MUTATION, phase: 'start', key, data: args });\r\n\r\n    try {\r\n      state.isFetching = true;\r\n      state.error = null;\r\n      update();\r\n      data = (await mutation(...args)) as AwaitedResult;\r\n      cache.__emit({ type: MonitorEventType.MUTATION, phase: 'finish', key, data });\r\n      detectIsFunction(onSuccess) && onSuccess(cache, data);\r\n      refetchQueries.forEach(x => cache.invalidate({ key: x }));\r\n    } catch (err) {\r\n      error(err);\r\n      state.error = String(err);\r\n      cache.__emit({ type: MonitorEventType.MUTATION, phase: 'error', key, data: err });\r\n    } finally {\r\n      state.isFetching = false;\r\n      update();\r\n    }\r\n\r\n    return data;\r\n  };\r\n  const result: Result<AwaitedResult> = {\r\n    loading: state.isFetching,\r\n    data: state.data,\r\n    error: state.error,\r\n  };\r\n\r\n  return [make, result] as [(...args: Params) => ReturnType<M>, Result<AwaitedResult>];\r\n}\r\n\r\ntype State<T> = {\r\n  isFetching: boolean;\r\n  data: T;\r\n  error: string;\r\n};\r\n\r\ntype Result<T> = {\r\n  loading: boolean;\r\n} & Pick<State<T>, 'data' | 'error'>;\r\n\r\ntype Mutation = (...args: Array<unknown>) => Promise<unknown>;\r\n\r\nexport { useMutation };\r\n","export type ProductBrief = {\r\n  id: number;\r\n  name: string;\r\n};\r\n\r\nexport type Product = {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n};\r\n\r\nconst IS_SERVER = typeof globalThis.window === 'undefined';\r\nconst TIMEOUT = IS_SERVER ? 100 : 600;\r\n\r\nconst sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// sumulates the database\r\nlet nextId = 0;\r\nconst products: Array<Product> = new Array(50).fill(null).map(() => ({\r\n  id: ++nextId,\r\n  name: `Product #${nextId}`,\r\n  description:\r\n    'Lorem ipsum dolor sit amet consectetur, adipisicing elit. Nostrum blanditiis quia minus corrupti quidem. Ipsam quae ad velit repudiandae molestias unde'.repeat(\r\n      3,\r\n    ),\r\n}));\r\n\r\n// api\r\nconst api = {\r\n  async fetchProducts() {\r\n    await sleep(TIMEOUT);\r\n    const briefs = products.map(x => ({ ...x, description: null })) as Array<ProductBrief>;\r\n\r\n    return briefs;\r\n  },\r\n  async fetchProduct(id: number) {\r\n    if (!detectIsValidId(id)) throwError();\r\n    await sleep(TIMEOUT);\r\n    const product = products.find(x => x.id === id) || null;\r\n\r\n    return product;\r\n  },\r\n  async addProduct(product: Partial<Product>) {\r\n    if (detectIsValidId(product.id)) throwError();\r\n    await sleep(TIMEOUT);\r\n\r\n    product.id = ++nextId;\r\n    products.push(product as Product);\r\n\r\n    return product as Product;\r\n  },\r\n  async changeProduct(product: Product) {\r\n    if (!detectIsValidId(product.id)) throwError();\r\n    if (!product) return null;\r\n    await sleep(TIMEOUT);\r\n    const idx = products.findIndex(x => x.id === product.id);\r\n\r\n    if (idx !== -1) {\r\n      products.splice(idx, 1, product);\r\n    }\r\n\r\n    return product;\r\n  },\r\n  async removeProduct(id: number) {\r\n    if (!detectIsValidId(id)) throwError();\r\n    await sleep(TIMEOUT);\r\n    const idx = products.findIndex(x => x.id === id);\r\n\r\n    if (idx !== -1) {\r\n      products.splice(idx, 1);\r\n    }\r\n\r\n    return true;\r\n  },\r\n};\r\n\r\nconst detectIsValidId = (id: unknown) => typeof id === 'number' && !Number.isNaN(id);\r\n\r\nconst throwError = () => {\r\n  throw new Error('Invalid id!');\r\n};\r\n\r\nexport { api };\r\n","import { useQuery, useMutation } from '@dark-engine/core';\r\n\r\nimport { type ProductBrief, api } from '../api';\r\n\r\nexport enum Key {\r\n  FETCH_PRODUCTS = 'FETCH_PRODUCTS',\r\n  FETCH_PRODUCT = 'FETCH_PRODUCT',\r\n  ADD_PRODUCT = 'ADD_PRODUCT',\r\n  CHANGE_PRODUCT = 'CHANGE_PRODUCT',\r\n  REMOVE_PRODUCT = 'REMOVE_PRODUCT',\r\n}\r\n\r\nfunction useProducts() {\r\n  return useQuery(() => api.fetchProducts(), { key: Key.FETCH_PRODUCTS });\r\n}\r\n\r\nfunction useProduct(id: number) {\r\n  return useQuery(({ id }) => api.fetchProduct(id), {\r\n    key: Key.FETCH_PRODUCT,\r\n    variables: { id },\r\n    extractId: x => x.id,\r\n  });\r\n}\r\n\r\nfunction useAddProductMutation() {\r\n  return useMutation(api.addProduct, {\r\n    key: Key.ADD_PRODUCT,\r\n    onSuccess: (cache, product) => {\r\n      const record = cache.read<Array<ProductBrief>>({ key: Key.FETCH_PRODUCTS });\r\n\r\n      if (record) {\r\n        const products = record.data;\r\n\r\n        products.push(product);\r\n        cache.optimistic({ key: Key.FETCH_PRODUCTS, data: products });\r\n      }\r\n    },\r\n  });\r\n}\r\n\r\nfunction useChangeProductMutation() {\r\n  return useMutation(api.changeProduct, {\r\n    key: Key.CHANGE_PRODUCT,\r\n    onSuccess: (cache, product) => {\r\n      const record = cache.read<Array<ProductBrief>>({ key: Key.FETCH_PRODUCTS });\r\n\r\n      if (record) {\r\n        const products = record.data;\r\n        const $product = products.find(x => x.id === product.id);\r\n\r\n        $product.name = product.name;\r\n        cache.optimistic({ key: Key.FETCH_PRODUCTS, data: products });\r\n        cache.optimistic({ key: Key.FETCH_PRODUCT, data: product, id: product.id });\r\n      }\r\n    },\r\n  });\r\n}\r\n\r\nfunction useRemoveProductMutation(id: number) {\r\n  return useMutation(() => api.removeProduct(id), {\r\n    key: Key.REMOVE_PRODUCT,\r\n    onSuccess: cache => {\r\n      const record = cache.read<Array<ProductBrief>>({ key: Key.FETCH_PRODUCTS });\r\n\r\n      if (record) {\r\n        const products = record.data;\r\n        const idx = products.findIndex(x => x.id === id);\r\n\r\n        if (idx !== -1) {\r\n          products.splice(idx, 1);\r\n          cache.optimistic({ key: Key.FETCH_PRODUCTS, data: products });\r\n        }\r\n      }\r\n\r\n      cache.delete({ key: Key.FETCH_PRODUCT, id });\r\n    },\r\n  });\r\n}\r\n\r\nexport { useProducts, useProduct, useAddProductMutation, useChangeProductMutation, useRemoveProductMutation };\r\n","import { useMemo } from '@dark-engine/core';\r\n\r\nimport { useActiveRouteContext, useCurrentPathContext, checkContextValue } from '../context';\r\nimport { createPathname } from '../create-routes';\r\n\r\nexport type Match = {\r\n  path: string;\r\n  url: string;\r\n};\r\n\r\nfunction useMatch(): Match {\r\n  const activeRoute = useActiveRouteContext();\r\n  checkContextValue(activeRoute);\r\n  const path = useCurrentPathContext();\r\n  const {\r\n    location: { pathname },\r\n  } = activeRoute;\r\n  const url = useMemo(() => (path ? createPathname(pathname, path) : ''), [path, pathname]);\r\n  const value: Match = { path, url };\r\n\r\n  return value;\r\n}\r\n\r\nexport { useMatch };\r\n","import { useActiveRouteContext, checkContextValue } from '../context';\r\nimport { type Params } from '../create-routes';\r\n\r\nfunction useParams(): Params {\r\n  const value = useActiveRouteContext();\r\n\r\n  checkContextValue(value);\r\n\r\n  return value.params;\r\n}\r\n\r\nexport { Params, useParams };\r\n"],"names":["url","history","params","id","Number","get","removeProduct","loading","urlToList","replace","onClick","async","push","back","useQuery","query","options","variables","key","cacheKey","extractId","$scope","cache","cacheId","getNextResourceId","state","isFetching","isLoaded","data","error","record","read","createState","register","unregister","mounted","firstTime","scope","isMounted","isFirstTime","useMounted","update","$update","isServer","isHydrateZone","getIsHydrateZone","make","isRefetch","$variables","$$variables","$cacheId","__emit","type","phase","setResource","write","err","String","valid","off","subscribe","__canUpdate","res","getResource","mutate","defer","Error","result","refetch","useMutation","mutation","refetchQueries","onSuccess","args","forEach","x","invalidate","TIMEOUT","globalThis","window","sleep","ms","Promise","resolve","setTimeout","nextId","products","Array","fill","map","name","description","repeat","api","detectIsValidId","throwError","find","product","idx","findIndex","splice","isNaN","Key","useProducts","fetchProducts","FETCH_PRODUCTS","useProduct","fetchProduct","FETCH_PRODUCT","useAddProductMutation","addProduct","ADD_PRODUCT","optimistic","useChangeProductMutation","changeProduct","CHANGE_PRODUCT","useRemoveProductMutation","REMOVE_PRODUCT","delete","useMatch","activeRoute","path","location","pathname","useParams","value"],"sourceRoot":""}