{"version":3,"file":"441.build.js","mappings":"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","sources":["webpack:///./components/product-edit.tsx","webpack:///../../../packages/core/src/use-query/use-query.ts","webpack:///../../../packages/core/src/use-mutation/use-mutation.ts","webpack:///./api/index.ts","webpack:///./hooks/index.ts","webpack:///../../../packages/web-router/src/use-match/use-match.ts","webpack:///../../../packages/web-router/src/use-params/use-params.ts"],"sourcesContent":["import { h, component } from '@dark-engine/core';\r\nimport { type SyntheticEvent } from '@dark-engine/platform-browser';\r\nimport { useMatch, useHistory, useParams } from '@dark-engine/web-router';\r\n\r\nimport { useProduct, useChangeProductMutation } from '../hooks';\r\nimport { Card, Input, Textarea, Form, Button } from './ui';\r\n\r\nconst ProductEdit = component(() => {\r\n  const params = useParams();\r\n  const { url } = useMatch();\r\n  const history = useHistory();\r\n  const id = Number(params.get('id'));\r\n  const { data: product } = useProduct(id);\r\n  const [changeProduct, { loading }] = useChangeProductMutation();\r\n  const urlToList = url.replace(`${id}/edit/`, '');\r\n\r\n  const handleSubmit = async (e: SyntheticEvent<InputEvent, HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const name = e.target.elements['name'].value as string;\r\n    const description = e.target.elements['desc'].value as string;\r\n\r\n    if (loading) return;\r\n    await changeProduct({ ...product, name, description });\r\n    history.push(urlToList);\r\n  };\r\n\r\n  return (\r\n    <Card $loading={loading}>\r\n      <h3>Edit product</h3>\r\n      <Form onSubmit={handleSubmit}>\r\n        <label for='name'>Name:</label>\r\n        <Input id='name' required value={product.name} />\r\n        <label for='desc'>Description:</label>\r\n        <Textarea id='desc' required rows={5} value={product.description} />\r\n        <Button type='submit'>Edit</Button>\r\n      </Form>\r\n    </Card>\r\n  );\r\n});\r\n\r\nexport default ProductEdit;\r\n","import { type InMemoryCache, useCache, MonitorEventType, checkCache, CACHE_ROOT_ID } from '../cache';\r\nimport { type AppResource, type Callback, type TextBased } from '../shared';\r\nimport { error, detectIsFunction, mapRecord } from '../utils';\r\nimport { useLayoutEffect } from '../use-layout-effect';\r\nimport { detectIsServer } from '../platform';\r\nimport { useEffect } from '../use-effect';\r\nimport { useSuspense } from '../suspense';\r\nimport { useUpdate } from '../use-update';\r\nimport { useMemo } from '../use-memo';\r\nimport { $$scope } from '../scope';\r\n\r\nexport type UseQueryOptions<V extends Variables> = {\r\n  key: string;\r\n  variables?: V;\r\n  extractId?: (x: V) => TextBased;\r\n  lazy?: boolean;\r\n};\r\n\r\nfunction useQuery<T, V extends Variables>(query: Query<T, V>, options: UseQueryOptions<V>) {\r\n  const {\r\n    variables = {} as V,\r\n    key: cacheKey,\r\n    extractId = () => CACHE_ROOT_ID,\r\n    lazy = false,\r\n  } = options || { variables: {} as V };\r\n  const $scope = $$scope();\r\n  const cache = useCache();\r\n  checkCache(cache);\r\n  const cacheId = extractId(variables);\r\n  const id = useMemo(() => $scope.getNextResourceId(), []);\r\n  const state = useMemo<State<T>>(() => createState<T>(cache, cacheKey, cacheId, lazy), []);\r\n  const { register, unregister } = useSuspense();\r\n  const [mounted, firstTime] = useMounted();\r\n  const update = useUpdate();\r\n  const $update = () => mounted() && update();\r\n  const isServer = detectIsServer();\r\n  const isHydrateZone = $scope.getIsHydrateZone();\r\n  const { isLoaded } = state;\r\n\r\n  state.cacheKey = cacheKey;\r\n  state.cacheId = cacheId;\r\n\r\n  const make = async ($variables?: V) => {\r\n    const $$variables = $variables || variables;\r\n    const $cacheId = extractId($$variables);\r\n\r\n    cache.__emit({ type: MonitorEventType.QUERY, phase: 'start', key: cacheKey, data: $$variables });\r\n\r\n    try {\r\n      if (!isServer && !firstTime()) {\r\n        state.isFetching = true;\r\n        $update();\r\n      }\r\n\r\n      const data = await query($$variables);\r\n\r\n      cache.__emit({ type: MonitorEventType.QUERY, phase: 'finish', key: cacheKey, data });\r\n\r\n      if (isServer) {\r\n        $scope.setResource(id, [data, null]);\r\n      } else {\r\n        unregister(id);\r\n        state.data = data;\r\n        state.isFetching = false;\r\n        state.error = null;\r\n      }\r\n\r\n      if (data) {\r\n        cache.write({ key: cacheKey, id: $cacheId, data });\r\n      }\r\n\r\n      return data;\r\n    } catch (err) {\r\n      error(err);\r\n      cache.__emit({ type: MonitorEventType.QUERY, phase: 'error', key: cacheKey, data: err });\r\n\r\n      if (isServer) {\r\n        $scope.setResource(id, [null, String(err)]);\r\n      } else {\r\n        unregister(id);\r\n        state.isFetching = false;\r\n        state.error = String(err);\r\n      }\r\n    } finally {\r\n      if (!isServer) {\r\n        state.isLoaded = true;\r\n        $update();\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isHydrateZone) return;\r\n    if (lazy) return;\r\n    const record = cache.read({ key: cacheKey, id: cacheId });\r\n\r\n    if (record?.valid) return;\r\n\r\n    make();\r\n  }, [...mapRecord(variables)]);\r\n\r\n  useEffect(() => {\r\n    let off: Callback = null;\r\n\r\n    off = cache.subscribe(({ type, key, id }) => {\r\n      if (key === state.cacheKey && id === state.cacheId) {\r\n        if (type === 'invalidate' || type === 'optimistic') {\r\n          if (cache.__canUpdate(key)) {\r\n            make();\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      unregister(id);\r\n      detectIsFunction(off) && off();\r\n    };\r\n  }, []);\r\n\r\n  if (isServer || isHydrateZone) {\r\n    const res = $scope.getResource(id) as AppResource<T>;\r\n\r\n    if (isServer) {\r\n      if (res) {\r\n        mutate(state, res);\r\n      } else {\r\n        $scope.defer(make);\r\n      }\r\n    } else if (isHydrateZone) {\r\n      if (!res) throw new Error('[Dark]: can not read app state from the server!');\r\n      const [data] = res;\r\n\r\n      mutate(state, res);\r\n\r\n      if (data) {\r\n        cache.write({ key: cacheKey, id: cacheId, data });\r\n      }\r\n    }\r\n  } else {\r\n    firstTime() && !isLoaded && !lazy && register(id);\r\n  }\r\n\r\n  const result: QueryResult<T> = {\r\n    loading: state.isFetching,\r\n    data: state.data,\r\n    error: state.error,\r\n    refetch: make,\r\n  };\r\n\r\n  return result;\r\n}\r\n\r\nfunction createState<T>(cache: InMemoryCache, cacheKey: string, cacheId: TextBased, lazy) {\r\n  const state: State<T> = {\r\n    isFetching: !lazy,\r\n    isLoaded: false,\r\n    data: null,\r\n    error: null,\r\n    cacheKey,\r\n    cacheId,\r\n  };\r\n  const record = cache.read({ key: cacheKey, id: cacheId });\r\n\r\n  if (record) {\r\n    state.isFetching = false;\r\n    state.isLoaded = true;\r\n    state.data = record.data as T;\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nfunction mutate<T>(state: State<T>, res: AppResource<T>) {\r\n  const [data, error] = res;\r\n\r\n  state.isFetching = false;\r\n  state.isLoaded = true;\r\n  state.data = data;\r\n  state.error = error;\r\n}\r\n\r\nfunction useMounted() {\r\n  const scope = useMemo(() => ({ isMounted: true, isFirstTime: true }), []);\r\n  const { isFirstTime } = scope;\r\n\r\n  useLayoutEffect(() => {\r\n    scope.isFirstTime = false;\r\n    return () => (scope.isMounted = false);\r\n  }, []);\r\n\r\n  return [() => scope.isMounted, () => isFirstTime] as [BooleanFn, BooleanFn];\r\n}\r\n\r\ntype BooleanFn = () => boolean;\r\n\r\ntype State<T> = {\r\n  isFetching: boolean;\r\n  isLoaded: boolean;\r\n  data: T;\r\n  error: string;\r\n  cacheId: TextBased;\r\n  cacheKey: string;\r\n};\r\n\r\nexport type QueryResult<T> = {\r\n  loading: boolean;\r\n  refetch: Query<T>;\r\n} & Pick<State<T>, 'data' | 'error'>;\r\n\r\nexport type Variables<K extends string = string, V = any> = Record<K, V>;\r\nexport type Query<T, V extends Variables = Variables> = (variables?: V) => Promise<T>;\r\n\r\nexport { useQuery };\r\n","import { type InMemoryCache, useCache, MonitorEventType, checkCache } from '../cache';\r\nimport { error, detectIsFunction } from '../utils';\r\nimport { useUpdate } from '../use-update';\r\nimport { useMemo } from '../use-memo';\r\n\r\ntype UseMutatinOptions<T> = {\r\n  key: string;\r\n  refetchQueries?: Array<string>;\r\n  onSuccess?: (x: InMemoryCache, data: T) => void;\r\n};\r\n\r\nfunction useMutation<M extends Mutation>(mutation: M, options: UseMutatinOptions<Awaited<ReturnType<M>>>) {\r\n  type Params = Parameters<M>;\r\n  type AwaitedResult = Awaited<ReturnType<M>>;\r\n  const { key, refetchQueries = [], onSuccess } = options || {};\r\n  const update = useUpdate();\r\n  const cache = useCache();\r\n  checkCache(cache);\r\n  const state = useMemo<State<AwaitedResult>>(() => ({ isFetching: false, data: null, error: null }), []);\r\n  const make = async (...args: Params) => {\r\n    let data: AwaitedResult = null;\r\n\r\n    cache.__emit({ type: MonitorEventType.MUTATION, phase: 'start', key, data: args });\r\n\r\n    try {\r\n      state.isFetching = true;\r\n      state.error = null;\r\n      update();\r\n      data = (await mutation(...args)) as AwaitedResult;\r\n      cache.__emit({ type: MonitorEventType.MUTATION, phase: 'finish', key, data });\r\n      detectIsFunction(onSuccess) && onSuccess(cache, data);\r\n      refetchQueries.forEach(x => cache.invalidate({ key: x }));\r\n    } catch (err) {\r\n      error(err);\r\n      state.error = String(err);\r\n      cache.__emit({ type: MonitorEventType.MUTATION, phase: 'error', key, data: err });\r\n    } finally {\r\n      state.isFetching = false;\r\n      update();\r\n    }\r\n\r\n    return data;\r\n  };\r\n  const result: MutationResult<AwaitedResult> = {\r\n    loading: state.isFetching,\r\n    data: state.data,\r\n    error: state.error,\r\n  };\r\n\r\n  return [make, result] as [(...args: Params) => ReturnType<M>, MutationResult<AwaitedResult>];\r\n}\r\n\r\ntype State<T> = {\r\n  isFetching: boolean;\r\n  data: T;\r\n  error: string;\r\n};\r\n\r\ntype MutationResult<T> = {\r\n  loading: boolean;\r\n} & Pick<State<T>, 'data' | 'error'>;\r\n\r\ntype Mutation = (...args: Array<unknown>) => Promise<unknown>;\r\n\r\nexport { useMutation };\r\n","export type ProductBrief = {\r\n  id: number;\r\n  name: string;\r\n};\r\n\r\nexport type Product = {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n};\r\n\r\nconst IS_SERVER = typeof globalThis.window === 'undefined';\r\nconst TIMEOUT = IS_SERVER ? 100 : 600;\r\n\r\nconst sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// sumulates the database\r\nlet nextId = 0;\r\nconst products: Array<Product> = new Array(50).fill(null).map(() => ({\r\n  id: ++nextId,\r\n  name: `Product #${nextId}`,\r\n  description:\r\n    'Lorem ipsum dolor sit amet consectetur, adipisicing elit. Nostrum blanditiis quia minus corrupti quidem. Ipsam quae ad velit repudiandae molestias unde'.repeat(\r\n      3,\r\n    ),\r\n}));\r\n\r\n// api\r\nconst api = {\r\n  async fetchProducts() {\r\n    await sleep(TIMEOUT);\r\n    const briefs = products.map(x => ({ ...x, description: null })) as Array<ProductBrief>;\r\n\r\n    return briefs;\r\n  },\r\n  async fetchProduct(id: number) {\r\n    if (!detectIsValidId(id)) throwError();\r\n    await sleep(TIMEOUT);\r\n    const product = products.find(x => x.id === id) || null;\r\n\r\n    return product;\r\n  },\r\n  async addProduct(product: Partial<Product>) {\r\n    if (detectIsValidId(product.id)) throwError();\r\n    await sleep(TIMEOUT);\r\n\r\n    product.id = ++nextId;\r\n    products.push(product as Product);\r\n\r\n    return product as Product;\r\n  },\r\n  async changeProduct(product: Product) {\r\n    if (!detectIsValidId(product.id)) throwError();\r\n    if (!product) return null;\r\n    await sleep(TIMEOUT);\r\n    const idx = products.findIndex(x => x.id === product.id);\r\n\r\n    if (idx !== -1) {\r\n      products.splice(idx, 1, product);\r\n    }\r\n\r\n    return product;\r\n  },\r\n  async removeProduct(id: number) {\r\n    if (!detectIsValidId(id)) throwError();\r\n    await sleep(TIMEOUT);\r\n    const idx = products.findIndex(x => x.id === id);\r\n\r\n    if (idx !== -1) {\r\n      products.splice(idx, 1);\r\n    }\r\n\r\n    return true;\r\n  },\r\n};\r\n\r\nconst detectIsValidId = (id: unknown) => typeof id === 'number' && !Number.isNaN(id);\r\n\r\nconst throwError = () => {\r\n  throw new Error('Invalid id!');\r\n};\r\n\r\nexport { api };\r\n","import { useQuery, useMutation } from '@dark-engine/core';\r\n\r\nimport { type ProductBrief, api } from '../api';\r\n\r\nexport enum Key {\r\n  FETCH_PRODUCTS = 'FETCH_PRODUCTS',\r\n  FETCH_PRODUCT = 'FETCH_PRODUCT',\r\n  ADD_PRODUCT = 'ADD_PRODUCT',\r\n  CHANGE_PRODUCT = 'CHANGE_PRODUCT',\r\n  REMOVE_PRODUCT = 'REMOVE_PRODUCT',\r\n}\r\n\r\nfunction useProducts() {\r\n  return useQuery(() => api.fetchProducts(), { key: Key.FETCH_PRODUCTS });\r\n}\r\n\r\nfunction useProduct(id: number) {\r\n  return useQuery(({ id }) => api.fetchProduct(id), {\r\n    key: Key.FETCH_PRODUCT,\r\n    variables: { id },\r\n    extractId: x => x.id,\r\n  });\r\n}\r\n\r\nfunction useAddProductMutation() {\r\n  return useMutation(api.addProduct, {\r\n    key: Key.ADD_PRODUCT,\r\n    onSuccess: (cache, product) => {\r\n      const record = cache.read<Array<ProductBrief>>({ key: Key.FETCH_PRODUCTS });\r\n\r\n      if (record) {\r\n        const products = record.data;\r\n\r\n        products.push(product);\r\n        cache.optimistic({ key: Key.FETCH_PRODUCTS, data: products });\r\n      }\r\n    },\r\n  });\r\n}\r\n\r\nfunction useChangeProductMutation() {\r\n  return useMutation(api.changeProduct, {\r\n    key: Key.CHANGE_PRODUCT,\r\n    onSuccess: (cache, product) => {\r\n      const record = cache.read<Array<ProductBrief>>({ key: Key.FETCH_PRODUCTS });\r\n\r\n      if (record) {\r\n        const products = record.data;\r\n        const $product = products.find(x => x.id === product.id);\r\n\r\n        $product.name = product.name;\r\n        cache.optimistic({ key: Key.FETCH_PRODUCTS, data: products });\r\n        cache.optimistic({ key: Key.FETCH_PRODUCT, data: product, id: product.id });\r\n      }\r\n    },\r\n  });\r\n}\r\n\r\nfunction useRemoveProductMutation(id: number) {\r\n  return useMutation(() => api.removeProduct(id), {\r\n    key: Key.REMOVE_PRODUCT,\r\n    onSuccess: cache => {\r\n      const record = cache.read<Array<ProductBrief>>({ key: Key.FETCH_PRODUCTS });\r\n\r\n      if (record) {\r\n        const products = record.data;\r\n        const idx = products.findIndex(x => x.id === id);\r\n\r\n        if (idx !== -1) {\r\n          products.splice(idx, 1);\r\n          cache.optimistic({ key: Key.FETCH_PRODUCTS, data: products });\r\n        }\r\n      }\r\n\r\n      cache.delete({ key: Key.FETCH_PRODUCT, id });\r\n    },\r\n  });\r\n}\r\n\r\nexport { useProducts, useProduct, useAddProductMutation, useChangeProductMutation, useRemoveProductMutation };\r\n","import { useMemo } from '@dark-engine/core';\r\n\r\nimport { useActiveRouteContext, useCurrentPathContext, checkContextValue } from '../context';\r\nimport { createPathname } from '../create-routes';\r\n\r\nexport type Match = {\r\n  path: string;\r\n  url: string;\r\n};\r\n\r\nfunction useMatch(): Match {\r\n  const activeRoute = useActiveRouteContext();\r\n  checkContextValue(activeRoute);\r\n  const path = useCurrentPathContext();\r\n  const {\r\n    location: { pathname },\r\n  } = activeRoute;\r\n  const url = useMemo(() => (path ? createPathname(pathname, path) : ''), [path, pathname]);\r\n  const value: Match = { path, url };\r\n\r\n  return value;\r\n}\r\n\r\nexport { useMatch };\r\n","import { useActiveRouteContext, checkContextValue } from '../context';\r\nimport { type Params } from '../create-routes';\r\n\r\nfunction useParams(): Params {\r\n  const value = useActiveRouteContext();\r\n\r\n  checkContextValue(value);\r\n\r\n  return value.params;\r\n}\r\n\r\nexport { Params, useParams };\r\n"],"names":["params","url","history","id","Number","get","data","product","changeProduct","loading","urlToList","replace","onSubmit","async","e","preventDefault","name","target","elements","value","description","push","for","required","rows","type","useQuery","query","options","variables","key","cacheKey","extractId","lazy","$scope","cache","cacheId","getNextResourceId","state","isFetching","isLoaded","error","record","read","createState","register","unregister","mounted","firstTime","scope","isMounted","isFirstTime","useMounted","update","$update","isServer","isHydrateZone","getIsHydrateZone","make","$variables","$$variables","$cacheId","__emit","phase","setResource","write","err","String","valid","off","subscribe","__canUpdate","res","getResource","mutate","defer","Error","refetch","useMutation","mutation","refetchQueries","onSuccess","args","forEach","x","invalidate","TIMEOUT","globalThis","window","sleep","ms","Promise","resolve","setTimeout","nextId","products","Array","fill","map","repeat","api","detectIsValidId","throwError","find","idx","findIndex","splice","isNaN","Key","useProducts","fetchProducts","FETCH_PRODUCTS","useProduct","fetchProduct","FETCH_PRODUCT","useAddProductMutation","addProduct","ADD_PRODUCT","optimistic","useChangeProductMutation","CHANGE_PRODUCT","useRemoveProductMutation","removeProduct","REMOVE_PRODUCT","delete","useMatch","activeRoute","path","location","pathname","useParams"],"sourceRoot":""}