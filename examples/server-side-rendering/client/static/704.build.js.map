{"version":3,"file":"704.build.js","mappings":"wHAMA,MAAMA,GAAgB,SAA8B,EAAGC,WAC9C,kBAASC,MAAM,uBAAuBD,I,+KCoCnC,IAtBZ,oBACU,KAAAE,SAAW,4CAmBrB,CAjBEC,gBAAgBC,GACd,MAAMC,QAAiBC,MAAM,GAAGC,KAAKL,YAAYE,KAGjD,aAFsBC,EAASG,MAGjC,CAEAL,oBAAoBC,GAClB,MAAMC,QAAiBC,MAAM,GAAGC,KAAKL,YAAYE,cAGjD,aAFsBC,EAASG,MAGjC,CAEAL,2BAA2BC,GACzB,aAAaK,QAAQC,IAAI,CAACH,KAAKI,UAAUP,GAASG,KAAKK,cAAcR,IACvE,GAGF,MAMMS,GAAO,EAAAC,EAAA,KAAqB,EAAGd,WACnC,MAAM,IAAEe,GCxCV,WACE,MAAMC,GAAc,WACpB,QAAkBA,GAClB,MAAMC,GAAO,WAEXC,UAAU,SAAEC,IACVH,EACED,GAAM,QAAQ,IAAOE,GAAO,QAAeE,EAAUF,GAAQ,IAAK,CAACA,EAAME,IAG/E,MAFqB,CAAEF,OAAMF,MAG/B,CD6BkBK,GACVC,GAAU,SACVC,GAAS,SACTJ,GAAW,UACVK,EAAOC,IAAY,OAAS,GAC7BC,EAAKC,OAAOJ,EAAOK,IAAI,OACvBC,GAAW,SACf,IACE,IAAInB,SAAgCoB,GAClCC,YACE,IACED,EAAQ,CACN,CACEE,OAAQ,EACRN,GAAI,EACJO,MAAO,cACPC,KAAM,6DAER,CACE,CACE7B,OAAQ,EACRqB,GAAI,EACJS,KAAM,OACNC,MAAO,iBACPF,KAAM,8BAId,QAGN,CAACR,KAEG,KAAEW,EAAI,QAAEC,EAAO,MAAEC,GAAUV,EAQjC,IANA,SAAU,KACiB,SAArBN,EAAOK,IAAI,OACbN,EAAQkB,KAAK,Y,GAEd,CAACrB,EAASH,MAETsB,EAAS,OAAO,gCACpB,GAAIC,EAAO,OAAO,kB,UAAaA,GAC/B,MAAOE,EAAMC,GAAYL,EAEzB,OACE,OAAC,IAAa,MACZ,0BACA,sBACE,OAAC,IAAU,CAACM,GAAI,GAAG3B,MAAM,kBACzB,OAAC,IAAU,CAAC2B,GAAI,GAAG3B,MAAM,kBACzB,OAAC,IAAU,CAAC2B,GAAI,GAAG3B,MAAM,kBACzB,iBAAQ4B,QAAS,IAAMnB,EAASD,EAAQ,I,SAAWA,E,YAErD,4PAKA,OAACqB,EAAM,iBACP,OAACA,EAAM,0BACP,mBACE,iBAAKJ,EAAKR,QACV,gBAAIQ,EAAKP,OAEP,iBACGQ,EAASI,KAAIC,IACZ,aAAIC,IAAKD,EAAErB,KACT,gBAAIqB,EAAEX,QACN,kBAAMW,EAAEb,WAMjBjC,EAEJ,IAGG4C,EAASI,EAAA,SAAqC;;;;;;;;;;;;;;;;;IAiBhDC,GAAK,IAAG;eACGA,EAAEC,SAAW,UAAY;qBACnBD,EAAEC,SAAW,UAAY;oBAC1BD,EAAEC,SAAW,OAAS;;EAI1C,G,8CEvJA,SAASC,IACP,MAAMC,GAAQ,UAId,OAFA,QAAkBA,GAEXA,EAAM9B,MACf,C","sources":["webpack:///./components/animated-route.tsx","webpack:///./components/home.tsx","webpack:///../../../packages/web-router/src/use-match/use-match.ts","webpack:///../../../packages/web-router/src/use-params/use-params.ts"],"sourcesContent":["import { h, component, type DarkElement } from '@dark-engine/core';\r\n\r\ntype AnimatedRouteProps = {\r\n  slot: DarkElement;\r\n};\r\n\r\nconst AnimatedRoute = component<AnimatedRouteProps>(({ slot }) => {\r\n  return <article class='fade animated-route'>{slot}</article>;\r\n});\r\n\r\nexport { AnimatedRoute };\r\n","import { h, component, type DarkElement, useState, useEffect, useResource } from '@dark-engine/core';\r\nimport { RouterLink, useMatch, useHistory, useParams, useLocation } from '@dark-engine/web-router';\r\nimport { styled, css } from '@dark-engine/styled';\r\n\r\nimport { AnimatedRoute } from './animated-route';\r\n\r\ntype Post = {\r\n  userId: number;\r\n  id: number;\r\n  title: string;\r\n  body: string;\r\n};\r\n\r\ntype Comment = {\r\n  postId: number;\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  body: string;\r\n};\r\n\r\nclass Api {\r\n  private endpoint = 'https://jsonplaceholder.typicode.com/posts';\r\n\r\n  async fetchPost(postId: number) {\r\n    const response = await fetch(`${this.endpoint}/${postId}`);\r\n    const result = (await response.json()) as Post;\r\n\r\n    return result;\r\n  }\r\n\r\n  async fetchComments(postId: number) {\r\n    const response = await fetch(`${this.endpoint}/${postId}/comments`);\r\n    const result = (await response.json()) as Array<Comment>;\r\n\r\n    return result;\r\n  }\r\n\r\n  async fetchPostAndComments(postId: number) {\r\n    return await Promise.all([this.fetchPost(postId), this.fetchComments(postId)]);\r\n  }\r\n}\r\n\r\nconst api = new Api();\r\n\r\ntype HomeProps = {\r\n  slot: DarkElement;\r\n};\r\n\r\nconst Home = component<HomeProps>(({ slot }) => {\r\n  const { url } = useMatch();\r\n  const history = useHistory();\r\n  const params = useParams();\r\n  const location = useLocation();\r\n  const [count, setCount] = useState(0);\r\n  const id = Number(params.get('id'));\r\n  const resource = useResource(\r\n    () =>\r\n      new Promise<[Post, Array<Comment>]>(resolve =>\r\n        setTimeout(\r\n          () =>\r\n            resolve([\r\n              {\r\n                userId: 1,\r\n                id: 1,\r\n                title: 'Hello world',\r\n                body: 'Lorem ipsum, dolor sit amet consectetur adipisicing elit.',\r\n              },\r\n              [\r\n                {\r\n                  postId: 1,\r\n                  id: 1,\r\n                  name: 'Alex',\r\n                  email: 'alex@gmail.com',\r\n                  body: 'wedwed wefwefwe ewfwef',\r\n                },\r\n              ],\r\n            ]),\r\n          300,\r\n        ),\r\n      ),\r\n    [id],\r\n  );\r\n  const { data, loading, error } = resource;\r\n\r\n  useEffect(() => {\r\n    if (params.get('id') === 'null') {\r\n      history.push('/home/888');\r\n    }\r\n  }, [location.url]);\r\n\r\n  if (loading) return <div>LOADING...</div>;\r\n  if (error) return <div>error: {error}</div>;\r\n  const [post, comments] = data;\r\n\r\n  return (\r\n    <AnimatedRoute>\r\n      <h1>Home</h1>\r\n      <header>\r\n        <RouterLink to={`${url}a`}>child route a</RouterLink>\r\n        <RouterLink to={`${url}b`}>child route b</RouterLink>\r\n        <RouterLink to={`${url}c`}>child route c</RouterLink>\r\n        <button onClick={() => setCount(count + 1)}>fired {count} times</button>\r\n      </header>\r\n      <p>\r\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Vero excepturi quae harum laborum temporibus?\r\n        Repellendus laboriosam sunt corporis quasi. Quo accusamus aperiam consequuntur quia veritatis nobis minima omnis\r\n        error expedita!\r\n      </p>\r\n      <Button>Default</Button>\r\n      <Button $primary>Primary</Button>\r\n      <div>\r\n        <h4>{post.title}</h4>\r\n        <p>{post.body}</p>\r\n        {\r\n          <ul>\r\n            {comments.map(x => (\r\n              <li key={x.id}>\r\n                <b>{x.email}</b>\r\n                <div>{x.body}</div>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        }\r\n      </div>\r\n      {slot}\r\n    </AnimatedRoute>\r\n  );\r\n});\r\n\r\nconst Button = styled.button<{ $primary?: boolean }>`\r\n  display: inline-block;\r\n  font-size: 1rem;\r\n  padding: 0.5rem 0.7rem;\r\n  background-color: var(--color);\r\n  color: var(--text-color);\r\n  border: 1px solid var(--color);\r\n  border-radius: 3px;\r\n  transition: all 0.2s ease-in-out;\r\n\r\n  &:hover {\r\n    background-color: var(--hover-color);\r\n  }\r\n  &:active {\r\n    background-color: var(--color);\r\n  }\r\n\r\n  ${p => css`\r\n    --color: ${p.$primary ? '#BA68C8' : '#eee'};\r\n    --hover-color: ${p.$primary ? '#8E24AA' : '#E0E0E0'};\r\n    --text-color: ${p.$primary ? '#fff' : '#000'};\r\n  `}\r\n`;\r\n\r\nexport default Home;\r\n","import { useMemo } from '@dark-engine/core';\r\n\r\nimport { useActiveRouteContext, useCurrentPathContext, checkContextValue } from '../context';\r\nimport { createPathname } from '../create-routes';\r\n\r\nexport type Match = {\r\n  path: string;\r\n  url: string;\r\n};\r\n\r\nfunction useMatch(): Match {\r\n  const activeRoute = useActiveRouteContext();\r\n  checkContextValue(activeRoute);\r\n  const path = useCurrentPathContext();\r\n  const {\r\n    location: { pathname },\r\n  } = activeRoute;\r\n  const url = useMemo(() => (path ? createPathname(pathname, path) : ''), [path, pathname]);\r\n  const value: Match = { path, url };\r\n\r\n  return value;\r\n}\r\n\r\nexport { useMatch };\r\n","import { useActiveRouteContext, checkContextValue } from '../context';\r\nimport { type Params } from '../create-routes';\r\n\r\nfunction useParams(): Params {\r\n  const value = useActiveRouteContext();\r\n\r\n  checkContextValue(value);\r\n\r\n  return value.params;\r\n}\r\n\r\nexport { Params, useParams };\r\n"],"names":["AnimatedRoute","slot","class","endpoint","async","postId","response","fetch","this","json","Promise","all","fetchPost","fetchComments","Home","component","url","activeRoute","path","location","pathname","useMatch","history","params","count","setCount","id","Number","get","resource","resolve","setTimeout","userId","title","body","name","email","data","loading","error","push","post","comments","to","onClick","Button","map","x","key","styled","p","$primary","useParams","value"],"sourceRoot":""}