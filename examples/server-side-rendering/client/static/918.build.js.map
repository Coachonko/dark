{"version":3,"file":"918.build.js","mappings":"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","sources":["webpack:///./components/animated-route.tsx","webpack:///../../../packages/core/src/use-resource/use-resource.ts","webpack:///./components/home.tsx","webpack:///../../../packages/web-router/src/use-match/use-match.ts","webpack:///../../../packages/web-router/src/use-params/use-params.ts"],"sourcesContent":["import { h, component, type DarkElement } from '@dark-engine/core';\r\n\r\ntype AnimatedRouteProps = {\r\n  slot: DarkElement;\r\n};\r\n\r\nconst AnimatedRoute = component<AnimatedRouteProps>(({ slot }) => {\r\n  return <article class='fade animated-route'>{slot}</article>;\r\n});\r\n\r\nexport { AnimatedRoute };\r\n","import { useLayoutEffect } from '../use-layout-effect';\r\nimport { type AppResource } from '../shared';\r\nimport { detectIsServer } from '../platform';\r\nimport { useEffect } from '../use-effect';\r\nimport { useSuspense } from '../suspense';\r\nimport { useUpdate } from '../use-update';\r\nimport { useMemo } from '../use-memo';\r\nimport { $$scope } from '../scope';\r\nimport { error } from '../utils';\r\n\r\nfunction useResource<T>(fetch: FetchFn<T>, deps: Array<any> = []) {\r\n  const state = useMemo<State<T>>(() => ({ isFetching: true, isLoaded: false, data: null, error: null }), []);\r\n  const { register, unregister } = useSuspense();\r\n  const [mounted, firstTime] = useMounted();\r\n  const update = useUpdate();\r\n  const $update = () => mounted() && update();\r\n  const $scope = $$scope();\r\n  const id = useMemo(() => $scope.getNextResourceId(), []);\r\n  const $id = String(id);\r\n  const isServer = detectIsServer();\r\n  const isHydrateZone = $scope.getIsHydrateZone();\r\n  const make = async () => {\r\n    try {\r\n      if (!isServer && !firstTime()) {\r\n        state.isFetching = true;\r\n        $update();\r\n      }\r\n      const data = await fetch();\r\n\r\n      if (isServer) {\r\n        $scope.setResource(id, [data, null]);\r\n      } else {\r\n        unregister($id);\r\n        state.data = data;\r\n        state.isFetching = false;\r\n        state.error = null;\r\n      }\r\n\r\n      return data;\r\n    } catch (err) {\r\n      error(err);\r\n\r\n      if (isServer) {\r\n        $scope.setResource(id, [null, String(err)]);\r\n      } else {\r\n        unregister($id);\r\n        state.isFetching = false;\r\n        state.error = String(err);\r\n      }\r\n    } finally {\r\n      if (!isServer) {\r\n        state.isLoaded = true;\r\n        $update();\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    !isHydrateZone && make();\r\n  }, [...deps]);\r\n\r\n  useEffect(() => () => unregister($id), []);\r\n\r\n  if (isServer || isHydrateZone) {\r\n    const cache = $scope.getResource(id) as AppResource<T>;\r\n\r\n    if (isServer) {\r\n      if (cache) {\r\n        mutate(state, cache);\r\n      } else {\r\n        $scope.defer(make);\r\n      }\r\n    } else if (isHydrateZone) {\r\n      if (!cache) throw new Error('[Dark]: can not read app state from the server!');\r\n      mutate(state, cache);\r\n    }\r\n  } else {\r\n    firstTime() && register($id);\r\n  }\r\n\r\n  const value: Resource<T> = {\r\n    loading: state.isFetching,\r\n    data: state.data,\r\n    error: state.error,\r\n    refetch: make,\r\n  };\r\n\r\n  return value;\r\n}\r\n\r\nfunction mutate<T>(state: State<T>, cache: AppResource<T>) {\r\n  const [data, error] = cache;\r\n\r\n  state.isFetching = false;\r\n  state.isLoaded = true;\r\n  state.data = data;\r\n  state.error = error;\r\n}\r\n\r\nfunction useMounted() {\r\n  const scope = useMemo(() => ({ isMounted: true, isFirstTime: true }), []);\r\n  const { isFirstTime } = scope;\r\n\r\n  useLayoutEffect(() => {\r\n    scope.isFirstTime = false;\r\n    return () => (scope.isMounted = false);\r\n  }, []);\r\n\r\n  return [() => scope.isMounted, () => isFirstTime] as [BooleanFn, BooleanFn];\r\n}\r\n\r\ntype BooleanFn = () => boolean;\r\n\r\ntype State<T> = {\r\n  isFetching: boolean;\r\n  isLoaded: boolean;\r\n  data: T;\r\n  error: string;\r\n};\r\n\r\ntype Resource<T> = {\r\n  loading: boolean;\r\n  data: T;\r\n  error: string;\r\n  refetch: FetchFn<T>;\r\n};\r\n\r\ntype FetchFn<T> = () => Promise<T>;\r\n\r\nexport { useResource };\r\n","import { h, component, type DarkElement, useState, useEffect, useResource } from '@dark-engine/core';\r\nimport { type DarkJSX } from '@dark-engine/platform-browser';\r\nimport { RouterLink, useMatch, useHistory, useParams, useLocation } from '@dark-engine/web-router';\r\nimport { styled, css } from '@dark-engine/styled';\r\n\r\nimport { AnimatedRoute } from './animated-route';\r\n\r\ntype Post = {\r\n  userId: number;\r\n  id: number;\r\n  title: string;\r\n  body: string;\r\n};\r\n\r\ntype Comment = {\r\n  postId: number;\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  body: string;\r\n};\r\n\r\nclass Api {\r\n  private endpoint = 'https://jsonplaceholder.typicode.com/posts';\r\n\r\n  async fetchPost(postId: number) {\r\n    const response = await fetch(`${this.endpoint}/${postId}`);\r\n    const result = (await response.json()) as Post;\r\n\r\n    return result;\r\n  }\r\n\r\n  async fetchComments(postId: number) {\r\n    const response = await fetch(`${this.endpoint}/${postId}/comments`);\r\n    const result = (await response.json()) as Array<Comment>;\r\n\r\n    return result;\r\n  }\r\n\r\n  async fetchPostAndComments(postId: number) {\r\n    return await Promise.all([this.fetchPost(postId), this.fetchComments(postId)]);\r\n  }\r\n}\r\n\r\nconst api = new Api();\r\n\r\ntype HomeProps = {\r\n  slot: DarkElement;\r\n};\r\n\r\nconst Home = component<HomeProps>(({ slot }) => {\r\n  const { url } = useMatch();\r\n  const history = useHistory();\r\n  const params = useParams();\r\n  const location = useLocation();\r\n  const [count, setCount] = useState(0);\r\n  const id = Number(params.get('id'));\r\n  const resource = useResource(\r\n    () =>\r\n      new Promise<[Post, Array<Comment>]>(resolve =>\r\n        setTimeout(\r\n          () =>\r\n            resolve([\r\n              {\r\n                userId: 1,\r\n                id: 1,\r\n                title: 'Hello world',\r\n                body: 'Lorem ipsum, dolor sit amet consectetur adipisicing elit.',\r\n              },\r\n              [\r\n                {\r\n                  postId: 1,\r\n                  id: 1,\r\n                  name: 'Alex',\r\n                  email: 'alex@gmail.com',\r\n                  body: 'wedwed wefwefwe ewfwef',\r\n                },\r\n              ],\r\n            ]),\r\n          300,\r\n        ),\r\n      ),\r\n    [id],\r\n  );\r\n  const { data, loading, error } = resource;\r\n\r\n  useEffect(() => {\r\n    if (params.get('id') === 'null') {\r\n      history.push('/home/888');\r\n    }\r\n  }, [location.url]);\r\n\r\n  if (loading) return <div>LOADING...</div>;\r\n  if (error) return <div>error: {error}</div>;\r\n  const [post, comments] = data;\r\n\r\n  return (\r\n    <AnimatedRoute>\r\n      <h1>Home</h1>\r\n      <header>\r\n        <RouterLink to={`${url}a`}>child route a</RouterLink>\r\n        <RouterLink to={`${url}b`}>child route b</RouterLink>\r\n        <RouterLink to={`${url}c`}>child route c</RouterLink>\r\n        <Button $primary onClick={() => setCount(count + 1)}>\r\n          fired {count} times\r\n        </Button>\r\n      </header>\r\n      <p>\r\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Vero excepturi quae harum laborum temporibus?\r\n        Repellendus laboriosam sunt corporis quasi. Quo accusamus aperiam consequuntur quia veritatis nobis minima omnis\r\n        error expedita!\r\n      </p>\r\n      <div>\r\n        <h4>{post.title}</h4>\r\n        <p>{post.body}</p>\r\n        {\r\n          <ul>\r\n            {comments.map(x => (\r\n              <li key={x.id}>\r\n                <b>{x.email}</b>\r\n                <div>{x.body}</div>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        }\r\n      </div>\r\n      {slot}\r\n    </AnimatedRoute>\r\n  );\r\n});\r\n\r\nconst Button = styled.button<{ $primary?: boolean } & DarkJSX.HTMLTags['button']>`\r\n  display: inline-block;\r\n  font-size: 1rem;\r\n  padding: 0.5rem 0.7rem;\r\n  background-color: var(--color);\r\n  color: var(--text-color);\r\n  border: 1px solid var(--color);\r\n  border-radius: 3px;\r\n  transition: all 0.2s ease-in-out;\r\n\r\n  &:hover {\r\n    background-color: var(--hover-color);\r\n  }\r\n  &:active {\r\n    background-color: var(--color);\r\n  }\r\n\r\n  ${p => css`\r\n    --color: ${p.$primary ? '#BA68C8' : '#eee'};\r\n    --hover-color: ${p.$primary ? '#8E24AA' : '#E0E0E0'};\r\n    --text-color: ${p.$primary ? '#fff' : '#000'};\r\n  `}\r\n`;\r\n\r\nexport default Home;\r\n","import { useMemo } from '@dark-engine/core';\r\n\r\nimport { useActiveRouteContext, useCurrentPathContext, checkContextValue } from '../context';\r\nimport { createPathname } from '../create-routes';\r\n\r\nexport type Match = {\r\n  path: string;\r\n  url: string;\r\n};\r\n\r\nfunction useMatch(): Match {\r\n  const activeRoute = useActiveRouteContext();\r\n  checkContextValue(activeRoute);\r\n  const path = useCurrentPathContext();\r\n  const {\r\n    location: { pathname },\r\n  } = activeRoute;\r\n  const url = useMemo(() => (path ? createPathname(pathname, path) : ''), [path, pathname]);\r\n  const value: Match = { path, url };\r\n\r\n  return value;\r\n}\r\n\r\nexport { useMatch };\r\n","import { useActiveRouteContext, checkContextValue } from '../context';\r\nimport { type Params } from '../create-routes';\r\n\r\nfunction useParams(): Params {\r\n  const value = useActiveRouteContext();\r\n\r\n  checkContextValue(value);\r\n\r\n  return value.params;\r\n}\r\n\r\nexport { Params, useParams };\r\n"],"names":["AnimatedRoute","slot","class","mutate","state","cache","data","error","isFetching","isLoaded","endpoint","async","postId","response","fetch","this","json","Promise","all","fetchPost","fetchComments","Home","component","url","activeRoute","path","location","pathname","useMatch","history","params","count","setCount","resource","deps","register","unregister","mounted","firstTime","scope","isMounted","isFirstTime","useMounted","update","$update","$scope","id","getNextResourceId","$id","String","isServer","isHydrateZone","getIsHydrateZone","make","setResource","err","getResource","defer","Error","loading","refetch","useResource","resolve","setTimeout","userId","title","body","name","email","Number","get","push","post","comments","to","Button","onClick","map","x","key","styled","p","$primary","useParams","value"],"sourceRoot":""}