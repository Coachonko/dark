{"version":3,"file":"934.build.js","mappings":"0LAOA,MAyCA,GAzCmB,SAAU,KAC3B,MAAOA,GAAY,QAAEC,KAAa,OAAY,eAAgB,CAC5DC,WAAY,CAACC,EAAOC,KAClB,MAAMC,EAASF,EAAMG,KAA0B,CAAEC,IAAK,eAEtD,GAAIF,EAAQ,CACV,MAAMG,EAAWH,EAAOI,KAExBD,EAASE,KAAKN,GACdD,EAAMQ,WAAW,CAAEJ,IAAK,aAAgBE,KAAMD,GAChD,MAGE,IAAEI,IAAQ,SACVC,GAAU,SACVC,EAAOF,EAAIG,QAAQ,OAAQ,IAYjC,OACE,OAAC,KAAI,UAAWd,IACd,iCACA,OAAC,KAAI,CAACe,SAbWC,MAAOC,IAC1BA,EAAEC,iBACF,MAAMC,EAAOF,EAAEG,OAAOC,SAAe,KAAEC,MACjCC,EAAcN,EAAEG,OAAOC,SAAe,KAAEC,MAE1CtB,UACED,EAAW,CAAEoB,OAAMI,gBACzBX,EAAQH,KAAKI,GAAK,IAOd,gBAAOW,IAAI,QAAM,UACjB,OAAC,KAAK,CAACC,GAAG,OAAOC,UAAQ,KACzB,gBAAOF,IAAI,QAAM,iBACjB,OAAC,KAAQ,CAACC,GAAG,OAAOC,UAAQ,EAACC,KAAM,KACnC,OAAC,KAAM,CAACC,KAAK,UAAQ,QAG1B,G,8ECnCH,SAASC,EAAgCC,EAAaC,GAGpD,MAAM,eAAEC,EAAiB,GAAE,WAAE/B,GAAe8B,GAAW,CAAC,EAClDE,GAAS,SACT/B,GAAQ,UACRgC,GAAQ,QAA8B,KAAM,CAAGC,YAAY,EAAO3B,KAAM,KAAM4B,MAAO,QAAS,IA2BpG,MAAO,CA1BMpB,SAAUqB,KACrB,IAAI7B,EAAsB,KAE1B,IACE0B,EAAMC,YAAa,EACnBD,EAAME,MAAQ,KACdH,IACAzB,QAAcsB,KAAYO,IAC1B,QAAiBpC,IAAeA,EAAWC,EAAOM,GAClDwB,EAAeM,SAAQC,GAAKrC,EAAMsC,WAAW,CAAElC,IAAKiC,KAOtD,CANE,MAAOE,IACP,QAAMA,GACNP,EAAME,MAAQM,OAAOD,EACvB,C,QACEP,EAAMC,YAAa,EACnBF,GACF,CAEA,OAAOzB,CAAI,EAEyB,CACpCR,QAASkC,EAAMC,WACf3B,KAAM0B,EAAM1B,KACZ4B,MAAOF,EAAME,OAIjB,C,oEClCA,SAASO,IACP,MAAMC,GAAc,WACpB,QAAkBA,GAClB,MAAMC,GAAO,WAEXC,UAAU,SAAEC,IACVH,EACEjC,GAAM,QAAQ,IAAOkC,GAAO,QAAeE,EAAUF,GAAQ,IAAK,CAACA,EAAME,IAG/E,MAFqB,CAAEF,OAAMlC,MAG/B,C","sources":["webpack:///./components/product-add.tsx","webpack:///../../../packages/core/src/use-mutation/use-mutation.ts","webpack:///../../../packages/web-router/src/use-match/use-match.ts"],"sourcesContent":["import { h, component, useMutation } from '@dark-engine/core';\r\nimport { type SyntheticEvent } from '@dark-engine/platform-browser';\r\nimport { useMatch, useHistory } from '@dark-engine/web-router';\r\n\r\nimport { type ProductBrief, State, api } from '../api';\r\nimport { Card, Input, Textarea, Form, Button } from './ui';\r\n\r\nconst ProductAdd = component(() => {\r\n  const [addProduct, { loading }] = useMutation(api.addProduct, {\r\n    onComplete: (cache, product) => {\r\n      const record = cache.read<Array<ProductBrief>>({ key: State.PRODUCTS });\r\n\r\n      if (record) {\r\n        const products = record.data;\r\n\r\n        products.push(product);\r\n        cache.optimistic({ key: State.PRODUCTS, data: products });\r\n      }\r\n    },\r\n  });\r\n  const { url } = useMatch();\r\n  const history = useHistory();\r\n  const back = url.replace('add/', '');\r\n\r\n  const handleSubmit = async (e: SyntheticEvent<InputEvent, HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const name = e.target.elements['name'].value as string;\r\n    const description = e.target.elements['desc'].value as string;\r\n\r\n    if (loading) return;\r\n    await addProduct({ name, description });\r\n    history.push(back);\r\n  };\r\n\r\n  return (\r\n    <Card $loading={loading}>\r\n      <h3>Add product</h3>\r\n      <Form onSubmit={handleSubmit}>\r\n        <label for='name'>Name:</label>\r\n        <Input id='name' required />\r\n        <label for='desc'>Description:</label>\r\n        <Textarea id='desc' required rows={3} />\r\n        <Button type='submit'>Add</Button>\r\n      </Form>\r\n    </Card>\r\n  );\r\n});\r\n\r\nexport default ProductAdd;\r\n","import { error, detectIsFunction } from '../utils';\r\nimport { useUpdate } from '../use-update';\r\nimport { useMemo } from '../use-memo';\r\nimport { type InMemoryCache, useCache } from '../cache';\r\n\r\ntype UseMutatinOptions<T> = {\r\n  refetchQueries?: Array<string>;\r\n  onComplete?: (x: InMemoryCache, data: T) => void;\r\n};\r\n\r\nfunction useMutation<M extends Mutation>(mutation: M, options?: UseMutatinOptions<Awaited<ReturnType<M>>>) {\r\n  type Params = Parameters<M>;\r\n  type AwaitedResult = Awaited<ReturnType<M>>;\r\n  const { refetchQueries = [], onComplete } = options || {};\r\n  const update = useUpdate();\r\n  const cache = useCache();\r\n  const state = useMemo<State<AwaitedResult>>(() => ({ isFetching: false, data: null, error: null }), []);\r\n  const make = async (...args: Params) => {\r\n    let data: AwaitedResult = null;\r\n\r\n    try {\r\n      state.isFetching = true;\r\n      state.error = null;\r\n      update();\r\n      data = (await mutation(...args)) as AwaitedResult;\r\n      detectIsFunction(onComplete) && onComplete(cache, data);\r\n      refetchQueries.forEach(x => cache.invalidate({ key: x }));\r\n    } catch (err) {\r\n      error(err);\r\n      state.error = String(err);\r\n    } finally {\r\n      state.isFetching = false;\r\n      update();\r\n    }\r\n\r\n    return data;\r\n  };\r\n  const result: Result<AwaitedResult> = {\r\n    loading: state.isFetching,\r\n    data: state.data,\r\n    error: state.error,\r\n  };\r\n\r\n  return [make, result] as [(...args: Params) => ReturnType<M>, Result<AwaitedResult>];\r\n}\r\n\r\ntype State<T> = {\r\n  isFetching: boolean;\r\n  data: T;\r\n  error: string;\r\n};\r\n\r\ntype Result<T> = {\r\n  loading: boolean;\r\n} & Pick<State<T>, 'data' | 'error'>;\r\n\r\ntype Mutation = (...args: Array<unknown>) => Promise<unknown>;\r\n\r\nexport { useMutation };\r\n","import { useMemo } from '@dark-engine/core';\r\n\r\nimport { useActiveRouteContext, useCurrentPathContext, checkContextValue } from '../context';\r\nimport { createPathname } from '../create-routes';\r\n\r\nexport type Match = {\r\n  path: string;\r\n  url: string;\r\n};\r\n\r\nfunction useMatch(): Match {\r\n  const activeRoute = useActiveRouteContext();\r\n  checkContextValue(activeRoute);\r\n  const path = useCurrentPathContext();\r\n  const {\r\n    location: { pathname },\r\n  } = activeRoute;\r\n  const url = useMemo(() => (path ? createPathname(pathname, path) : ''), [path, pathname]);\r\n  const value: Match = { path, url };\r\n\r\n  return value;\r\n}\r\n\r\nexport { useMatch };\r\n"],"names":["addProduct","loading","onComplete","cache","product","record","read","key","products","data","push","optimistic","url","history","back","replace","onSubmit","async","e","preventDefault","name","target","elements","value","description","for","id","required","rows","type","useMutation","mutation","options","refetchQueries","update","state","isFetching","error","args","forEach","x","invalidate","err","String","useMatch","activeRoute","path","location","pathname"],"sourceRoot":""}