{"version":3,"file":"962.build.js","mappings":"wHAMA,MAAMA,GAAgB,SAA8B,EAAGC,WAC9C,kBAASC,MAAM,uBAAuBD,I,kICmF/C,SAASE,EAAUC,EAAiBC,GAClC,MAAOC,EAAMC,GAASF,EAEtBD,EAAMI,YAAa,EACnBJ,EAAMK,UAAW,EACjBL,EAAME,KAAOA,EACbF,EAAMG,MAAQA,CAChB,C,8BC3FA,MAAMG,EAAM,CACVC,SAAU,wBACVC,mBAAmBC,GACjB,MAAMC,QAAiBC,MAAM,GAAGC,KAAKL,qBAAqBE,KAG1D,aAFsBC,EAASG,MAGjC,GCUF,GAjBe,EAAAC,EAAA,KAAU,KACvB,MAAMC,ECJR,WACE,MAAMC,GAAQ,UAId,OAFA,QAAkBA,GAEXA,EAAMD,MACf,CDFiBE,GACTR,EAAKS,OAAOH,EAAOI,IAAI,OACvBC,EFCR,SAAwBT,EAAmBU,EAAmB,IAC5D,MAAMrB,GAAQ,QAAkB,KAAM,CAAGI,YAAY,EAAMC,UAAU,EAAOH,KAAM,KAAMC,MAAO,QAAS,KAClG,SAAEmB,EAAQ,WAAEC,IAAe,UAC1BC,EAASC,GAsFlB,WACE,MAAMC,GAAQ,QAAQ,KAAM,CAAGC,WAAW,EAAMC,aAAa,KAAS,KAChE,YAAEA,GAAgBF,EAOxB,OALA,QAAgB,KACdA,EAAME,aAAc,EACb,IAAOF,EAAMC,WAAY,IAC/B,IAEI,CAAC,IAAMD,EAAMC,UAAW,IAAMC,EACvC,CAhG+BC,GACvBC,GAAS,SACTC,EAAU,IAAMP,KAAaM,IAC7BE,GAAS,UACTvB,GAAK,QAAQ,IAAMuB,EAAOC,qBAAqB,IAC/CC,EAAMC,OAAO1B,GACb2B,GAAW,SACXC,EAAgBL,EAAOM,mBACvBC,EAAO/B,MAAOgC,KAAwBC,KAC1C,IACOL,GAAaX,MAChBzB,EAAMI,YAAa,EACnB2B,KAEF,MAAM7B,QAAaS,KAAU6B,EAAYC,EAAOpB,GAWhD,OATIe,EACFJ,EAAOU,YAAYjC,EAAI,CAACP,EAAM,QAE9BqB,EAAWW,GACXlC,EAAME,KAAOA,EACbF,EAAMI,YAAa,EACnBJ,EAAMG,MAAQ,MAGTD,CAgBT,CAfE,MAAOyC,IACP,QAAMA,GAEFP,EACFJ,EAAOU,YAAYjC,EAAI,CAAC,KAAM0B,OAAOQ,MAErCpB,EAAWW,GACXlC,EAAMI,YAAa,EACnBJ,EAAMG,MAAQgC,OAAOQ,GAEzB,C,QACOP,IACHpC,EAAMK,UAAW,EACjB0B,IAEJ,GASF,IANA,SAAU,MACPM,GAAiBE,GAAM,GACvB,IAAIlB,KAEP,SAAU,IAAM,IAAME,EAAWW,IAAM,IAEnCE,GAAYC,EAAe,CAC7B,MAAMpC,EAAQ+B,EAAOY,YAAYnC,GAEjC,GAAI2B,EACEnC,EACFF,EAAOC,EAAOC,GAEd+B,EAAOa,MAAMN,QAEV,GAAIF,EAAe,CACxB,IAAKpC,EAAO,MAAM,IAAI6C,MAAM,mDAC5B/C,EAAOC,EAAOC,EAChB,CACF,MACEwB,KAAeH,EAASY,GAU1B,MAP2B,CACzBa,QAAS/C,EAAMI,WACfF,KAAMF,EAAME,KACZC,MAAOH,EAAMG,MACb6C,QAAS,IAAIP,IAAqBF,GAAK,KAASE,GAIpD,CE/EmBQ,EAAY,IAAM3C,EAAI4C,aAAazC,IAAK,CAACA,IAK1D,OAHA0C,QAAQC,IAAI,KAAM3C,GAClB0C,QAAQC,IAAI,WAAYhC,IAGtB,OAAC,IAAa,MACZ,mCACA,iB,sBAAwBX,IACxB,cAAK4C,IAAI,kKAEZ,G","sources":["webpack:///./components/animated-route.tsx","webpack:///../../../packages/core/src/use-resource/use-resource.ts","webpack:///./api/index.ts","webpack:///./components/child-a.tsx","webpack:///../../../packages/web-router/src/use-params/use-params.ts"],"sourcesContent":["import { h, component, type DarkElement } from '@dark-engine/core';\r\n\r\ntype AnimatedRouteProps = {\r\n  slot: DarkElement;\r\n};\r\n\r\nconst AnimatedRoute = component<AnimatedRouteProps>(({ slot }) => {\r\n  return <article class='fade animated-route'>{slot}</article>;\r\n});\r\n\r\nexport { AnimatedRoute };\r\n","import { useLayoutEffect } from '../use-layout-effect';\r\nimport { type AppResource } from '../shared';\r\nimport { detectIsServer } from '../platform';\r\nimport { useEffect } from '../use-effect';\r\nimport { useSuspense } from '../suspense';\r\nimport { useUpdate } from '../use-update';\r\nimport { useMemo } from '../use-memo';\r\nimport { $$scope } from '../scope';\r\nimport { error } from '../utils';\r\n\r\nfunction useResource<T>(fetch: FetchFn<T>, deps: Array<any> = []) {\r\n  const state = useMemo<State<T>>(() => ({ isFetching: true, isLoaded: false, data: null, error: null }), []);\r\n  const { register, unregister } = useSuspense();\r\n  const [mounted, firstTime] = useMounted();\r\n  const update = useUpdate();\r\n  const $update = () => mounted() && update();\r\n  const $scope = $$scope();\r\n  const id = useMemo(() => $scope.getNextResourceId(), []);\r\n  const $id = String(id);\r\n  const isServer = detectIsServer();\r\n  const isHydrateZone = $scope.getIsHydrateZone();\r\n  const make = async (isRefetch?: boolean, ...args: Array<any>) => {\r\n    try {\r\n      if (!isServer && !firstTime()) {\r\n        state.isFetching = true;\r\n        $update();\r\n      }\r\n      const data = await fetch(...(isRefetch ? args : deps));\r\n\r\n      if (isServer) {\r\n        $scope.setResource(id, [data, null]);\r\n      } else {\r\n        unregister($id);\r\n        state.data = data;\r\n        state.isFetching = false;\r\n        state.error = null;\r\n      }\r\n\r\n      return data;\r\n    } catch (err) {\r\n      error(err);\r\n\r\n      if (isServer) {\r\n        $scope.setResource(id, [null, String(err)]);\r\n      } else {\r\n        unregister($id);\r\n        state.isFetching = false;\r\n        state.error = String(err);\r\n      }\r\n    } finally {\r\n      if (!isServer) {\r\n        state.isLoaded = true;\r\n        $update();\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    !isHydrateZone && make();\r\n  }, [...deps]);\r\n\r\n  useEffect(() => () => unregister($id), []);\r\n\r\n  if (isServer || isHydrateZone) {\r\n    const cache = $scope.getResource(id) as AppResource<T>;\r\n\r\n    if (isServer) {\r\n      if (cache) {\r\n        mutate(state, cache);\r\n      } else {\r\n        $scope.defer(make);\r\n      }\r\n    } else if (isHydrateZone) {\r\n      if (!cache) throw new Error('[Dark]: can not read app state from the server!');\r\n      mutate(state, cache);\r\n    }\r\n  } else {\r\n    firstTime() && register($id);\r\n  }\r\n\r\n  const value: Resource<T> = {\r\n    loading: state.isFetching,\r\n    data: state.data,\r\n    error: state.error,\r\n    refetch: (...args: Array<any>) => make(true, ...args),\r\n  };\r\n\r\n  return value;\r\n}\r\n\r\nfunction mutate<T>(state: State<T>, cache: AppResource<T>) {\r\n  const [data, error] = cache;\r\n\r\n  state.isFetching = false;\r\n  state.isLoaded = true;\r\n  state.data = data;\r\n  state.error = error;\r\n}\r\n\r\nfunction useMounted() {\r\n  const scope = useMemo(() => ({ isMounted: true, isFirstTime: true }), []);\r\n  const { isFirstTime } = scope;\r\n\r\n  useLayoutEffect(() => {\r\n    scope.isFirstTime = false;\r\n    return () => (scope.isMounted = false);\r\n  }, []);\r\n\r\n  return [() => scope.isMounted, () => isFirstTime] as [BooleanFn, BooleanFn];\r\n}\r\n\r\ntype BooleanFn = () => boolean;\r\n\r\ntype State<T> = {\r\n  isFetching: boolean;\r\n  isLoaded: boolean;\r\n  data: T;\r\n  error: string;\r\n};\r\n\r\ntype Resource<T> = {\r\n  loading: boolean;\r\n  data: T;\r\n  error: string;\r\n  refetch: FetchFn<T>;\r\n};\r\n\r\ntype FetchFn<T> = (...args: Array<any>) => Promise<T>;\r\n\r\nexport { useResource };\r\n","type Product = {\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n};\r\n\r\nconst api = {\r\n  endpoint: 'https://dummyjson.com',\r\n  async fetchProduct(id: number) {\r\n    const response = await fetch(`${this.endpoint}/products/${id}`);\r\n    const result = (await response.json()) as Product;\r\n\r\n    return result;\r\n  },\r\n};\r\n\r\nexport { api };\r\n","import { h, component, useResource } from '@dark-engine/core';\r\nimport { useParams } from '@dark-engine/web-router';\r\n\r\nimport { AnimatedRoute } from './animated-route';\r\nimport { api } from '../api';\r\n\r\nconst ChildA = component(() => {\r\n  const params = useParams();\r\n  const id = Number(params.get('id'));\r\n  const resource = useResource(() => api.fetchProduct(id), [id]);\r\n\r\n  console.log('id', id);\r\n  console.log('resource', resource);\r\n\r\n  return (\r\n    <AnimatedRoute>\r\n      <h2>Child route A</h2>\r\n      <h3>Route parameter is {id}</h3>\r\n      <img src='https://images.unsplash.com/photo-1670100054273-7371cf0816e3?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=387&q=80' />\r\n    </AnimatedRoute>\r\n  );\r\n});\r\n\r\nexport default ChildA;\r\n","import { useActiveRouteContext, checkContextValue } from '../context';\r\nimport { type Params } from '../create-routes';\r\n\r\nfunction useParams(): Params {\r\n  const value = useActiveRouteContext();\r\n\r\n  checkContextValue(value);\r\n\r\n  return value.params;\r\n}\r\n\r\nexport { Params, useParams };\r\n"],"names":["AnimatedRoute","slot","class","mutate","state","cache","data","error","isFetching","isLoaded","api","endpoint","async","id","response","fetch","this","json","component","params","value","useParams","Number","get","resource","deps","register","unregister","mounted","firstTime","scope","isMounted","isFirstTime","useMounted","update","$update","$scope","getNextResourceId","$id","String","isServer","isHydrateZone","getIsHydrateZone","make","isRefetch","args","setResource","err","getResource","defer","Error","loading","refetch","useResource","fetchProduct","console","log","src"],"sourceRoot":""}