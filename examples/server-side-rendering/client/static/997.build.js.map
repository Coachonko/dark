{"version":3,"file":"997.build.js","mappings":"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","sources":["webpack:///./components/product-card.tsx","webpack:///../../../packages/core/src/use-resource/use-resource.ts","webpack:///../../../packages/web-router/src/use-match/use-match.ts","webpack:///../../../packages/web-router/src/use-params/use-params.ts"],"sourcesContent":["import { h, component, Fragment, useResource } from '@dark-engine/core';\r\nimport { RouterLink, useMatch, useParams } from '@dark-engine/web-router';\r\n\r\nimport { State, api } from '../api';\r\nimport { Spinner, Error, Card, Button } from './ui';\r\n\r\nconst ProductCard = component(() => {\r\n  const params = useParams();\r\n  const { url } = useMatch();\r\n  const id = Number(params.get('id'));\r\n  const { data, loading, error } = useResource(({ id }) => api.fetchProduct(id), {\r\n    variables: { id },\r\n    key: State.PRODUCT_ITEM,\r\n    extractId: x => x.id,\r\n  });\r\n  const editUrl = url + 'edit/';\r\n  const removeUrl = url + 'remove/';\r\n\r\n  if (loading) return <Spinner />;\r\n  if (error) return <Error value={error} />;\r\n\r\n  return (\r\n    <Card>\r\n      {data ? (\r\n        <>\r\n          <h3>{data.name}</h3>\r\n          <p>{data.description}</p>\r\n        </>\r\n      ) : (\r\n        <h3>Item not found ðŸ˜Ÿ</h3>\r\n      )}\r\n      {data && (\r\n        <>\r\n          <Button as={RouterLink} to={editUrl}>\r\n            Edit\r\n          </Button>\r\n          <Button as={RouterLink} to={removeUrl}>\r\n            Remove\r\n          </Button>\r\n        </>\r\n      )}\r\n    </Card>\r\n  );\r\n});\r\n\r\nexport default ProductCard;\r\n","import { type InMemoryCache, useCache, CACHE_ROOT_ID } from '../cache';\r\nimport { type AppResource, type Callback, type TextBased } from '../shared';\r\nimport { useLayoutEffect } from '../use-layout-effect';\r\nimport { error, detectIsFunction } from '../utils';\r\nimport { detectIsServer } from '../platform';\r\nimport { useEffect } from '../use-effect';\r\nimport { useSuspense } from '../suspense';\r\nimport { useUpdate } from '../use-update';\r\nimport { useMemo } from '../use-memo';\r\nimport { $$scope } from '../scope';\r\n\r\ntype UseResourceOptions<V extends Variables> = {\r\n  variables?: V;\r\n  key?: string;\r\n  extractId?: (x: V) => TextBased;\r\n};\r\n\r\nfunction useResource<T, V extends Variables>(query: Query<T, V>, options?: UseResourceOptions<V>) {\r\n  const { variables = {} as V, key, extractId = () => CACHE_ROOT_ID } = options || { variables: {} as V };\r\n  const cache = useCache();\r\n  const cacheId = extractId(variables);\r\n  const state = useMemo<State<T, V>>(() => createState<T, V>(cache, key, cacheId), []);\r\n  const { register, unregister } = useSuspense();\r\n  const [mounted, firstTime] = useMounted();\r\n  const update = useUpdate();\r\n  const $update = () => mounted() && update();\r\n  const $scope = $$scope();\r\n  const id = useMemo(() => $scope.getNextResourceId(), []);\r\n  const $id = String(id);\r\n  const isServer = detectIsServer();\r\n  const isHydrateZone = $scope.getIsHydrateZone();\r\n  const { isLoaded } = state;\r\n\r\n  state.variables = variables;\r\n\r\n  const make = async (isRefetch?: boolean, $variables?: V) => {\r\n    const $$variables = isRefetch ? $variables : variables;\r\n\r\n    try {\r\n      if (!isServer && !firstTime()) {\r\n        state.isFetching = true;\r\n        $update();\r\n      }\r\n      const data = await query($$variables);\r\n\r\n      if (isServer) {\r\n        $scope.setResource(id, [data, null]);\r\n      } else {\r\n        unregister($id);\r\n        state.data = data;\r\n        state.isFetching = false;\r\n        state.error = null;\r\n        key && data && cache?.write({ key, id: extractId($$variables), data });\r\n      }\r\n\r\n      return data;\r\n    } catch (err) {\r\n      error(err);\r\n\r\n      if (isServer) {\r\n        $scope.setResource(id, [null, String(err)]);\r\n      } else {\r\n        unregister($id);\r\n        state.isFetching = false;\r\n        state.error = String(err);\r\n      }\r\n    } finally {\r\n      if (!isServer) {\r\n        state.isLoaded = true;\r\n        $update();\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isHydrateZone) return;\r\n    if (key && cache) {\r\n      const record = cache.read({ key, id: cacheId });\r\n\r\n      if (record?.isValid) return;\r\n    }\r\n\r\n    make();\r\n  }, [...mapRecord(variables)]);\r\n\r\n  useEffect(() => {\r\n    let off: Callback = null;\r\n\r\n    if (cache) {\r\n      off = cache.onChange(({ type, key: $key, id: $id }) => {\r\n        if ($key === key && $id === extractId(state.variables)) {\r\n          if (type === 'invalidate' || type === 'optimistic') {\r\n            make();\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      unregister($id);\r\n      detectIsFunction(off) && off();\r\n    };\r\n  }, []);\r\n\r\n  if (isServer || isHydrateZone) {\r\n    const res = $scope.getResource(id) as AppResource<T>;\r\n\r\n    if (isServer) {\r\n      if (res) {\r\n        mutate(state, res);\r\n      } else {\r\n        $scope.defer(make);\r\n      }\r\n    } else if (isHydrateZone) {\r\n      if (!res) throw new Error('[Dark]: can not read app state from the server!');\r\n      mutate(state, res);\r\n    }\r\n  } else {\r\n    firstTime() && !isLoaded && register($id);\r\n  }\r\n\r\n  const result: Result<T> = {\r\n    loading: state.isFetching,\r\n    data: state.data,\r\n    error: state.error,\r\n    refetch: (variables: V) => make(true, variables),\r\n  };\r\n\r\n  return result;\r\n}\r\n\r\nfunction createState<T, V>(cache: InMemoryCache, key: string, id: TextBased) {\r\n  const state: State<T, V> = { isFetching: true, isLoaded: false, data: null, error: null, variables: null };\r\n\r\n  if (cache) {\r\n    const record = cache.read({ key, id });\r\n\r\n    if (record) {\r\n      state.isFetching = false;\r\n      state.isLoaded = true;\r\n      state.data = record.data as T;\r\n    }\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nfunction mutate<T>(state: State<T>, res: AppResource<T>) {\r\n  const [data, error] = res;\r\n\r\n  state.isFetching = false;\r\n  state.isLoaded = true;\r\n  state.data = data;\r\n  state.error = error;\r\n}\r\n\r\nfunction useMounted() {\r\n  const scope = useMemo(() => ({ isMounted: true, isFirstTime: true }), []);\r\n  const { isFirstTime } = scope;\r\n\r\n  useLayoutEffect(() => {\r\n    scope.isFirstTime = false;\r\n    return () => (scope.isMounted = false);\r\n  }, []);\r\n\r\n  return [() => scope.isMounted, () => isFirstTime] as [BooleanFn, BooleanFn];\r\n}\r\n\r\nconst mapRecord = (record: object) => Object.keys(record).map(x => record[x]);\r\n\r\ntype BooleanFn = () => boolean;\r\n\r\ntype State<T, V = unknown> = {\r\n  isFetching: boolean;\r\n  isLoaded: boolean;\r\n  data: T;\r\n  error: string;\r\n  variables: V;\r\n};\r\n\r\ntype Result<T> = {\r\n  loading: boolean;\r\n  data: T;\r\n  error: string;\r\n  refetch: Query<T>;\r\n};\r\n\r\ntype Variables<K extends string = string, V = any> = Record<K, V>;\r\n\r\ntype Query<T, V extends Variables = Variables> = (variables: V) => Promise<T>;\r\n\r\ntype FetchPolicy = 'no-cache' | 'cache-only' | 'cache-first' | 'network-only' | 'cache-and-network';\r\n\r\nexport { useResource };\r\n","import { useMemo } from '@dark-engine/core';\r\n\r\nimport { useActiveRouteContext, useCurrentPathContext, checkContextValue } from '../context';\r\nimport { createPathname } from '../create-routes';\r\n\r\nexport type Match = {\r\n  path: string;\r\n  url: string;\r\n};\r\n\r\nfunction useMatch(): Match {\r\n  const activeRoute = useActiveRouteContext();\r\n  checkContextValue(activeRoute);\r\n  const path = useCurrentPathContext();\r\n  const {\r\n    location: { pathname },\r\n  } = activeRoute;\r\n  const url = useMemo(() => (path ? createPathname(pathname, path) : ''), [path, pathname]);\r\n  const value: Match = { path, url };\r\n\r\n  return value;\r\n}\r\n\r\nexport { useMatch };\r\n","import { useActiveRouteContext, checkContextValue } from '../context';\r\nimport { type Params } from '../create-routes';\r\n\r\nfunction useParams(): Params {\r\n  const value = useActiveRouteContext();\r\n\r\n  checkContextValue(value);\r\n\r\n  return value.params;\r\n}\r\n\r\nexport { Params, useParams };\r\n"],"names":["params","url","id","Number","get","data","loading","error","variables","key","extractId","x","editUrl","removeUrl","value","name","description","as","to","useResource","query","options","cache","cacheId","state","isFetching","isLoaded","record","read","createState","register","unregister","mounted","firstTime","scope","isMounted","isFirstTime","useMounted","update","$update","$scope","getNextResourceId","$id","String","isServer","isHydrateZone","getIsHydrateZone","make","async","isRefetch","$variables","$$variables","setResource","write","err","isValid","mapRecord","off","onChange","type","$key","res","getResource","mutate","defer","Error","result","refetch","Object","keys","map","useMatch","activeRoute","path","location","pathname","useParams"],"sourceRoot":""}