{"version":3,"file":"124.build.js","mappings":"iLAMA,MAAMA,EAAO,QAAU;;;;;;;;;;;EAmCvB,GAlBiB,SAAyB,EAAGC,WAC3C,MAAM,IAAEC,IAAQ,SAEhB,OACE,OAAC,KAAa,MACZ,OAACF,EAAI,MACH,iCACA,OAAC,KAAM,cACL,OAAC,IAAU,CAACG,GAAI,GAAGD,SAAS,SAC5B,OAAC,IAAU,CAACC,GAAI,GAAGD,cAAc,cACjC,OAAC,IAAU,CAACC,GAAI,GAAGD,YAAY,aAGlCD,EAEJ,G,oEC5BH,SAASG,IACP,MAAMC,GAAc,WACpB,QAAkBA,GAClB,MAAMC,GAAO,WAEXC,UAAU,SAAEC,IACVH,EACEH,GAAM,QAAQ,IAAOI,GAAO,QAAeE,EAAUF,GAAQ,IAAK,CAACA,EAAME,IAG/E,MAFqB,CAAEF,OAAMJ,MAG/B,C","sources":["webpack:///./components/products.tsx","webpack:///../../../packages/web-router/src/use-match/use-match.ts"],"sourcesContent":["import { type DarkElement, h, component } from '@dark-engine/core';\r\nimport { RouterLink, useMatch } from '@dark-engine/web-router';\r\nimport { styled } from '@dark-engine/styled';\r\n\r\nimport { AnimationFade, Header } from './ui';\r\n\r\nconst Root = styled.div`\r\n  position: sticky;\r\n  top: 0;\r\n  background-color: #fff8e1;\r\n  padding: 16px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\r\n  margin: 0 -16px;\r\n\r\n  & h1 {\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\ntype ProductsProps = {\r\n  slot: DarkElement;\r\n};\r\n\r\nconst Products = component<ProductsProps>(({ slot }) => {\r\n  const { url } = useMatch();\r\n\r\n  return (\r\n    <AnimationFade>\r\n      <Root>\r\n        <h1>Products ðŸ¤“</h1>\r\n        <Header $nested>\r\n          <RouterLink to={`${url}list`}>List</RouterLink>\r\n          <RouterLink to={`${url}analytics`}>Analytics</RouterLink>\r\n          <RouterLink to={`${url}balance`}>Balance</RouterLink>\r\n        </Header>\r\n      </Root>\r\n      {slot}\r\n    </AnimationFade>\r\n  );\r\n});\r\n\r\nexport default Products;\r\n","import { useMemo } from '@dark-engine/core';\r\n\r\nimport { useActiveRouteContext, useCurrentPathContext, checkContextValue } from '../context';\r\nimport { createPathname } from '../create-routes';\r\n\r\nexport type Match = {\r\n  path: string;\r\n  url: string;\r\n};\r\n\r\nfunction useMatch(): Match {\r\n  const activeRoute = useActiveRouteContext();\r\n  checkContextValue(activeRoute);\r\n  const path = useCurrentPathContext();\r\n  const {\r\n    location: { pathname },\r\n  } = activeRoute;\r\n  const url = useMemo(() => (path ? createPathname(pathname, path) : ''), [path, pathname]);\r\n  const value: Match = { path, url };\r\n\r\n  return value;\r\n}\r\n\r\nexport { useMatch };\r\n"],"names":["Root","slot","url","to","useMatch","activeRoute","path","location","pathname"],"sourceRoot":""}