{"version":3,"file":"125.build.js","mappings":"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","sources":["webpack:///./components/product-list.tsx","webpack:///../../../packages/core/src/use-query/use-query.ts","webpack:///../../../packages/core/src/use-mutation/use-mutation.ts","webpack:///./hooks/index.ts","webpack:///../../../packages/web-router/src/use-match/use-match.ts"],"sourcesContent":["import { type DarkElement, h, component } from '@dark-engine/core';\r\nimport { RouterLink, useMatch, useLocation } from '@dark-engine/web-router';\r\nimport { styled } from '@dark-engine/styled';\r\n\r\nimport { useProducts } from '../hooks';\r\nimport { Spinner, Error, AnimationFade, Button, List, ListItem } from './ui';\r\n\r\nconst Header = styled.header`\r\n  display: grid;\r\n  grid-template-columns: 1fr 4fr;\r\n  grid-template-rows: auto;\r\n  padding: 16px 0;\r\n\r\n  & h2 {\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nconst ProductList = component<{ slot: DarkElement }>(({ slot }) => {\r\n  const { url } = useMatch();\r\n  const { pathname } = useLocation();\r\n  const { data, loading, error } = useProducts();\r\n  const isList = pathname.endsWith('list/');\r\n  const urlToAdd = url + 'add/';\r\n  const renderList = () => {\r\n    return (\r\n      <List>\r\n        {[...data].reverse().map(x => {\r\n          return (\r\n            <ListItem key={x.id}>\r\n              <RouterLink to={`${url}${x.id}`}>{x.name}</RouterLink>\r\n            </ListItem>\r\n          );\r\n        })}\r\n      </List>\r\n    );\r\n  };\r\n\r\n  if (loading) return <Spinner />;\r\n  if (error) return <Error value={error} />;\r\n\r\n  return (\r\n    <AnimationFade>\r\n      <Header>\r\n        <div>\r\n          {isList ? (\r\n            <Button as={RouterLink} to={urlToAdd}>\r\n              Add product\r\n            </Button>\r\n          ) : (\r\n            <Button onClick={() => history.back()}>Back</Button>\r\n          )}\r\n        </div>\r\n      </Header>\r\n      <AnimationFade key={pathname}>{slot || renderList()}</AnimationFade>\r\n    </AnimationFade>\r\n  );\r\n});\r\n\r\nexport default ProductList;\r\n","import { type InMemoryCache, useCache, MonitorEventType, checkCache, CACHE_ROOT_ID } from '../cache';\r\nimport { type AppResource, type Callback, type TextBased } from '../shared';\r\nimport { error, detectIsFunction, mapRecord } from '../utils';\r\nimport { useLayoutEffect } from '../use-layout-effect';\r\nimport { detectIsServer } from '../platform';\r\nimport { useEffect } from '../use-effect';\r\nimport { useSuspense } from '../suspense';\r\nimport { useUpdate } from '../use-update';\r\nimport { useMemo } from '../use-memo';\r\nimport { $$scope } from '../scope';\r\n\r\nexport type UseQueryOptions<V extends Variables> = {\r\n  key: string;\r\n  variables?: V;\r\n  extractId?: (x: V) => TextBased;\r\n  lazy?: boolean;\r\n};\r\n\r\nfunction useQuery<T, V extends Variables>(query: Query<T, V>, options: UseQueryOptions<V>) {\r\n  const {\r\n    variables = {} as V,\r\n    key: cacheKey,\r\n    extractId = () => CACHE_ROOT_ID,\r\n    lazy = false,\r\n  } = options || { variables: {} as V };\r\n  const $scope = $$scope();\r\n  const cache = useCache();\r\n  checkCache(cache);\r\n  const cacheId = extractId(variables);\r\n  const id = useMemo(() => $scope.getNextResourceId(), []);\r\n  const state = useMemo<State<T>>(() => createState<T>(cache, cacheKey, cacheId, lazy), []);\r\n  const { register, unregister } = useSuspense();\r\n  const [mounted, firstTime] = useMounted();\r\n  const update = useUpdate();\r\n  const $update = () => mounted() && update();\r\n  const isServer = detectIsServer();\r\n  const isHydrateZone = $scope.getIsHydrateZone();\r\n  const { isLoaded } = state;\r\n\r\n  state.cacheKey = cacheKey;\r\n  state.cacheId = cacheId;\r\n\r\n  const make = async ($variables?: V) => {\r\n    const $$variables = $variables || variables;\r\n    const $cacheId = extractId($$variables);\r\n\r\n    cache.__emit({ type: MonitorEventType.QUERY, phase: 'start', key: cacheKey, data: $$variables });\r\n\r\n    try {\r\n      if (!isServer && !firstTime()) {\r\n        state.isFetching = true;\r\n        $update();\r\n      }\r\n\r\n      const data = await query($$variables);\r\n\r\n      cache.__emit({ type: MonitorEventType.QUERY, phase: 'finish', key: cacheKey, data });\r\n\r\n      if (isServer) {\r\n        $scope.setResource(id, [data, null]);\r\n      } else {\r\n        unregister(id);\r\n        state.data = data;\r\n        state.isFetching = false;\r\n        state.error = null;\r\n      }\r\n\r\n      if (data) {\r\n        cache.write({ key: cacheKey, id: $cacheId, data });\r\n      }\r\n\r\n      return data;\r\n    } catch (err) {\r\n      error(err);\r\n      cache.__emit({ type: MonitorEventType.QUERY, phase: 'error', key: cacheKey, data: err });\r\n\r\n      if (isServer) {\r\n        $scope.setResource(id, [null, String(err)]);\r\n      } else {\r\n        unregister(id);\r\n        state.isFetching = false;\r\n        state.error = String(err);\r\n      }\r\n    } finally {\r\n      if (!isServer) {\r\n        state.isLoaded = true;\r\n        $update();\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isHydrateZone) return;\r\n    if (lazy) return;\r\n    const record = cache.read({ key: cacheKey, id: cacheId });\r\n\r\n    if (record?.valid) return;\r\n\r\n    make();\r\n  }, [...mapRecord(variables)]);\r\n\r\n  useEffect(() => {\r\n    let off: Callback = null;\r\n\r\n    off = cache.subscribe(({ type, key, id }) => {\r\n      if (key === state.cacheKey && id === state.cacheId) {\r\n        if (type === 'invalidate' || type === 'optimistic') {\r\n          if (cache.__canUpdate(key)) {\r\n            make();\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      unregister(id);\r\n      detectIsFunction(off) && off();\r\n    };\r\n  }, []);\r\n\r\n  if (isServer || isHydrateZone) {\r\n    const res = $scope.getResource(id) as AppResource<T>;\r\n\r\n    if (isServer) {\r\n      if (res) {\r\n        mutate(state, res);\r\n      } else {\r\n        $scope.defer(make);\r\n      }\r\n    } else if (isHydrateZone) {\r\n      if (!res) throw new Error('[Dark]: can not read app state from the server!');\r\n      const [data] = res;\r\n\r\n      mutate(state, res);\r\n\r\n      if (data) {\r\n        cache.write({ key: cacheKey, id: cacheId, data });\r\n      }\r\n    }\r\n  } else {\r\n    firstTime() && !isLoaded && !lazy && register(id);\r\n  }\r\n\r\n  const result: QueryResult<T> = {\r\n    loading: state.isFetching,\r\n    data: state.data,\r\n    error: state.error,\r\n    refetch: make,\r\n  };\r\n\r\n  return result;\r\n}\r\n\r\nfunction createState<T>(cache: InMemoryCache, cacheKey: string, cacheId: TextBased, lazy) {\r\n  const state: State<T> = {\r\n    isFetching: !lazy,\r\n    isLoaded: false,\r\n    data: null,\r\n    error: null,\r\n    cacheKey,\r\n    cacheId,\r\n  };\r\n  const record = cache.read({ key: cacheKey, id: cacheId });\r\n\r\n  if (record) {\r\n    state.isFetching = false;\r\n    state.isLoaded = true;\r\n    state.data = record.data as T;\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nfunction mutate<T>(state: State<T>, res: AppResource<T>) {\r\n  const [data, error] = res;\r\n\r\n  state.isFetching = false;\r\n  state.isLoaded = true;\r\n  state.data = data;\r\n  state.error = error;\r\n}\r\n\r\nfunction useMounted() {\r\n  const scope = useMemo(() => ({ isMounted: true, isFirstTime: true }), []);\r\n  const { isFirstTime } = scope;\r\n\r\n  useLayoutEffect(() => {\r\n    scope.isFirstTime = false;\r\n    return () => (scope.isMounted = false);\r\n  }, []);\r\n\r\n  return [() => scope.isMounted, () => isFirstTime] as [BooleanFn, BooleanFn];\r\n}\r\n\r\ntype BooleanFn = () => boolean;\r\n\r\ntype State<T> = {\r\n  isFetching: boolean;\r\n  isLoaded: boolean;\r\n  data: T;\r\n  error: string;\r\n  cacheId: TextBased;\r\n  cacheKey: string;\r\n};\r\n\r\nexport type QueryResult<T> = {\r\n  loading: boolean;\r\n  refetch: Query<T>;\r\n} & Pick<State<T>, 'data' | 'error'>;\r\n\r\nexport type Variables<K extends string = string, V = any> = Record<K, V>;\r\nexport type Query<T, V extends Variables = Variables> = (variables?: V) => Promise<T>;\r\n\r\nexport { useQuery };\r\n","import { type InMemoryCache, useCache, MonitorEventType, checkCache } from '../cache';\r\nimport { error, detectIsFunction } from '../utils';\r\nimport { useUpdate } from '../use-update';\r\nimport { useMemo } from '../use-memo';\r\n\r\ntype UseMutatinOptions<T> = {\r\n  key: string;\r\n  refetchQueries?: Array<string>;\r\n  onSuccess?: (x: InMemoryCache, data: T) => void;\r\n};\r\n\r\nfunction useMutation<M extends Mutation>(mutation: M, options: UseMutatinOptions<Awaited<ReturnType<M>>>) {\r\n  type Params = Parameters<M>;\r\n  type AwaitedResult = Awaited<ReturnType<M>>;\r\n  const { key, refetchQueries = [], onSuccess } = options || {};\r\n  const update = useUpdate();\r\n  const cache = useCache();\r\n  checkCache(cache);\r\n  const state = useMemo<State<AwaitedResult>>(() => ({ isFetching: false, data: null, error: null }), []);\r\n  const make = async (...args: Params) => {\r\n    let data: AwaitedResult = null;\r\n\r\n    cache.__emit({ type: MonitorEventType.MUTATION, phase: 'start', key, data: args });\r\n\r\n    try {\r\n      state.isFetching = true;\r\n      state.error = null;\r\n      update();\r\n      data = (await mutation(...args)) as AwaitedResult;\r\n      cache.__emit({ type: MonitorEventType.MUTATION, phase: 'finish', key, data });\r\n      detectIsFunction(onSuccess) && onSuccess(cache, data);\r\n      refetchQueries.forEach(x => cache.invalidate({ key: x }));\r\n    } catch (err) {\r\n      error(err);\r\n      state.error = String(err);\r\n      cache.__emit({ type: MonitorEventType.MUTATION, phase: 'error', key, data: err });\r\n    } finally {\r\n      state.isFetching = false;\r\n      update();\r\n    }\r\n\r\n    return data;\r\n  };\r\n  const result: MutationResult<AwaitedResult> = {\r\n    loading: state.isFetching,\r\n    data: state.data,\r\n    error: state.error,\r\n  };\r\n\r\n  return [make, result] as [(...args: Params) => ReturnType<M>, MutationResult<AwaitedResult>];\r\n}\r\n\r\ntype State<T> = {\r\n  isFetching: boolean;\r\n  data: T;\r\n  error: string;\r\n};\r\n\r\ntype MutationResult<T> = {\r\n  loading: boolean;\r\n} & Pick<State<T>, 'data' | 'error'>;\r\n\r\ntype Mutation = (...args: Array<unknown>) => Promise<unknown>;\r\n\r\nexport { useMutation };\r\n","import { useQuery, useMutation } from '@dark-engine/core';\r\n\r\nimport { type ProductBrief, useApi } from '../contract';\r\n\r\nexport enum Key {\r\n  FETCH_PRODUCTS = 'FETCH_PRODUCTS',\r\n  FETCH_PRODUCT = 'FETCH_PRODUCT',\r\n  ADD_PRODUCT = 'ADD_PRODUCT',\r\n  CHANGE_PRODUCT = 'CHANGE_PRODUCT',\r\n  REMOVE_PRODUCT = 'REMOVE_PRODUCT',\r\n}\r\n\r\nfunction useProducts() {\r\n  const api = useApi();\r\n\r\n  return useQuery(() => api.fetchProducts(), { key: Key.FETCH_PRODUCTS });\r\n}\r\n\r\nfunction useProduct(id: number) {\r\n  const api = useApi();\r\n\r\n  return useQuery(({ id }) => api.fetchProduct(id), {\r\n    key: Key.FETCH_PRODUCT,\r\n    variables: { id },\r\n    extractId: x => x.id,\r\n  });\r\n}\r\n\r\nfunction useAddProductMutation() {\r\n  const api = useApi();\r\n\r\n  return useMutation(api.addProduct, {\r\n    key: Key.ADD_PRODUCT,\r\n    onSuccess: (cache, product) => {\r\n      const record = cache.read<Array<ProductBrief>>({ key: Key.FETCH_PRODUCTS });\r\n\r\n      if (record) {\r\n        const products = record.data;\r\n\r\n        products.push(product);\r\n        cache.optimistic({ key: Key.FETCH_PRODUCTS, data: products });\r\n      }\r\n    },\r\n  });\r\n}\r\n\r\nfunction useChangeProductMutation() {\r\n  const api = useApi();\r\n\r\n  return useMutation(api.changeProduct, {\r\n    key: Key.CHANGE_PRODUCT,\r\n    onSuccess: (cache, product) => {\r\n      const record = cache.read<Array<ProductBrief>>({ key: Key.FETCH_PRODUCTS });\r\n\r\n      if (record) {\r\n        const products = record.data;\r\n        const $product = products.find(x => x.id === product.id);\r\n\r\n        $product.name = product.name;\r\n        cache.optimistic({ key: Key.FETCH_PRODUCTS, data: products });\r\n        cache.optimistic({ key: Key.FETCH_PRODUCT, data: product, id: product.id });\r\n      }\r\n    },\r\n  });\r\n}\r\n\r\nfunction useRemoveProductMutation(id: number) {\r\n  const api = useApi();\r\n\r\n  return useMutation(() => api.removeProduct(id), {\r\n    key: Key.REMOVE_PRODUCT,\r\n    onSuccess: cache => {\r\n      const record = cache.read<Array<ProductBrief>>({ key: Key.FETCH_PRODUCTS });\r\n\r\n      if (record) {\r\n        const products = record.data;\r\n        const idx = products.findIndex(x => x.id === id);\r\n\r\n        if (idx !== -1) {\r\n          products.splice(idx, 1);\r\n          cache.optimistic({ key: Key.FETCH_PRODUCTS, data: products });\r\n        }\r\n      }\r\n\r\n      cache.delete({ key: Key.FETCH_PRODUCT, id });\r\n    },\r\n  });\r\n}\r\n\r\nexport { useProducts, useProduct, useAddProductMutation, useChangeProductMutation, useRemoveProductMutation };\r\n","import { useMemo } from '@dark-engine/core';\r\n\r\nimport { useActiveRouteContext, useCurrentPathContext, checkContextValue } from '../context';\r\nimport { createPathname } from '../create-routes';\r\n\r\nexport type Match = {\r\n  path: string;\r\n  url: string;\r\n};\r\n\r\nfunction useMatch(): Match {\r\n  const activeRoute = useActiveRouteContext();\r\n  checkContextValue(activeRoute);\r\n  const path = useCurrentPathContext();\r\n  const {\r\n    location: { pathname },\r\n  } = activeRoute;\r\n  const url = useMemo(() => (path ? createPathname(pathname, path) : ''), [path, pathname]);\r\n  const value: Match = { path, url };\r\n\r\n  return value;\r\n}\r\n\r\nexport { useMatch };\r\n"],"names":["Header","slot","url","pathname","data","loading","error","isList","endsWith","urlToAdd","value","as","to","onClick","history","back","key","reverse","map","x","id","name","useQuery","query","options","variables","cacheKey","extractId","lazy","$scope","cache","cacheId","getNextResourceId","state","isFetching","isLoaded","record","read","createState","register","unregister","mounted","firstTime","scope","isMounted","isFirstTime","useMounted","update","$update","isServer","isHydrateZone","getIsHydrateZone","make","async","$variables","$$variables","$cacheId","__emit","type","phase","setResource","write","err","String","valid","off","subscribe","__canUpdate","res","getResource","mutate","defer","Error","refetch","useMutation","mutation","refetchQueries","onSuccess","args","forEach","invalidate","Key","useProducts","api","fetchProducts","FETCH_PRODUCTS","useProduct","fetchProduct","FETCH_PRODUCT","useAddProductMutation","addProduct","ADD_PRODUCT","product","products","push","optimistic","useChangeProductMutation","changeProduct","CHANGE_PRODUCT","find","useRemoveProductMutation","removeProduct","REMOVE_PRODUCT","idx","findIndex","splice","delete","useMatch","activeRoute","path","location"],"sourceRoot":""}