{"version":3,"file":"430.build.js","mappings":"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","sources":["webpack:///./components/product-card.tsx","webpack:///../../../packages/core/src/use-query/use-query.ts","webpack:///../../../packages/core/src/use-mutation/use-mutation.ts","webpack:///./hooks/index.ts","webpack:///../../../packages/web-router/src/use-match/use-match.ts","webpack:///../../../packages/web-router/src/use-params/use-params.ts"],"sourcesContent":["import { type DarkElement, h, component } from '@dark-engine/core';\r\nimport { RouterLink, useMatch, useParams } from '@dark-engine/web-router';\r\n\r\nimport { useProduct } from '../hooks';\r\nimport { Spinner, Error, Card, Button } from './ui';\r\n\r\nconst ProductCard = component<{ slot: DarkElement }>(({ slot }) => {\r\n  const params = useParams();\r\n  const id = Number(params.get('id'));\r\n  const { data, loading, error } = useProduct(id);\r\n  const { url } = useMatch();\r\n  const urlToEdit = url + 'edit/';\r\n  const urlToRemove = url + 'remove/';\r\n\r\n  if (loading) return <Spinner />;\r\n  if (error) return <Error value={error} />;\r\n\r\n  if (!data) {\r\n    return (\r\n      <Card>\r\n        <h3>It seems there is no product with #{id} ðŸ¤«</h3>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (slot) return slot;\r\n\r\n  return (\r\n    <Card>\r\n      <h3>{data.name}</h3>\r\n      <p>{data.description}</p>\r\n      <Button as={RouterLink} to={urlToEdit}>\r\n        Edit\r\n      </Button>\r\n      <Button as={RouterLink} to={urlToRemove}>\r\n        Remove\r\n      </Button>\r\n    </Card>\r\n  );\r\n});\r\n\r\nexport default ProductCard;\r\n","import { type InMemoryCache, useCache, MonitorEventType, checkCache, CACHE_ROOT_ID } from '../cache';\r\nimport { type AppResource, type Callback, type TextBased } from '../shared';\r\nimport { error, detectIsFunction, mapRecord } from '../utils';\r\nimport { useLayoutEffect } from '../use-layout-effect';\r\nimport { detectIsServer } from '../platform';\r\nimport { useEffect } from '../use-effect';\r\nimport { useSuspense } from '../suspense';\r\nimport { useUpdate } from '../use-update';\r\nimport { useMemo } from '../use-memo';\r\nimport { $$scope } from '../scope';\r\n\r\nexport type UseQueryOptions<V extends Variables> = {\r\n  key: string;\r\n  variables?: V;\r\n  extractId?: (x: V) => TextBased;\r\n  lazy?: boolean;\r\n};\r\n\r\nfunction useQuery<T, V extends Variables>(query: Query<T, V>, options: UseQueryOptions<V>) {\r\n  const {\r\n    variables = {} as V,\r\n    key: cacheKey,\r\n    extractId = () => CACHE_ROOT_ID,\r\n    lazy = false,\r\n  } = options || { variables: {} as V };\r\n  const $scope = $$scope();\r\n  const cache = useCache();\r\n  checkCache(cache);\r\n  const cacheId = extractId(variables);\r\n  const id = useMemo(() => $scope.getNextResourceId(), []);\r\n  const state = useMemo<State<T>>(() => createState<T>(cache, cacheKey, cacheId, lazy), []);\r\n  const { register, unregister } = useSuspense();\r\n  const [mounted, firstTime] = useMounted();\r\n  const update = useUpdate();\r\n  const $update = () => mounted() && update();\r\n  const isServer = detectIsServer();\r\n  const isHydrateZone = $scope.getIsHydrateZone();\r\n  const { isLoaded } = state;\r\n\r\n  state.cacheKey = cacheKey;\r\n  state.cacheId = cacheId;\r\n\r\n  const make = async ($variables?: V) => {\r\n    const $$variables = $variables || variables;\r\n    const $cacheId = extractId($$variables);\r\n\r\n    cache.__emit({ type: MonitorEventType.QUERY, phase: 'start', key: cacheKey, data: $$variables });\r\n\r\n    try {\r\n      if (!isServer && !firstTime()) {\r\n        state.isFetching = true;\r\n        $update();\r\n      }\r\n\r\n      const data = await query($$variables);\r\n\r\n      cache.__emit({ type: MonitorEventType.QUERY, phase: 'finish', key: cacheKey, data });\r\n\r\n      if (isServer) {\r\n        $scope.setResource(id, [data, null]);\r\n      } else {\r\n        unregister(id);\r\n        state.data = data;\r\n        state.isFetching = false;\r\n        state.error = null;\r\n      }\r\n\r\n      if (data) {\r\n        cache.write({ key: cacheKey, id: $cacheId, data });\r\n      }\r\n\r\n      return data;\r\n    } catch (err) {\r\n      error(err);\r\n      cache.__emit({ type: MonitorEventType.QUERY, phase: 'error', key: cacheKey, data: err });\r\n\r\n      if (isServer) {\r\n        $scope.setResource(id, [null, String(err)]);\r\n      } else {\r\n        unregister(id);\r\n        state.isFetching = false;\r\n        state.error = String(err);\r\n      }\r\n    } finally {\r\n      if (!isServer) {\r\n        state.isLoaded = true;\r\n        $update();\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isHydrateZone) return;\r\n    if (lazy) return;\r\n    const record = cache.read({ key: cacheKey, id: cacheId });\r\n\r\n    if (record?.valid) return;\r\n\r\n    make();\r\n  }, [...mapRecord(variables)]);\r\n\r\n  useEffect(() => {\r\n    let off: Callback = null;\r\n\r\n    off = cache.subscribe(({ type, key, id }) => {\r\n      if (key === state.cacheKey && id === state.cacheId) {\r\n        if (type === 'invalidate' || type === 'optimistic') {\r\n          if (cache.__canUpdate(key)) {\r\n            make();\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      unregister(id);\r\n      detectIsFunction(off) && off();\r\n    };\r\n  }, []);\r\n\r\n  if (isServer || isHydrateZone) {\r\n    const res = $scope.getResource(id) as AppResource<T>;\r\n\r\n    if (isServer) {\r\n      if (res) {\r\n        mutate(state, res);\r\n      } else {\r\n        $scope.defer(make);\r\n      }\r\n    } else if (isHydrateZone) {\r\n      if (!res) throw new Error('[Dark]: can not read app state from the server!');\r\n      const [data] = res;\r\n\r\n      mutate(state, res);\r\n\r\n      if (data) {\r\n        cache.write({ key: cacheKey, id: cacheId, data });\r\n      }\r\n    }\r\n  } else {\r\n    firstTime() && !isLoaded && !lazy && register(id);\r\n  }\r\n\r\n  const result: QueryResult<T> = {\r\n    loading: state.isFetching,\r\n    data: state.data,\r\n    error: state.error,\r\n    refetch: make,\r\n  };\r\n\r\n  return result;\r\n}\r\n\r\nfunction createState<T>(cache: InMemoryCache, cacheKey: string, cacheId: TextBased, lazy) {\r\n  const state: State<T> = {\r\n    isFetching: !lazy,\r\n    isLoaded: false,\r\n    data: null,\r\n    error: null,\r\n    cacheKey,\r\n    cacheId,\r\n  };\r\n  const record = cache.read({ key: cacheKey, id: cacheId });\r\n\r\n  if (record) {\r\n    state.isFetching = false;\r\n    state.isLoaded = true;\r\n    state.data = record.data as T;\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nfunction mutate<T>(state: State<T>, res: AppResource<T>) {\r\n  const [data, error] = res;\r\n\r\n  state.isFetching = false;\r\n  state.isLoaded = true;\r\n  state.data = data;\r\n  state.error = error;\r\n}\r\n\r\nfunction useMounted() {\r\n  const scope = useMemo(() => ({ isMounted: true, isFirstTime: true }), []);\r\n  const { isFirstTime } = scope;\r\n\r\n  useLayoutEffect(() => {\r\n    scope.isFirstTime = false;\r\n    return () => (scope.isMounted = false);\r\n  }, []);\r\n\r\n  return [() => scope.isMounted, () => isFirstTime] as [BooleanFn, BooleanFn];\r\n}\r\n\r\ntype BooleanFn = () => boolean;\r\n\r\ntype State<T> = {\r\n  isFetching: boolean;\r\n  isLoaded: boolean;\r\n  data: T;\r\n  error: string;\r\n  cacheId: TextBased;\r\n  cacheKey: string;\r\n};\r\n\r\nexport type QueryResult<T> = {\r\n  loading: boolean;\r\n  refetch: Query<T>;\r\n} & Pick<State<T>, 'data' | 'error'>;\r\n\r\nexport type Variables<K extends string = string, V = any> = Record<K, V>;\r\nexport type Query<T, V extends Variables = Variables> = (variables?: V) => Promise<T>;\r\n\r\nexport { useQuery };\r\n","import { type InMemoryCache, useCache, MonitorEventType, checkCache } from '../cache';\r\nimport { error, detectIsFunction } from '../utils';\r\nimport { useUpdate } from '../use-update';\r\nimport { useMemo } from '../use-memo';\r\n\r\ntype UseMutatinOptions<T> = {\r\n  key: string;\r\n  refetchQueries?: Array<string>;\r\n  onSuccess?: (x: InMemoryCache, data: T) => void;\r\n};\r\n\r\nfunction useMutation<M extends Mutation>(mutation: M, options: UseMutatinOptions<Awaited<ReturnType<M>>>) {\r\n  type Params = Parameters<M>;\r\n  type AwaitedResult = Awaited<ReturnType<M>>;\r\n  const { key, refetchQueries = [], onSuccess } = options || {};\r\n  const update = useUpdate();\r\n  const cache = useCache();\r\n  checkCache(cache);\r\n  const state = useMemo<State<AwaitedResult>>(() => ({ isFetching: false, data: null, error: null }), []);\r\n  const make = async (...args: Params) => {\r\n    let data: AwaitedResult = null;\r\n\r\n    cache.__emit({ type: MonitorEventType.MUTATION, phase: 'start', key, data: args });\r\n\r\n    try {\r\n      state.isFetching = true;\r\n      state.error = null;\r\n      update();\r\n      data = (await mutation(...args)) as AwaitedResult;\r\n      cache.__emit({ type: MonitorEventType.MUTATION, phase: 'finish', key, data });\r\n      detectIsFunction(onSuccess) && onSuccess(cache, data);\r\n      refetchQueries.forEach(x => cache.invalidate({ key: x }));\r\n    } catch (err) {\r\n      error(err);\r\n      state.error = String(err);\r\n      cache.__emit({ type: MonitorEventType.MUTATION, phase: 'error', key, data: err });\r\n    } finally {\r\n      state.isFetching = false;\r\n      update();\r\n    }\r\n\r\n    return data;\r\n  };\r\n  const result: MutationResult<AwaitedResult> = {\r\n    loading: state.isFetching,\r\n    data: state.data,\r\n    error: state.error,\r\n  };\r\n\r\n  return [make, result] as [(...args: Params) => ReturnType<M>, MutationResult<AwaitedResult>];\r\n}\r\n\r\ntype State<T> = {\r\n  isFetching: boolean;\r\n  data: T;\r\n  error: string;\r\n};\r\n\r\ntype MutationResult<T> = {\r\n  loading: boolean;\r\n} & Pick<State<T>, 'data' | 'error'>;\r\n\r\ntype Mutation = (...args: Array<unknown>) => Promise<unknown>;\r\n\r\nexport { useMutation };\r\n","import { useQuery, useMutation } from '@dark-engine/core';\r\n\r\nimport { type ProductBrief, useApi } from '../../contract';\r\n\r\nexport enum Key {\r\n  FETCH_PRODUCTS = 'FETCH_PRODUCTS',\r\n  FETCH_PRODUCT = 'FETCH_PRODUCT',\r\n  ADD_PRODUCT = 'ADD_PRODUCT',\r\n  CHANGE_PRODUCT = 'CHANGE_PRODUCT',\r\n  REMOVE_PRODUCT = 'REMOVE_PRODUCT',\r\n}\r\n\r\nfunction useProducts() {\r\n  const api = useApi();\r\n\r\n  return useQuery(() => api.fetchProducts(), { key: Key.FETCH_PRODUCTS });\r\n}\r\n\r\nfunction useProduct(id: number) {\r\n  const api = useApi();\r\n\r\n  return useQuery(({ id }) => api.fetchProduct(id), {\r\n    key: Key.FETCH_PRODUCT,\r\n    variables: { id },\r\n    extractId: x => x.id,\r\n  });\r\n}\r\n\r\nfunction useAddProductMutation() {\r\n  const api = useApi();\r\n\r\n  return useMutation(api.addProduct, {\r\n    key: Key.ADD_PRODUCT,\r\n    onSuccess: (cache, product) => {\r\n      const record = cache.read<Array<ProductBrief>>({ key: Key.FETCH_PRODUCTS });\r\n\r\n      if (record) {\r\n        const products = record.data;\r\n\r\n        products.push(product);\r\n        cache.optimistic({ key: Key.FETCH_PRODUCTS, data: products });\r\n      }\r\n    },\r\n  });\r\n}\r\n\r\nfunction useChangeProductMutation() {\r\n  const api = useApi();\r\n\r\n  return useMutation(api.changeProduct, {\r\n    key: Key.CHANGE_PRODUCT,\r\n    onSuccess: (cache, product) => {\r\n      const record = cache.read<Array<ProductBrief>>({ key: Key.FETCH_PRODUCTS });\r\n\r\n      if (record) {\r\n        const products = record.data;\r\n        const $product = products.find(x => x.id === product.id);\r\n\r\n        $product.name = product.name;\r\n        cache.optimistic({ key: Key.FETCH_PRODUCTS, data: products });\r\n        cache.optimistic({ key: Key.FETCH_PRODUCT, data: product, id: product.id });\r\n      }\r\n    },\r\n  });\r\n}\r\n\r\nfunction useRemoveProductMutation(id: number) {\r\n  const api = useApi();\r\n\r\n  return useMutation(() => api.removeProduct(id), {\r\n    key: Key.REMOVE_PRODUCT,\r\n    onSuccess: cache => {\r\n      const record = cache.read<Array<ProductBrief>>({ key: Key.FETCH_PRODUCTS });\r\n\r\n      if (record) {\r\n        const products = record.data;\r\n        const idx = products.findIndex(x => x.id === id);\r\n\r\n        if (idx !== -1) {\r\n          products.splice(idx, 1);\r\n          cache.optimistic({ key: Key.FETCH_PRODUCTS, data: products });\r\n        }\r\n      }\r\n\r\n      cache.delete({ key: Key.FETCH_PRODUCT, id });\r\n    },\r\n  });\r\n}\r\n\r\nexport { useProducts, useProduct, useAddProductMutation, useChangeProductMutation, useRemoveProductMutation };\r\n","import { useMemo } from '@dark-engine/core';\r\n\r\nimport { useActiveRouteContext, useCurrentPathContext, checkContextValue } from '../context';\r\nimport { createPathname } from '../create-routes';\r\n\r\nexport type Match = {\r\n  path: string;\r\n  url: string;\r\n};\r\n\r\nfunction useMatch(): Match {\r\n  const activeRoute = useActiveRouteContext();\r\n  checkContextValue(activeRoute);\r\n  const path = useCurrentPathContext();\r\n  const {\r\n    location: { pathname },\r\n  } = activeRoute;\r\n  const url = useMemo(() => (path ? createPathname(pathname, path) : ''), [path, pathname]);\r\n  const value: Match = { path, url };\r\n\r\n  return value;\r\n}\r\n\r\nexport { useMatch };\r\n","import { useActiveRouteContext, checkContextValue } from '../context';\r\nimport { type Params } from '../create-routes';\r\n\r\nfunction useParams(): Params {\r\n  const value = useActiveRouteContext();\r\n\r\n  checkContextValue(value);\r\n\r\n  return value.params;\r\n}\r\n\r\nexport { Params, useParams };\r\n"],"names":["slot","params","id","Number","get","data","loading","error","url","urlToEdit","urlToRemove","value","name","description","as","to","useQuery","query","options","variables","key","cacheKey","extractId","lazy","$scope","cache","cacheId","getNextResourceId","state","isFetching","isLoaded","record","read","createState","register","unregister","mounted","firstTime","scope","isMounted","isFirstTime","useMounted","update","$update","isServer","isHydrateZone","getIsHydrateZone","make","async","$variables","$$variables","$cacheId","__emit","type","phase","setResource","write","err","String","valid","off","subscribe","__canUpdate","res","getResource","mutate","defer","Error","refetch","useMutation","mutation","refetchQueries","onSuccess","args","forEach","x","invalidate","Key","useProducts","api","fetchProducts","FETCH_PRODUCTS","useProduct","fetchProduct","FETCH_PRODUCT","useAddProductMutation","addProduct","ADD_PRODUCT","product","products","push","optimistic","useChangeProductMutation","changeProduct","CHANGE_PRODUCT","find","useRemoveProductMutation","removeProduct","REMOVE_PRODUCT","idx","findIndex","splice","delete","useMatch","activeRoute","path","location","pathname","useParams"],"sourceRoot":""}