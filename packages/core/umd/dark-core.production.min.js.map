{"version":3,"file":"dark-core.production.min.js","mappings":"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","sources":["webpack://DarkCore/webpack/universalModuleDefinition","webpack://DarkCore/webpack/bootstrap","webpack://DarkCore/webpack/runtime/define property getters","webpack://DarkCore/webpack/runtime/hasOwnProperty shorthand","webpack://DarkCore/webpack/runtime/make namespace object","webpack://DarkCore/./src/constants.ts","webpack://DarkCore/./src/helpers/index.ts","webpack://DarkCore/./src/component/component.ts","webpack://DarkCore/./src/view/model.ts","webpack://DarkCore/./src/scope/scope.ts","webpack://DarkCore/./src/use-effect/use-effect.ts","webpack://DarkCore/./src/view/view.ts","webpack://DarkCore/./src/fragment/fragment.ts","webpack://DarkCore/./src/ref/ref.ts","webpack://DarkCore/./src/memo/memo.ts","webpack://DarkCore/./src/use-memo/use-memo.ts","webpack://DarkCore/./src/global/global.ts","webpack://DarkCore/./src/fiber/model.ts","webpack://DarkCore/./src/fiber/fiber.ts","webpack://DarkCore/./src/use-update/use-update.ts","webpack://DarkCore/./src/use-context/use-context.ts","webpack://DarkCore/./src/context/context.ts","webpack://DarkCore/./src/element/element.ts","webpack://DarkCore/./src/use-callback/use-callback.ts","webpack://DarkCore/./src/use-state/use-state.ts","webpack://DarkCore/./src/suspense/suspense.ts","webpack://DarkCore/./src/lazy/lazy.ts","webpack://DarkCore/./src/use-deferred-value/use-deferred-value.ts","webpack://DarkCore/./src/use-error/use-error.ts","webpack://DarkCore/./src/use-imperative-handle/use-imperative-handle.ts","webpack://DarkCore/./src/use-reducer/use-reducer.ts","webpack://DarkCore/./src/use-ref/use-ref.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"DarkCore\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"DarkCore\"] = factory();\n\telse\n\t\troot[\"DarkCore\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const ROOT = 'root';\r\nexport const EMPTY_NODE = 'dark:matter';\r\nexport const ATTR_KEY = 'key';\r\nexport const ATTR_REF = 'ref';\r\nexport const PARTIAL_UPDATE = 'partial-update';\r\n\r\nexport enum TaskPriority {\r\n  HIGH = 2,\r\n  NORMAL = 1,\r\n  LOW = 0,\r\n}\r\n","import type { NestedArray } from '../shared';\r\n\r\nconst detectIsFunction = (o: any): o is Function => typeof o === 'function';\r\nconst detectIsUndefined = (o: any) => typeof o === 'undefined';\r\nconst detectIsNumber = (o: any) => typeof o === 'number';\r\nconst detectIsString = (o: any) => typeof o === 'string';\r\nconst detectIsObject = (o: any) => typeof o === 'object';\r\nconst detectIsBoolean = (o: any) => typeof o === 'boolean';\r\nconst detectIsArray = (o: any): o is Array<any> => Array.isArray(o);\r\nconst detectIsNull = (o: any) => o === null;\r\nconst detectIsEmpty = (o: any) => detectIsNull(o) || detectIsUndefined(o);\r\n\r\nfunction error(str: string) {\r\n  !detectIsUndefined(console) && console.error(str);\r\n}\r\n\r\nfunction flatten<T = any>(source: Array<NestedArray<T>>): Array<T> {\r\n  const list = [];\r\n  const levelMap = { 0: { idx: 0, source } };\r\n  let level = 0;\r\n\r\n  do {\r\n    const { source, idx } = levelMap[level];\r\n    const item = source[idx];\r\n\r\n    if (idx >= source.length) {\r\n      level--;\r\n      levelMap[level].idx++;\r\n      continue;\r\n    }\r\n\r\n    if (detectIsArray(item)) {\r\n      level++;\r\n      levelMap[level] = {\r\n        idx: 0,\r\n        source: item,\r\n      };\r\n    } else {\r\n      list.push(item);\r\n      levelMap[level].idx++;\r\n    }\r\n  } while (level > 0 || levelMap[level].idx < levelMap[level].source.length);\r\n\r\n  return list;\r\n}\r\n\r\nfunction getTime() {\r\n  return Date.now();\r\n}\r\n\r\nfunction keyBy<T = any>(\r\n  list: Array<T>,\r\n  fn: (o: T) => string | number,\r\n  value = false,\r\n): Record<string | number, T | boolean> {\r\n  return list.reduce((acc, x) => ((acc[fn(x)] = value ? x : true), acc), {});\r\n}\r\n\r\nfunction takeListFromEnd(source: Array<any>, count: number) {\r\n  return source.slice(source.length - count, source.length);\r\n}\r\n\r\nconst dummyFn = () => {};\r\n\r\nfunction detectIsDepsDifferent(deps: Array<unknown>, prevDeps: Array<unknown>): boolean {\r\n  if (!detectIsUndefined(deps) && !detectIsUndefined(prevDeps) && deps.length > 0 && prevDeps.length > 0) {\r\n    for (let i = 0; i < prevDeps.length; i++) {\r\n      if (prevDeps[i] !== deps[i]) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport {\r\n  detectIsFunction,\r\n  detectIsUndefined,\r\n  detectIsNumber,\r\n  detectIsString,\r\n  detectIsObject,\r\n  detectIsBoolean,\r\n  detectIsArray,\r\n  detectIsNull,\r\n  detectIsEmpty,\r\n  error,\r\n  flatten,\r\n  getTime,\r\n  keyBy,\r\n  takeListFromEnd,\r\n  dummyFn,\r\n  detectIsDepsDifferent,\r\n};\r\n","import { ATTR_KEY } from '../constants';\r\nimport { error, detectIsEmpty } from '../helpers';\r\nimport type { DarkElementKey, DarkElementInstance } from '../shared/model';\r\nimport type { MutableRef } from '../ref';\r\nimport type { CreateElement, ComponentOptions, StandardComponentProps, SlotProps } from './model';\r\n\r\nconst $$component = Symbol('component');\r\nconst defaultOptions: ComponentOptions<any> = {\r\n  displayName: '',\r\n  defaultProps: {},\r\n  token: $$component,\r\n};\r\nclass ComponentFactory<P extends StandardComponentProps = any, R = any> {\r\n  public type: CreateElement<P>;\r\n  public token: Symbol;\r\n  public props: P;\r\n  public ref: MutableRef<R>;\r\n  public displayName: string;\r\n  public children: Array<DarkElementInstance> = [];\r\n  public shouldUpdate?: (props: P, nextProps: P) => boolean;\r\n\r\n  constructor(options: ComponentFactory<P>) {\r\n    this.type = options.type || null;\r\n    this.token = options.token || null;\r\n    this.props = options.props || null;\r\n    this.ref = options.ref || null;\r\n    this.displayName = options.displayName || '';\r\n    this.shouldUpdate = options.shouldUpdate || null;\r\n  }\r\n}\r\n\r\nfunction createComponent<P, R = any>(\r\n  createElement: CreateElement<P & SlotProps, R>,\r\n  options: ComponentOptions<P> = {},\r\n) {\r\n  type Props = P & StandardComponentProps;\r\n  const computedOptions = { ...defaultOptions, ...options };\r\n  const { token, defaultProps, displayName, shouldUpdate } = computedOptions;\r\n\r\n  return (props = {} as Props, ref?: MutableRef<R>): ComponentFactory<Props> => {\r\n    const computedProps = { ...defaultProps, ...props };\r\n    const factory = new ComponentFactory({\r\n      token,\r\n      ref,\r\n      displayName,\r\n      shouldUpdate,\r\n      props: computedProps,\r\n      type: createElement,\r\n      children: [],\r\n    });\r\n\r\n    if (computedProps.ref) {\r\n      delete computedProps.ref;\r\n\r\n      if (process.env.NODE_ENV === 'development') {\r\n        error(`[Dark]: To use ref you need to wrap the createComponent with forwardRef!`);\r\n      }\r\n    }\r\n\r\n    return factory;\r\n  };\r\n}\r\n\r\nconst detectIsComponentFactory = (factory: unknown): factory is ComponentFactory => factory instanceof ComponentFactory;\r\n\r\nconst getComponentFactoryKey = (factory: ComponentFactory): DarkElementKey =>\r\n  !detectIsEmpty(factory.props[ATTR_KEY]) ? factory.props[ATTR_KEY] : null;\r\n\r\nexport { ComponentFactory, createComponent, detectIsComponentFactory, getComponentFactoryKey };\r\n","export type ViewDef = {\r\n  as: string;\r\n  slot?: any;\r\n  isVoid?: boolean;\r\n  [prop: string]: any;\r\n};\r\n\r\nexport enum NodeType {\r\n  TAG = 'TAG',\r\n  TEXT = 'TEXT',\r\n  COMMENT = 'COMMENT',\r\n}\r\n","import type { Fiber } from '../fiber';\r\n\r\nclass Store {\r\n  public wipRoot: Fiber = null;\r\n  public currentRoot: Fiber = null;\r\n  public nextUnitOfWork: Fiber = null;\r\n  public fromHookUpdate = false;\r\n  public events: Map<string, WeakMap<object, Function>> = new Map();\r\n  public deletions: Array<Fiber> = [];\r\n  public fiberMount = {\r\n    level: 0,\r\n    navigation: {},\r\n    isDeepWalking: true,\r\n  };\r\n  public componentFiber: Fiber = null;\r\n  public effects: Array<() => void> = [];\r\n}\r\n\r\nlet rootId = null;\r\nconst stores = new Map<number, Store>();\r\n\r\nconst effectStoreHelper = {\r\n  set: (id: number) => effectStore(id),\r\n};\r\n\r\nconst getRootId = (): number => rootId;\r\n\r\nconst effectStore = (id: number) => {\r\n  rootId = id;\r\n  !stores.get(rootId) && stores.set(rootId, new Store());\r\n};\r\n\r\nconst storeHelper = {\r\n  get: (id: number = rootId) => stores.get(id),\r\n};\r\n\r\nconst wipRootHelper = {\r\n  get: () => storeHelper.get()?.wipRoot || null,\r\n  set: (fiber: Fiber) => (storeHelper.get().wipRoot = fiber),\r\n};\r\n\r\nconst currentRootHelper = {\r\n  get: () => storeHelper.get()?.currentRoot || null,\r\n  set: (fiber: Fiber) => (storeHelper.get().currentRoot = fiber),\r\n};\r\n\r\nconst nextUnitOfWorkHelper = {\r\n  get: () => storeHelper.get()?.nextUnitOfWork || null,\r\n  set: (fiber: Fiber) => (storeHelper.get().nextUnitOfWork = fiber),\r\n};\r\n\r\nconst componentFiberHelper = {\r\n  get: () => storeHelper.get()?.componentFiber,\r\n  set: (fiber: Fiber) => (storeHelper.get().componentFiber = fiber),\r\n};\r\n\r\nconst fromHookUpdateHelper = {\r\n  get: () => storeHelper.get()?.fromHookUpdate || false,\r\n  set: (value: boolean) => (storeHelper.get().fromHookUpdate = value),\r\n};\r\n\r\nconst eventsHelper = {\r\n  get: () => storeHelper.get().events,\r\n};\r\n\r\nconst deletionsHelper = {\r\n  get: () => storeHelper.get().deletions,\r\n  set: (deletions: Array<Fiber>) => (storeHelper.get().deletions = deletions),\r\n};\r\n\r\nconst fiberMountHelper = {\r\n  reset: () => {\r\n    storeHelper.get().fiberMount = {\r\n      level: 0,\r\n      navigation: {},\r\n      isDeepWalking: true,\r\n    };\r\n  },\r\n  getIndex: () => storeHelper.get().fiberMount.navigation[storeHelper.get().fiberMount.level],\r\n  jumpToChild: () => {\r\n    const { fiberMount } = storeHelper.get();\r\n    const level = fiberMount.level;\r\n    const nextLevel = level + 1;\r\n\r\n    fiberMount.level = nextLevel;\r\n    fiberMount.navigation[nextLevel] = 0;\r\n  },\r\n  jumpToParent: () => {\r\n    const { fiberMount } = storeHelper.get();\r\n    const level = fiberMount.level;\r\n    const nextLevel = level - 1;\r\n\r\n    fiberMount.navigation[level] = 0;\r\n    fiberMount.level = nextLevel;\r\n  },\r\n  jumpToSibling: () => {\r\n    const { fiberMount } = storeHelper.get();\r\n    const level = fiberMount.level;\r\n    const idx = fiberMount.navigation[level] + 1;\r\n\r\n    fiberMount.navigation[level] = idx;\r\n  },\r\n  deepWalking: {\r\n    get: () => storeHelper.get().fiberMount.isDeepWalking,\r\n    set: (value: boolean) => (storeHelper.get().fiberMount.isDeepWalking = value),\r\n  },\r\n};\r\n\r\nconst effectsHelper = {\r\n  get: () => storeHelper.get().effects,\r\n  reset: () => (storeHelper.get().effects = []),\r\n  add: (effect: () => void) => storeHelper.get().effects.push(effect),\r\n};\r\n\r\nexport {\r\n  getRootId,\r\n  effectStoreHelper,\r\n  wipRootHelper,\r\n  currentRootHelper,\r\n  nextUnitOfWorkHelper,\r\n  componentFiberHelper,\r\n  fromHookUpdateHelper,\r\n  eventsHelper,\r\n  deletionsHelper,\r\n  fiberMountHelper,\r\n  effectsHelper,\r\n};\r\n","import { detectIsUndefined, detectIsFunction, detectIsDepsDifferent } from '../helpers';\r\nimport { componentFiberHelper, effectsHelper } from '../scope';\r\nimport type { Hook, HookValue } from '../fiber';\r\nimport type { Effect, EffectCleanup } from './model';\r\n\r\nconst $$useEffect = Symbol('use-effect');\r\n\r\nfunction useEffect(effect: Effect, deps?: Array<any>) {\r\n  const fiber = componentFiberHelper.get();\r\n  const hook = fiber.hook as Hook<HookValue<EffectCleanup>>;\r\n  const { idx, values } = hook;\r\n  const runEffect = () => {\r\n    values[idx] = {\r\n      deps,\r\n      value: undefined,\r\n      token: $$useEffect,\r\n    };\r\n    const run = () => {\r\n      values[idx].value = effect();\r\n    };\r\n\r\n    effectsHelper.add(() => setTimeout(run));\r\n  };\r\n\r\n  if (detectIsUndefined(values[idx])) {\r\n    runEffect();\r\n  } else {\r\n    const { deps: prevDeps, value: cleanup } = values[idx];\r\n    const isDepsDifferent = deps ? detectIsDepsDifferent(deps, prevDeps) : true;\r\n\r\n    if (isDepsDifferent) {\r\n      detectIsFunction(cleanup) && cleanup();\r\n      runEffect();\r\n    }\r\n  }\r\n\r\n  hook.idx++;\r\n}\r\n\r\nfunction runEffectCleanup(hook: Hook<HookValue<EffectCleanup>>) {\r\n  const { values } = hook;\r\n\r\n  for (const hookValue of values) {\r\n    if (hookValue.token === $$useEffect) {\r\n      const cleanup = hookValue.value;\r\n\r\n      detectIsFunction(cleanup) && cleanup();\r\n    }\r\n  }\r\n}\r\n\r\nexport { useEffect, runEffectCleanup };\r\n","import { EMPTY_NODE, ATTR_KEY } from '../constants';\r\nimport { detectIsArray, detectIsEmpty, detectIsFunction } from '../helpers';\r\nimport type { DarkElementKey } from '../shared/model';\r\nimport type { ComponentFactory, StandardComponentProps } from '../component';\r\nimport { NodeType, type ViewDef } from './model';\r\n\r\nexport type VirtualNodeFactory = () => VirtualNode;\r\nexport type TagVirtualNodeFactory = () => TagVirtualNode;\r\nexport type TextVirtualNodeFactory = () => TextVirtualNode;\r\nexport type CommentVirtualNodeFactory = () => CommentVirtualNode;\r\n\r\nconst $$virtualNode = Symbol('virtual-node');\r\n\r\nclass VirtualNode {\r\n  public type: NodeType = null;\r\n\r\n  constructor(options: Partial<VirtualNode>) {\r\n    this.type = options.type;\r\n  }\r\n}\r\n\r\nclass TagVirtualNode extends VirtualNode {\r\n  public type = NodeType.TAG;\r\n  public name: string = null;\r\n  public isVoid = false;\r\n  public attrs: Record<string, any> = {};\r\n  public children: Array<VirtualNodeFactory | ComponentFactory> = [];\r\n\r\n  constructor(options: Partial<TagVirtualNode>) {\r\n    super(options);\r\n    this.name = options.name || this.name;\r\n    this.isVoid = options.isVoid || this.isVoid;\r\n    this.attrs = options.attrs || this.attrs;\r\n    this.children = options.children || this.children;\r\n  }\r\n}\r\n\r\nclass TextVirtualNode extends VirtualNode {\r\n  public type = NodeType.TEXT;\r\n  public value = '';\r\n\r\n  constructor(text: string) {\r\n    super({});\r\n    this.value = text;\r\n  }\r\n}\r\n\r\nclass CommentVirtualNode extends VirtualNode {\r\n  public type = NodeType.COMMENT;\r\n  public value = '';\r\n\r\n  constructor(text: string) {\r\n    super({});\r\n    this.value = text;\r\n  }\r\n}\r\n\r\nconst detectIsVirtualNode = (vNode: unknown): vNode is VirtualNode => vNode instanceof VirtualNode;\r\nconst detectIsTagVirtualNode = (vNode: unknown): vNode is TagVirtualNode => vNode instanceof TagVirtualNode;\r\nconst detectIsCommentVirtualNode = (vNode: unknown): vNode is CommentVirtualNode => vNode instanceof CommentVirtualNode;\r\nconst detectIsTextVirtualNode = (vNode: unknown): vNode is TextVirtualNode => vNode instanceof TextVirtualNode;\r\nconst detectIsEmptyVirtualNode = (vNode: unknown): boolean =>\r\n  detectIsCommentVirtualNode(vNode) && vNode.value === EMPTY_NODE;\r\n\r\nfunction getVirtualNodeKey(vNode: TagVirtualNode): DarkElementKey | null {\r\n  const key = vNode && vNode.attrs[ATTR_KEY];\r\n\r\n  return !detectIsEmpty(key) ? key : null;\r\n}\r\n\r\nfunction Text(source: string | StandardComponentProps['slot']): string | TextVirtualNode {\r\n  const text =\r\n    typeof source === 'string' ? new TextVirtualNode(source) : detectIsTextVirtualNode(source) ? source.value : '';\r\n\r\n  return text;\r\n}\r\n\r\nfunction Comment(text: string): CommentVirtualNodeFactory {\r\n  const factory = () => new CommentVirtualNode(text);\r\n\r\n  factory[$$virtualNode] = true;\r\n\r\n  return factory;\r\n}\r\n\r\nfunction View(def: ViewDef): TagVirtualNodeFactory {\r\n  const factory = () => {\r\n    const { as, slot, isVoid = false, ...rest } = def;\r\n    const children = isVoid ? [] : detectIsArray(slot) ? slot : slot ? [slot] : [];\r\n\r\n    return new TagVirtualNode({\r\n      name: as,\r\n      isVoid,\r\n      attrs: { ...rest },\r\n      children: children as Array<VirtualNodeFactory>,\r\n    });\r\n  };\r\n\r\n  factory[$$virtualNode] = true;\r\n\r\n  return factory;\r\n}\r\n\r\nconst createEmptyVirtualNode = () => new CommentVirtualNode(EMPTY_NODE);\r\n\r\nconst detectIsVirtualNodeFactory = (factory: unknown): factory is VirtualNodeFactory =>\r\n  detectIsFunction(factory) && factory[$$virtualNode] === true;\r\n\r\nexport {\r\n  VirtualNode,\r\n  TagVirtualNode,\r\n  TextVirtualNode,\r\n  CommentVirtualNode,\r\n  detectIsVirtualNode,\r\n  detectIsTagVirtualNode,\r\n  detectIsCommentVirtualNode,\r\n  detectIsTextVirtualNode,\r\n  detectIsEmptyVirtualNode,\r\n  getVirtualNodeKey,\r\n  Text,\r\n  Comment,\r\n  View,\r\n  createEmptyVirtualNode,\r\n  detectIsVirtualNodeFactory,\r\n};\r\n","import { type KeyProps, createComponent, detectIsComponentFactory } from '../component';\r\n\r\nconst $$fragment = Symbol('fragment');\r\n\r\nconst Fragment = createComponent<KeyProps>(({ slot }) => slot || null, {\r\n  token: $$fragment,\r\n});\r\n\r\nconst detectIsFragment = (factory: unknown) => detectIsComponentFactory(factory) && factory.token === $$fragment;\r\n\r\nexport { Fragment, detectIsFragment };\r\n","import { detectIsObject, detectIsNull } from '../helpers';\r\nimport type { Component, RefProps, ComponentFactory } from '../component';\r\nimport type { MutableRef } from './model';\r\n\r\nfunction forwardRef<P, R>(component: Component<P, R>) {\r\n  type Props = P & RefProps<R>;\r\n\r\n  return ({ ref, ...rest }: Props) => {\r\n    return component(rest as P, ref) as ComponentFactory<P, R>;\r\n  };\r\n}\r\n\r\nconst detectIsRef = (ref: unknown) => {\r\n  if (!detectIsObject(ref) || detectIsNull(ref)) return false;\r\n  const mutableRef = ref as MutableRef;\r\n\r\n  for (const key in mutableRef) {\r\n    if (key === 'current' && mutableRef.hasOwnProperty(key)) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nexport { forwardRef, detectIsRef };\r\n","import {\r\n  type Component,\r\n  type ComponentFactory,\r\n  type StandardComponentProps,\r\n  type RefProps,\r\n  type SlotProps,\r\n  createComponent,\r\n  detectIsComponentFactory,\r\n} from '../component';\r\nimport { type MutableRef, forwardRef } from '../ref';\r\n\r\ntype ShouldUpdate<T> = (props: T, nextProps: T) => boolean;\r\n\r\nconst $$memo = Symbol('memo');\r\n\r\nconst defaultShouldUpdate = (props: {}, nextProps: {}): boolean => {\r\n  const keys = Object.keys(nextProps);\r\n\r\n  for (const key of keys) {\r\n    if (key !== 'slot' && nextProps[key] !== props[key]) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst detectIsMemo = (factory: unknown) => detectIsComponentFactory(factory) && factory.token === $$memo;\r\n\r\nfunction memo<T>(\r\n  component: (props: T, ref?: MutableRef<unknown>) => ComponentFactory<T, unknown>,\r\n  shouldUpdate: ShouldUpdate<T & SlotProps> = defaultShouldUpdate,\r\n): Component<T & StandardComponentProps> {\r\n  return forwardRef(\r\n    createComponent(\r\n      (props: T & RefProps, ref) => {\r\n        ref && (props.ref = ref);\r\n\r\n        return component(props);\r\n      },\r\n      { token: $$memo, shouldUpdate },\r\n    ),\r\n  );\r\n}\r\n\r\nexport { $$memo, memo, detectIsMemo };\r\n","import { type DarkElement } from '../shared';\r\nimport { detectIsUndefined, detectIsArray, detectIsDepsDifferent } from '../helpers';\r\nimport { detectIsComponentFactory, createComponent } from '../component';\r\nimport { detectIsVirtualNodeFactory } from '../view';\r\nimport { componentFiberHelper } from '../scope';\r\nimport { Fragment } from '../fragment';\r\nimport { $$memo } from '../memo';\r\n\r\nconst Memo = createComponent(({ slot }) => slot, { token: $$memo });\r\n\r\nfunction wrap<T>(value: T, isDepsDifferent: boolean) {\r\n  const check = (value: T) => detectIsVirtualNodeFactory(value) || detectIsComponentFactory(value);\r\n\r\n  if (detectIsArray(value) ? check(value[0]) : check(value)) {\r\n    const slot = value as unknown as DarkElement;\r\n    const factory = Memo({\r\n      slot: Fragment({ slot }),\r\n    });\r\n\r\n    factory.shouldUpdate = () => isDepsDifferent;\r\n\r\n    return factory;\r\n  }\r\n\r\n  return value;\r\n}\r\n\r\nfunction processValue<T>(getValue: () => T, isDepsDifferent = false) {\r\n  return wrap(getValue(), isDepsDifferent);\r\n}\r\n\r\nfunction useMemo<T>(getValue: () => T, deps: Array<any>): T {\r\n  const fiber = componentFiberHelper.get();\r\n  const { hook } = fiber;\r\n  const { idx, values } = hook;\r\n\r\n  if (detectIsUndefined(values[idx])) {\r\n    const value = processValue(getValue);\r\n\r\n    values[idx] = {\r\n      deps,\r\n      value,\r\n    };\r\n\r\n    hook.idx++;\r\n\r\n    return value as T;\r\n  }\r\n\r\n  const hookValue = values[idx];\r\n  const prevDeps = hookValue.deps as Array<any>;\r\n  const isDepsDifferent = detectIsDepsDifferent(deps, prevDeps);\r\n  const computedGetValue = isDepsDifferent ? getValue : () => hookValue.value;\r\n\r\n  hookValue.deps = deps;\r\n  hookValue.value = processValue(computedGetValue, isDepsDifferent);\r\n\r\n  hook.idx++;\r\n\r\n  return hookValue.value;\r\n}\r\n\r\nexport { useMemo };\r\n","import type { Platform } from './model';\r\n\r\nexport const platform: Platform = {\r\n  scheduleCallback: () => {\r\n    throw new Error('scheduleCallback not installed by renderer');\r\n  },\r\n  shouldYeildToHost: () => {\r\n    throw new Error('shouldYeildToHost not installed by renderer');\r\n  },\r\n  createNativeElement: () => {\r\n    throw new Error('createNativeElement not installed by renderer');\r\n  },\r\n  applyCommits: () => {\r\n    throw new Error('applyCommits not installed by renderer');\r\n  },\r\n  detectIsPortal: () => {\r\n    throw new Error('detectIsPortal not installed by renderer');\r\n  },\r\n  unmountPortal: () => {\r\n    throw new Error('unmountPortal not installed by renderer');\r\n  },\r\n};\r\n","export enum EffectTag {\r\n  PLACEMENT = 'PLACEMENT',\r\n  UPDATE = 'UPDATE',\r\n  DELETION = 'DELETION',\r\n  SKIP = 'SKIP',\r\n}\r\n\r\nexport type NativeElement = unknown;\r\n\r\nexport type HookValue<T = any> = {\r\n  token?: Symbol;\r\n  deps: Array<any>;\r\n  value: T;\r\n};\r\n\r\nexport type Hook<T = any> = {\r\n  idx: number;\r\n  values: Array<T>;\r\n};\r\n\r\nexport const cloneTagMap = {\r\n  [EffectTag.PLACEMENT]: true,\r\n  [EffectTag.SKIP]: true,\r\n};\r\n","import { flatten, detectIsEmpty, error, keyBy, takeListFromEnd, detectIsUndefined, detectIsArray } from '../helpers';\r\nimport { platform } from '../global';\r\nimport {\r\n  wipRootHelper,\r\n  currentRootHelper,\r\n  nextUnitOfWorkHelper,\r\n  deletionsHelper,\r\n  fiberMountHelper,\r\n  componentFiberHelper,\r\n  fromHookUpdateHelper,\r\n  effectStoreHelper,\r\n  effectsHelper,\r\n} from '../scope';\r\nimport { type ComponentFactory, detectIsComponentFactory, getComponentFactoryKey } from '../component';\r\nimport {\r\n  type TagVirtualNode,\r\n  detectIsTagVirtualNode,\r\n  createEmptyVirtualNode,\r\n  getVirtualNodeKey,\r\n  detectIsVirtualNode,\r\n  detectIsVirtualNodeFactory,\r\n} from '../view';\r\nimport { detectIsMemo } from '../memo';\r\nimport type { Context, ContextProviderValue } from '../context/model';\r\nimport type { DarkElementKey, DarkElement, DarkElementInstance } from '../shared/model';\r\nimport { PARTIAL_UPDATE } from '../constants';\r\nimport { type NativeElement, type Hook, EffectTag, cloneTagMap } from './model';\r\n\r\nclass Fiber<N = NativeElement> {\r\n  public nativeElement: N;\r\n  public parent: Fiber<N>;\r\n  public child: Fiber<N>;\r\n  public nextSibling: Fiber<N>;\r\n  public alternate: Fiber<N>;\r\n  public effectTag: EffectTag;\r\n  public instance: DarkElementInstance;\r\n  public hook: Hook;\r\n  public shadow: Fiber<N>;\r\n  public provider: Map<Context, ContextProviderValue>;\r\n  public transposition: boolean;\r\n  public mountedToHost: boolean;\r\n  public portalHost: boolean;\r\n  public childrenCount: number;\r\n  public marker: string;\r\n  public isUsed: boolean;\r\n  public catchException: (error: Error) => void;\r\n\r\n  constructor(options: Partial<Fiber<N>>) {\r\n    this.nativeElement = options.nativeElement || null;\r\n    this.parent = options.parent || null;\r\n    this.child = options.child || null;\r\n    this.nextSibling = options.nextSibling || null;\r\n    this.alternate = options.alternate || null;\r\n    this.effectTag = options.effectTag || null;\r\n    this.instance = options.instance || null;\r\n    this.hook = options.hook || createHook();\r\n    this.shadow = options.shadow || null;\r\n    this.provider = options.provider || null;\r\n    this.transposition = !detectIsUndefined(options.transposition) ? options.transposition : false;\r\n    this.mountedToHost = !detectIsUndefined(options.mountedToHost) || false;\r\n    this.portalHost = !detectIsUndefined(options.portalHost) ? options.portalHost : false;\r\n    this.childrenCount = options.childrenCount || 0;\r\n    this.marker = options.marker || '';\r\n    this.isUsed = options.isUsed || false;\r\n  }\r\n\r\n  public markPortalHost() {\r\n    this.portalHost = true;\r\n    this.parent && !this.parent.portalHost && this.parent.markPortalHost();\r\n  }\r\n\r\n  public setError(error: Error) {\r\n    if (typeof this.catchException === 'function') {\r\n      this.catchException(error);\r\n    } else if (this.parent) {\r\n      this.parent.setError(error);\r\n    }\r\n  }\r\n}\r\n\r\nfunction workLoop() {\r\n  const wipFiber = wipRootHelper.get();\r\n  let nextUnitOfWork = nextUnitOfWorkHelper.get();\r\n  let shouldYield = false;\r\n  let hasMoreWork = Boolean(nextUnitOfWork);\r\n\r\n  while (nextUnitOfWork && !shouldYield) {\r\n    nextUnitOfWork = performUnitOfWork(nextUnitOfWork);\r\n    nextUnitOfWorkHelper.set(nextUnitOfWork);\r\n    hasMoreWork = Boolean(nextUnitOfWork);\r\n    shouldYield = platform.shouldYeildToHost();\r\n  }\r\n\r\n  if (!nextUnitOfWork && wipFiber) {\r\n    commitChanges();\r\n  }\r\n\r\n  return hasMoreWork;\r\n}\r\n\r\nfunction performUnitOfWork(fiber: Fiber) {\r\n  let isDeepWalking = true;\r\n  let nextFiber = fiber;\r\n  let shadow: Fiber = fiber.shadow;\r\n  let instance = fiber.instance;\r\n\r\n  while (true) {\r\n    isDeepWalking = fiberMountHelper.deepWalking.get();\r\n    nextFiber.hook.idx = 0;\r\n\r\n    if (isDeepWalking) {\r\n      const hasChildren = hasChildrenProp(instance) && instance.children.length > 0;\r\n\r\n      if (hasChildren) {\r\n        const { performedFiber, performedNextFiber, performedShadow, performedInstance } = performChild({\r\n          nextFiber,\r\n          shadow,\r\n          instance,\r\n        });\r\n\r\n        nextFiber = performedNextFiber;\r\n        shadow = performedShadow;\r\n        instance = performedInstance;\r\n\r\n        if (performedFiber) return performedFiber;\r\n      } else {\r\n        const { performedFiber, performedNextFiber, performedShadow, performedInstance } = performSibling({\r\n          nextFiber,\r\n          shadow,\r\n          instance,\r\n        });\r\n\r\n        nextFiber = performedNextFiber;\r\n        shadow = performedShadow;\r\n        instance = performedInstance;\r\n\r\n        if (performedFiber) return performedFiber;\r\n      }\r\n    } else {\r\n      const { performedFiber, performedNextFiber, performedShadow, performedInstance } = performSibling({\r\n        nextFiber,\r\n        shadow,\r\n        instance,\r\n      });\r\n\r\n      nextFiber = performedNextFiber;\r\n      shadow = performedShadow;\r\n      instance = performedInstance;\r\n\r\n      if (performedFiber) return performedFiber;\r\n    }\r\n\r\n    performPartialUpdateEffects(nextFiber);\r\n\r\n    if (nextFiber.parent === null) return null;\r\n  }\r\n}\r\n\r\nfunction performPartialUpdateEffects(nextFiber: Fiber) {\r\n  if (nextFiber.marker === PARTIAL_UPDATE) {\r\n    const alternate = nextFiber.child?.alternate || null;\r\n    const fiber = nextFiber.child || null;\r\n\r\n    if (alternate && fiber && alternate.nextSibling && !fiber.nextSibling) {\r\n      let nextFiber = alternate.nextSibling;\r\n      const deletions: Array<Fiber> = [];\r\n\r\n      while (nextFiber) {\r\n        nextFiber.effectTag = EffectTag.DELETION;\r\n        deletions.push(nextFiber);\r\n        nextFiber = nextFiber.nextSibling;\r\n      }\r\n\r\n      deletionsHelper.get().push(...deletions);\r\n    }\r\n  }\r\n}\r\n\r\ntype PerformChildOptions = {\r\n  nextFiber: Fiber;\r\n  shadow: Fiber;\r\n  instance: DarkElementInstance;\r\n};\r\n\r\nfunction performChild(options: PerformChildOptions) {\r\n  fiberMountHelper.jumpToChild();\r\n  let nextFiber = options.nextFiber;\r\n  let shadow = options.shadow;\r\n  let instance = options.instance;\r\n\r\n  shadow = shadow ? shadow.child : null;\r\n\r\n  const alternate = getChildAlternate(nextFiber);\r\n  const hook = shadow ? shadow.hook : alternate ? alternate.hook : createHook();\r\n  const provider = shadow ? shadow.provider : alternate ? alternate.provider : null;\r\n  let fiber = new Fiber({ hook, provider });\r\n\r\n  componentFiberHelper.set(fiber);\r\n  fiber.parent = nextFiber;\r\n\r\n  const { performedInstance, performedShadow } = pertformInstance({\r\n    instance,\r\n    idx: 0,\r\n    fiber,\r\n    alternate,\r\n  });\r\n  instance = performedInstance || instance;\r\n  shadow = performedShadow || shadow;\r\n  alternate && mutateAlternate({ fiber, alternate, instance });\r\n  mutateFiber({ fiber, alternate, instance });\r\n  fiber = alternate ? performMemo({ fiber, alternate, instance }) : fiber;\r\n\r\n  nextFiber.child = fiber;\r\n  fiber.parent = nextFiber;\r\n  fiber.shadow = shadow;\r\n  nextFiber = fiber;\r\n\r\n  cloneTagMap[fiber.parent.effectTag] && (fiber.effectTag = fiber.parent.effectTag);\r\n\r\n  return {\r\n    performedFiber: nextFiber,\r\n    performedNextFiber: nextFiber,\r\n    performedShadow: shadow,\r\n    performedInstance: instance,\r\n  };\r\n}\r\n\r\ntype PerformSiblingOptions = {\r\n  nextFiber: Fiber;\r\n  shadow: Fiber;\r\n  instance: DarkElementInstance;\r\n};\r\n\r\nfunction performSibling(options: PerformSiblingOptions) {\r\n  fiberMountHelper.jumpToSibling();\r\n  let nextFiber = options.nextFiber;\r\n  let shadow = options.shadow;\r\n  let instance = options.instance;\r\n  const parent = nextFiber.parent.instance;\r\n  const childrenIdx = fiberMountHelper.getIndex();\r\n  const hasSibling = hasChildrenProp(parent) && parent.children[childrenIdx];\r\n\r\n  if (hasSibling) {\r\n    fiberMountHelper.deepWalking.set(true);\r\n\r\n    shadow = shadow ? shadow.nextSibling : null;\r\n    const alternate = getNextSiblingAlternate(nextFiber);\r\n    const hook = shadow ? shadow.hook : alternate ? alternate.hook : createHook();\r\n    const provider = shadow ? shadow.provider : alternate ? alternate.provider : null;\r\n    let fiber = new Fiber({ hook, provider });\r\n\r\n    componentFiberHelper.set(fiber);\r\n    fiber.parent = nextFiber.parent;\r\n\r\n    const { performedInstance, performedShadow } = pertformInstance({\r\n      instance: parent,\r\n      idx: childrenIdx,\r\n      fiber,\r\n      alternate,\r\n    });\r\n    instance = performedInstance || instance;\r\n    shadow = performedShadow || shadow;\r\n    alternate && mutateAlternate({ fiber, alternate, instance });\r\n    mutateFiber({ fiber, alternate, instance });\r\n    fiber = alternate ? performMemo({ fiber, alternate, instance }) : fiber;\r\n\r\n    fiber.parent = nextFiber.parent;\r\n    nextFiber.nextSibling = fiber;\r\n    fiber.shadow = shadow;\r\n    nextFiber = fiber;\r\n\r\n    cloneTagMap[fiber.parent.effectTag] && (fiber.effectTag = fiber.parent.effectTag);\r\n\r\n    return {\r\n      performedFiber: nextFiber,\r\n      performedNextFiber: nextFiber,\r\n      performedShadow: shadow,\r\n      performedInstance: instance,\r\n    };\r\n  } else {\r\n    fiberMountHelper.jumpToParent();\r\n    fiberMountHelper.deepWalking.set(false);\r\n    shadow = shadow ? shadow.parent : null;\r\n    nextFiber = nextFiber.parent;\r\n    instance = nextFiber.instance;\r\n\r\n    if (hasChildrenProp(nextFiber.instance)) {\r\n      nextFiber.instance.children = [];\r\n    }\r\n  }\r\n\r\n  return {\r\n    performedFiber: null,\r\n    performedNextFiber: nextFiber,\r\n    performedShadow: shadow,\r\n    performedInstance: instance,\r\n  };\r\n}\r\n\r\ntype MutateFiberOptions = {\r\n  fiber: Fiber;\r\n  alternate: Fiber;\r\n  instance: DarkElementInstance;\r\n};\r\n\r\nfunction mutateFiber(options: MutateFiberOptions) {\r\n  const { fiber, alternate, instance } = options;\r\n  const key = alternate ? getElementKey(alternate.instance) : null;\r\n  const nextKey = alternate ? getElementKey(instance) : null;\r\n  const isDifferentKeys = key !== nextKey;\r\n  const isSameType = Boolean(alternate) && getInstanceType(alternate.instance) === getInstanceType(instance);\r\n  const isUpdate = isSameType && !isDifferentKeys;\r\n\r\n  fiber.instance = instance;\r\n  fiber.alternate = alternate || null;\r\n  fiber.nativeElement = isUpdate ? alternate.nativeElement : null;\r\n  fiber.effectTag = isUpdate ? EffectTag.UPDATE : EffectTag.PLACEMENT;\r\n  fiber.mountedToHost = fiber.nativeElement ? isUpdate : false;\r\n\r\n  if (hasChildrenProp(fiber.instance)) {\r\n    fiber.childrenCount = fiber.instance.children.length;\r\n  }\r\n\r\n  if (fiber.alternate) {\r\n    fiber.alternate.shadow = null;\r\n    fiber.alternate.alternate = null;\r\n  }\r\n\r\n  if (!fiber.nativeElement && detectIsVirtualNode(fiber.instance)) {\r\n    fiber.nativeElement = platform.createNativeElement(fiber);\r\n  }\r\n}\r\n\r\ntype PerformAlternateOptions = {\r\n  fiber: Fiber;\r\n  alternate: Fiber;\r\n  instance: DarkElementInstance;\r\n};\r\n\r\nfunction mutateAlternate(options: PerformAlternateOptions) {\r\n  const { fiber, alternate, instance } = options;\r\n  const alternateType = getInstanceType(alternate.instance);\r\n  const elementType = getInstanceType(instance);\r\n  const isSameType = elementType === alternateType;\r\n  const prevKey = getElementKey(alternate.instance);\r\n  const nextKey = getElementKey(instance);\r\n  const isSameKeys = prevKey === nextKey;\r\n\r\n  alternate.isUsed = true;\r\n\r\n  if (!isSameType || !isSameKeys) {\r\n    alternate.effectTag = EffectTag.DELETION;\r\n    deletionsHelper.get().push(alternate);\r\n  } else if (hasChildrenProp(alternate.instance) && hasChildrenProp(instance)) {\r\n    const prevElementsCount = alternate.childrenCount;\r\n    const nextElementsCount = instance.children.length;\r\n    const isRequestedKeys = prevElementsCount !== nextElementsCount;\r\n\r\n    if (isRequestedKeys) {\r\n      const isRemovingCase = nextElementsCount < prevElementsCount;\r\n      const isInsertingCase = nextElementsCount > prevElementsCount;\r\n      const children = hasChildrenProp(instance) ? instance.children : [];\r\n      const { keys, nextKeys } = extractKeys(alternate.child, children);\r\n      const hasKeys = keys.length > 0;\r\n      const hasAnyKeys = hasKeys || nextKeys.length > 0;\r\n\r\n      if (process.env.NODE_ENV === 'development') {\r\n        if (!hasAnyKeys && prevElementsCount !== 0 && nextElementsCount !== 0) {\r\n          error(`\r\n            [Dark]: Operation of inserting, adding, replacing elements into list requires to have a unique key for every node (string or number, but not array index)!\r\n          `);\r\n        }\r\n      }\r\n\r\n      const performRemovingNodes = () => {\r\n        const diffKeys = getDiffKeys(keys, nextKeys);\r\n\r\n        if (diffKeys.length > 0) {\r\n          const fibersMap = createFibersByKeyMap(alternate.child);\r\n\r\n          for (const key of diffKeys) {\r\n            const childAlternate = fibersMap[key] || null;\r\n\r\n            if (childAlternate) {\r\n              childAlternate.effectTag = EffectTag.DELETION;\r\n              deletionsHelper.get().push(childAlternate);\r\n\r\n              if (childAlternate.portalHost) {\r\n                fiber.markPortalHost();\r\n              }\r\n            }\r\n          }\r\n        } else if (!hasKeys) {\r\n          const diffCount = prevElementsCount - nextElementsCount;\r\n          const childAlternates: Array<Fiber> = takeListFromEnd(getSiblingFibers(alternate.child), diffCount);\r\n\r\n          for (const childAlternate of childAlternates) {\r\n            childAlternate.effectTag = EffectTag.DELETION;\r\n\r\n            if (childAlternate.portalHost) {\r\n              fiber.markPortalHost();\r\n            }\r\n          }\r\n\r\n          deletionsHelper.get().push(...childAlternates);\r\n        }\r\n      };\r\n\r\n      const performInsertingNodes = () => {\r\n        const diffKeys = getDiffKeys(nextKeys, keys);\r\n\r\n        if (diffKeys.length > 0) {\r\n          const diffKeyMap = keyBy(diffKeys, x => x);\r\n          const fibersByPositionsMap = createFibersByPositionMap(alternate.child);\r\n          const usedKeyMap = {};\r\n          let keyIdx = 0;\r\n\r\n          for (const nextKey of nextKeys) {\r\n            if (process.env.NODE_ENV === 'development') {\r\n              if (usedKeyMap[nextKey]) {\r\n                error(`Some key of node already has been used!`);\r\n              }\r\n            }\r\n\r\n            usedKeyMap[nextKey] = true;\r\n\r\n            if (nextKey !== keys[keyIdx] && diffKeyMap[nextKey]) {\r\n              const insertionFiber = new Fiber({\r\n                instance: createEmptyVirtualNode(),\r\n                parent: alternate,\r\n                effectTag: EffectTag.PLACEMENT,\r\n              });\r\n\r\n              if (keyIdx === 0) {\r\n                insertionFiber.nextSibling = alternate.child;\r\n                alternate.child = insertionFiber;\r\n              } else {\r\n                const fiber = fibersByPositionsMap[keyIdx] || null;\r\n\r\n                if (fiber) {\r\n                  insertionFiber.nextSibling = fiber;\r\n                }\r\n              }\r\n            }\r\n\r\n            keyIdx++;\r\n          }\r\n        }\r\n      };\r\n\r\n      isRemovingCase && performRemovingNodes();\r\n      isInsertingCase && performInsertingNodes();\r\n    }\r\n  }\r\n}\r\n\r\ntype PerformMemoOptions = {\r\n  fiber: Fiber;\r\n  alternate: Fiber;\r\n  instance: DarkElementInstance;\r\n};\r\n\r\nfunction performMemo(options: PerformMemoOptions) {\r\n  const { fiber, alternate, instance } = options;\r\n\r\n  if (detectIsMemo(fiber.instance)) {\r\n    let memoFiber: Fiber = null;\r\n    const factory = instance as ComponentFactory;\r\n    const alternateFactory = alternate.instance as ComponentFactory;\r\n\r\n    if (factory.type !== alternateFactory.type) return fiber;\r\n\r\n    const props = alternateFactory.props;\r\n    const nextProps = factory.props;\r\n    const skip = !factory.shouldUpdate(props, nextProps);\r\n\r\n    if (skip) {\r\n      let nextFiber: Fiber = null;\r\n      fiberMountHelper.deepWalking.set(false);\r\n\r\n      memoFiber = new Fiber({\r\n        ...alternate,\r\n        alternate,\r\n        effectTag: EffectTag.SKIP,\r\n        nextSibling: alternate.nextSibling\r\n          ? alternate.nextSibling.effectTag === EffectTag.DELETION\r\n            ? null\r\n            : alternate.nextSibling\r\n          : null,\r\n      });\r\n\r\n      alternate.alternate = null;\r\n      nextFiber = memoFiber.child;\r\n\r\n      while (nextFiber) {\r\n        nextFiber.parent = memoFiber;\r\n        nextFiber = nextFiber.nextSibling;\r\n      }\r\n\r\n      return memoFiber;\r\n    }\r\n  }\r\n\r\n  return fiber;\r\n}\r\n\r\ntype PerformInstanceOptions = {\r\n  instance: DarkElementInstance;\r\n  idx: number;\r\n  fiber: Fiber;\r\n  alternate: Fiber;\r\n};\r\n\r\nfunction pertformInstance(options: PerformInstanceOptions) {\r\n  const { instance, idx, fiber, alternate } = options;\r\n  let performedInstance: DarkElementInstance = null;\r\n  let performedShadow: Fiber = null;\r\n\r\n  if (hasChildrenProp(instance)) {\r\n    const elements = detectIsArray(instance.children[idx])\r\n      ? flatten([instance.children[idx]])\r\n      : [instance.children[idx]];\r\n\r\n    instance.children.splice(idx, 1, ...elements);\r\n    performedInstance = instance.children[idx];\r\n    performedShadow = alternate\r\n      ? getRootShadow({\r\n          instance: performedInstance,\r\n          fiber,\r\n          alternate,\r\n        })\r\n      : performedShadow;\r\n    performedInstance = mountInstance(fiber, performedInstance);\r\n  }\r\n\r\n  if (detectIsComponentFactory(performedInstance) && platform.detectIsPortal(performedInstance)) {\r\n    fiber.markPortalHost();\r\n  }\r\n\r\n  return {\r\n    performedInstance,\r\n    performedShadow,\r\n  };\r\n}\r\n\r\ntype GetRootShadowOptions = {\r\n  instance: DarkElementInstance;\r\n  fiber: Fiber;\r\n  alternate: Fiber;\r\n};\r\n\r\nfunction getRootShadow(options: GetRootShadowOptions) {\r\n  const { instance, fiber, alternate } = options;\r\n  const key = getElementKey(alternate.instance);\r\n  const nextKey = getElementKey(instance);\r\n  let shadow: Fiber = null;\r\n\r\n  if (key !== nextKey) {\r\n    shadow = getAlternateByKey(nextKey, alternate.parent.child);\r\n\r\n    if (shadow) {\r\n      fiber.hook = shadow.hook;\r\n      fiber.provider = shadow.provider;\r\n      alternate.transposition = true;\r\n    }\r\n  }\r\n\r\n  return shadow;\r\n}\r\n\r\nfunction mountInstance(fiber: Fiber, instance: DarkElementInstance) {\r\n  const isComponentFactory = detectIsComponentFactory(instance);\r\n  const factory = instance as ComponentFactory;\r\n\r\n  if (isComponentFactory) {\r\n    try {\r\n      const result = factory.type(factory.props, factory.ref);\r\n\r\n      factory.children = detectIsArray(result)\r\n        ? (flatten([result]) as Array<DarkElementInstance>)\r\n        : ([result] as Array<DarkElementInstance>);\r\n    } catch (err) {\r\n      factory.children = [];\r\n      fiber.setError(err);\r\n      error(err);\r\n    }\r\n  } else if (detectIsVirtualNodeFactory(instance)) {\r\n    instance = instance();\r\n  }\r\n\r\n  if (hasChildrenProp(instance)) {\r\n    for (let i = 0; i < instance.children.length; i++) {\r\n      if (!instance.children[i]) {\r\n        instance.children[i] = transformElementInstance(instance.children[i]) as DarkElementInstance;\r\n      }\r\n    }\r\n\r\n    instance.children = isComponentFactory\r\n      ? instance.children\r\n      : detectIsArray(instance.children)\r\n      ? flatten([instance.children])\r\n      : [instance.children];\r\n\r\n    if (isComponentFactory && factory.children.length === 0) {\r\n      factory.children.push(createEmptyVirtualNode());\r\n    }\r\n  }\r\n\r\n  return instance;\r\n}\r\n\r\nfunction createFibersByPositionMap(fiber: Fiber) {\r\n  let nextFiber = fiber;\r\n  let position = 0;\r\n  const map: Record<string, Fiber> = {};\r\n\r\n  while (nextFiber) {\r\n    map[position] = nextFiber;\r\n\r\n    position++;\r\n    nextFiber = nextFiber.nextSibling;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\nfunction createFibersByKeyMap(fiber: Fiber) {\r\n  let nextFiber = fiber;\r\n  const map: Record<string, Fiber> = {};\r\n\r\n  while (nextFiber) {\r\n    const key = getElementKey(nextFiber.instance);\r\n\r\n    if (!detectIsEmpty(key)) {\r\n      map[key] = nextFiber;\r\n    }\r\n\r\n    nextFiber = nextFiber.nextSibling;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\nfunction extractKeys(alternate: Fiber, children: Array<DarkElementInstance>) {\r\n  let nextFiber = alternate;\r\n  let idx = 0;\r\n  const keys: Array<DarkElementKey> = [];\r\n  const nextKeys: Array<DarkElementKey> = [];\r\n\r\n  while (nextFiber || idx < children.length) {\r\n    const key = nextFiber && getElementKey(nextFiber.instance);\r\n    const nextKey = children[idx] && getElementKey(children[idx]);\r\n\r\n    if (!detectIsEmpty(key)) {\r\n      keys.push(key);\r\n    }\r\n\r\n    if (!detectIsEmpty(nextKey)) {\r\n      nextKeys.push(nextKey);\r\n    }\r\n\r\n    nextFiber = nextFiber ? nextFiber.nextSibling : null;\r\n    idx++;\r\n  }\r\n\r\n  return {\r\n    keys,\r\n    nextKeys,\r\n  };\r\n}\r\n\r\nfunction getAlternateByKey(key: DarkElementKey, fiber: Fiber) {\r\n  if (detectIsEmpty(key)) return null;\r\n  let nextFiber = fiber;\r\n\r\n  while (nextFiber) {\r\n    if (key === getElementKey(nextFiber.instance)) {\r\n      return nextFiber;\r\n    }\r\n\r\n    nextFiber = nextFiber.nextSibling;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction getElementKey(instance: DarkElementInstance): DarkElementKey | null {\r\n  const key = detectIsComponentFactory(instance)\r\n    ? getComponentFactoryKey(instance)\r\n    : detectIsTagVirtualNode(instance)\r\n    ? getVirtualNodeKey(instance)\r\n    : null;\r\n\r\n  return key;\r\n}\r\n\r\nfunction getDiffKeys(keys: Array<DarkElementKey>, nextKeys: Array<DarkElementKey>): Array<DarkElementKey> {\r\n  const nextKeysMap = nextKeys.reduce((acc, key) => ((acc[key] = true), acc), {});\r\n  const diff = [];\r\n\r\n  for (const key of keys) {\r\n    if (!nextKeysMap[key]) {\r\n      diff.push(key);\r\n    }\r\n  }\r\n\r\n  return diff;\r\n}\r\n\r\nfunction getChildAlternate(fiber: Fiber): Fiber | null {\r\n  let alternate = fiber.alternate && fiber.alternate.effectTag !== EffectTag.DELETION ? fiber.alternate.child : null;\r\n\r\n  while (alternate && alternate.effectTag === EffectTag.DELETION) {\r\n    alternate = alternate.nextSibling;\r\n  }\r\n\r\n  return alternate;\r\n}\r\n\r\nfunction getNextSiblingAlternate(fiber: Fiber): Fiber | null {\r\n  let alternate = fiber.alternate?.nextSibling || null;\r\n\r\n  while (alternate && alternate.effectTag === EffectTag.DELETION) {\r\n    alternate = alternate.nextSibling;\r\n  }\r\n\r\n  return alternate;\r\n}\r\n\r\nfunction transformElementInstance(instance: DarkElement) {\r\n  return detectIsEmpty(instance) || instance === false ? createEmptyVirtualNode() : instance;\r\n}\r\n\r\nfunction getInstanceType(instance: DarkElementInstance): string | Function {\r\n  return detectIsTagVirtualNode(instance)\r\n    ? instance.name\r\n    : detectIsVirtualNode(instance)\r\n    ? instance.type\r\n    : detectIsComponentFactory(instance)\r\n    ? instance.type\r\n    : null;\r\n}\r\n\r\nfunction getSiblingFibers(fiber: Fiber): Array<Fiber> {\r\n  const list = [];\r\n  let nextFiber = fiber;\r\n\r\n  while (nextFiber) {\r\n    list.push(nextFiber);\r\n    nextFiber = nextFiber.nextSibling;\r\n  }\r\n\r\n  return list;\r\n}\r\n\r\nfunction hasChildrenProp(element: DarkElementInstance): element is TagVirtualNode | ComponentFactory {\r\n  return detectIsTagVirtualNode(element) || detectIsComponentFactory(element);\r\n}\r\n\r\nfunction commitChanges() {\r\n  const wipFiber = wipRootHelper.get();\r\n  const fromHook = fromHookUpdateHelper.get();\r\n  const deletions = deletionsHelper.get();\r\n  const hasPortals = wipFiber.alternate && wipFiber.alternate.portalHost;\r\n\r\n  if (hasPortals) {\r\n    for (const fiber of deletions) {\r\n      fiber.portalHost && platform.unmountPortal(fiber);\r\n    }\r\n  }\r\n\r\n  commitWork(wipFiber.child, () => {\r\n    for (const fiber of deletions) {\r\n      platform.applyCommits(fiber);\r\n    }\r\n\r\n    deletionsHelper.set([]);\r\n    wipRootHelper.set(null);\r\n\r\n    for (const effect of effectsHelper.get()) {\r\n      effect();\r\n    }\r\n\r\n    effectsHelper.reset();\r\n\r\n    if (fromHook) {\r\n      fromHookUpdateHelper.set(false);\r\n    } else {\r\n      currentRootHelper.set(wipFiber);\r\n    }\r\n  });\r\n}\r\nfunction commitWork(fiber: Fiber, onComplete: Function) {\r\n  walkFiber({\r\n    fiber,\r\n    onLoop: ({ nextFiber, isReturn, resetIsDeepWalking }) => {\r\n      const skip = nextFiber.effectTag === EffectTag.SKIP;\r\n\r\n      if (skip) {\r\n        resetIsDeepWalking();\r\n      } else if (!isReturn) {\r\n        platform.applyCommits(nextFiber);\r\n      }\r\n\r\n      if (nextFiber && nextFiber.shadow) {\r\n        nextFiber.shadow = null;\r\n      }\r\n    },\r\n  });\r\n\r\n  onComplete();\r\n}\r\n\r\ntype WalkFiberOptions<T> = {\r\n  fiber: Fiber;\r\n  onLoop: (options: OnLoopOptions<T>) => void;\r\n};\r\n\r\ntype OnLoopOptions<T> = {\r\n  nextFiber: Fiber<T>;\r\n  isReturn: boolean;\r\n  resetIsDeepWalking: () => void;\r\n};\r\n\r\nfunction walkFiber<T = unknown>(options: WalkFiberOptions<T>) {\r\n  const { fiber, onLoop } = options;\r\n  let nextFiber = fiber;\r\n  let isDeepWalking = true;\r\n  let isReturn = false;\r\n  const visitedMap = new Map<Fiber, true>();\r\n  const detectCanVisit = (fiber: Fiber) => !visitedMap.get(fiber);\r\n\r\n  while (nextFiber) {\r\n    onLoop({\r\n      nextFiber: nextFiber as Fiber<T>,\r\n      isReturn,\r\n      resetIsDeepWalking: () => (isDeepWalking = false),\r\n    });\r\n\r\n    if (nextFiber.child && isDeepWalking && detectCanVisit(nextFiber.child)) {\r\n      const newFiber = nextFiber.child;\r\n\r\n      isReturn = false;\r\n      nextFiber = newFiber;\r\n      visitedMap.set(newFiber, true);\r\n    } else if (nextFiber.nextSibling && detectCanVisit(nextFiber.nextSibling)) {\r\n      const newFiber = nextFiber.nextSibling;\r\n\r\n      isDeepWalking = true;\r\n      isReturn = false;\r\n      nextFiber = newFiber;\r\n      visitedMap.set(newFiber, true);\r\n    } else if (\r\n      nextFiber.parent &&\r\n      nextFiber.parent === fiber &&\r\n      nextFiber.parent.nextSibling &&\r\n      detectCanVisit(nextFiber.parent.nextSibling)\r\n    ) {\r\n      const newFiber = nextFiber.parent.nextSibling;\r\n\r\n      isDeepWalking = true;\r\n      isReturn = false;\r\n      nextFiber = newFiber;\r\n      visitedMap.set(newFiber, true);\r\n    } else if (nextFiber.parent && nextFiber.parent !== fiber) {\r\n      isDeepWalking = false;\r\n      isReturn = true;\r\n      nextFiber = nextFiber.parent;\r\n    } else {\r\n      nextFiber = null;\r\n    }\r\n  }\r\n}\r\n\r\nfunction createHook(): Hook {\r\n  return {\r\n    idx: 0,\r\n    values: [],\r\n  };\r\n}\r\n\r\ntype CreateUpdateCallbackOptions = {\r\n  rootId: number;\r\n  fiber: Fiber;\r\n  onStart: () => void;\r\n};\r\n\r\nfunction createUpdateCallback(options: CreateUpdateCallbackOptions) {\r\n  const { rootId, fiber, onStart } = options;\r\n  const callback = () => {\r\n    if (fiber.isUsed) return;\r\n    onStart();\r\n    effectStoreHelper.set(rootId); // important order!\r\n    fromHookUpdateHelper.set(true);\r\n    fiberMountHelper.reset();\r\n\r\n    fiber.alternate = new Fiber({\r\n      ...fiber,\r\n      alternate: null,\r\n    });\r\n    fiber.marker = PARTIAL_UPDATE;\r\n    fiber.effectTag = EffectTag.UPDATE;\r\n    fiber.child = null;\r\n\r\n    wipRootHelper.set(fiber);\r\n    componentFiberHelper.set(fiber);\r\n    fiber.instance = mountInstance(fiber, fiber.instance);\r\n    nextUnitOfWorkHelper.set(fiber);\r\n  };\r\n\r\n  return callback;\r\n}\r\n\r\nexport { Fiber, workLoop, createHook, hasChildrenProp, createUpdateCallback };\r\n","import { platform } from '../global';\r\nimport { getRootId, componentFiberHelper } from '../scope';\r\nimport { createUpdateCallback } from '../fiber';\r\nimport { useMemo } from '../use-memo';\r\nimport { dummyFn } from '../helpers';\r\nimport { type TaskPriority } from '../constants';\r\n\r\nfunction useUpdate(priority?: TaskPriority) {\r\n  const rootId = getRootId();\r\n  const fiber = componentFiberHelper.get();\r\n  const scope = useMemo(() => ({ fiber }), []);\r\n\r\n  scope.fiber = fiber;\r\n\r\n  const update = (onStart?: () => void) => {\r\n    const callback = createUpdateCallback({ rootId, fiber: scope.fiber, onStart: onStart || dummyFn });\r\n\r\n    platform.scheduleCallback(callback, priority);\r\n  };\r\n\r\n  return update;\r\n}\r\n\r\nexport { useUpdate };\r\n","import { useEffect } from '../use-effect';\r\nimport { useMemo } from '../use-memo';\r\nimport { componentFiberHelper } from '../scope';\r\nimport { useUpdate } from '../use-update';\r\nimport type { Fiber } from '../fiber';\r\nimport type { Context, ContextProviderValue } from '../context/model';\r\n\r\nfunction useContext<T>(context: Context<T>): T {\r\n  const { defaultValue } = context;\r\n  const fiber = componentFiberHelper.get();\r\n  const provider = getProvider<T>(context, fiber);\r\n  const value = provider ? provider.value : defaultValue;\r\n  const update = useUpdate();\r\n  const scope = useMemo(() => ({ prevValue: value }), []);\r\n  const hasProvider = Boolean(provider);\r\n\r\n  useEffect(() => {\r\n    if (!hasProvider) return;\r\n\r\n    const subscriber = (newValue: T) => {\r\n      if (!Object.is(scope.prevValue, newValue)) {\r\n        update();\r\n      }\r\n    };\r\n\r\n    provider.subscribers.push(subscriber);\r\n\r\n    return () => {\r\n      const idx = provider.subscribers.findIndex(x => x === subscriber);\r\n\r\n      if (idx !== -1) {\r\n        provider.subscribers.splice(idx, 1);\r\n      }\r\n    };\r\n  }, [hasProvider]);\r\n\r\n  scope.prevValue = value;\r\n\r\n  return value;\r\n}\r\n\r\nfunction getProvider<T>(context: Context<T>, fiber: Fiber): ContextProviderValue<T> {\r\n  let nextFiber = fiber;\r\n\r\n  while (nextFiber) {\r\n    if (nextFiber.provider && nextFiber.provider.get(context)) {\r\n      return nextFiber.provider.get(context) as ContextProviderValue<T>;\r\n    }\r\n\r\n    nextFiber = nextFiber.parent;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport { useContext };\r\n","import { createComponent } from '../component';\r\nimport { useEffect } from '../use-effect';\r\nimport { componentFiberHelper } from '../scope';\r\nimport { useContext } from '../use-context';\r\nimport { detectIsFunction } from '../helpers';\r\nimport type { Context, ContexProviderProps } from './model';\r\n\r\nfunction createContext<T>(defaultValue: T): Context<T> {\r\n  let displayName = 'Context';\r\n  const context: Context<T> = {\r\n    displayName,\r\n    defaultValue,\r\n    Provider: null,\r\n    Consumer: null,\r\n  };\r\n\r\n  mutateContext(context, defaultValue, displayName);\r\n\r\n  Object.defineProperty(context, 'displayName', {\r\n    get: () => displayName,\r\n    set: (newValue: string) => {\r\n      displayName = newValue;\r\n      mutateContext(context, defaultValue, displayName);\r\n    },\r\n  });\r\n\r\n  return context;\r\n}\r\n\r\nfunction mutateContext<T>(context: Context<T>, defaultValue: T, displayName: string) {\r\n  context.Provider = createProvider(context, defaultValue, displayName);\r\n  context.Consumer = createConsumer(context, displayName);\r\n}\r\n\r\nfunction createProvider<T>(context: Context<T>, defaultValue: T, displayName: string) {\r\n  return createComponent<ContexProviderProps<T>>(\r\n    ({ value = defaultValue, slot }) => {\r\n      const fiber = componentFiberHelper.get();\r\n\r\n      if (!fiber.provider) {\r\n        fiber.provider = new Map();\r\n      }\r\n\r\n      if (!fiber.provider.get(context)) {\r\n        fiber.provider.set(context, {\r\n          subscribers: [],\r\n          value,\r\n        });\r\n      }\r\n\r\n      const provider = fiber.provider.get(context);\r\n\r\n      useEffect(() => {\r\n        for (const subscriber of provider.subscribers) {\r\n          subscriber(value);\r\n        }\r\n      }, [value]);\r\n\r\n      provider.value = value;\r\n\r\n      return slot;\r\n    },\r\n    { displayName: `${displayName}.Provider` },\r\n  );\r\n}\r\n\r\nfunction createConsumer<T>(context: Context<T>, displayName: string) {\r\n  return createComponent(\r\n    ({ slot }) => {\r\n      const value = useContext(context);\r\n\r\n      return detectIsFunction(slot) ? slot(value) : null;\r\n    },\r\n    { displayName: `${displayName}.Consumer` },\r\n  );\r\n}\r\n\r\nexport { createContext };\r\n","import { detectIsNumber, detectIsString, detectIsFunction } from '../helpers';\r\nimport { View, Text, type TagVirtualNodeFactory } from '../view';\r\n\r\nfunction getChildren(children: Array<any>) {\r\n  children = children.map(x => (detectIsString(x) || detectIsNumber(x) ? Text(x.toString()) : x));\r\n\r\n  return children ? (Array.isArray(children) ? [...children] : [children]) : [];\r\n}\r\n\r\nfunction createElement(\r\n  tag: string | Function,\r\n  props: any,\r\n  ...children: Array<any>\r\n): TagVirtualNodeFactory | Function | null {\r\n  if (detectIsString(tag)) {\r\n    return View({\r\n      ...props,\r\n      as: tag,\r\n      slot: getChildren(children),\r\n    });\r\n  }\r\n\r\n  if (detectIsFunction(tag)) {\r\n    let slot = getChildren(children);\r\n\r\n    slot = slot.length === 1 ? slot[0] : slot;\r\n\r\n    return tag({ ...props, slot });\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport { createElement };\r\n","import { detectIsUndefined, detectIsDepsDifferent } from '../helpers';\r\nimport { componentFiberHelper } from '../scope';\r\n\r\nfunction useCallback<T = Function>(callback: T, deps: Array<any>): T {\r\n  const fiber = componentFiberHelper.get();\r\n  const { hook } = fiber;\r\n  const { idx, values } = hook;\r\n\r\n  if (detectIsUndefined(values[idx])) {\r\n    values[idx] = {\r\n      deps,\r\n      value: callback,\r\n    };\r\n\r\n    hook.idx++;\r\n\r\n    return callback;\r\n  }\r\n\r\n  const hookValue = values[idx];\r\n  const prevDeps = hookValue.deps as Array<any>;\r\n  const isDepsDifferent = detectIsDepsDifferent(deps, prevDeps);\r\n\r\n  if (isDepsDifferent) {\r\n    hookValue.deps = deps;\r\n    hookValue.value = callback;\r\n  }\r\n\r\n  hook.idx++;\r\n\r\n  return hookValue.value;\r\n}\r\n\r\nexport { useCallback };\r\n","import { detectIsUndefined, detectIsFunction } from '../helpers';\r\nimport { componentFiberHelper } from '../scope';\r\nimport { useUpdate } from '../use-update';\r\nimport { useMemo } from '../use-memo';\r\nimport { useCallback } from '../use-callback';\r\nimport { TaskPriority } from '../constants';\r\n\r\ntype Value<T> = T | ((prevValue: T) => T);\r\ntype Scope = {\r\n  idx: number;\r\n  values: Array<any>;\r\n};\r\n\r\nfunction useState<T = unknown>(initialValue: T, priority?: TaskPriority): [T, (value: Value<T>) => void] {\r\n  const fiber = componentFiberHelper.get();\r\n  const update = useUpdate(priority);\r\n  const scope: Scope = useMemo(\r\n    () => ({\r\n      idx: fiber.hook.idx,\r\n      values: fiber.hook.values,\r\n    }),\r\n    [],\r\n  );\r\n  const setState = useCallback((sourceValue: Value<T>) => {\r\n    const value = scope.values[scope.idx];\r\n    const newValue = detectIsFunction(sourceValue) ? sourceValue(value) : sourceValue;\r\n\r\n    if (!Object.is(value, newValue)) {\r\n      const setValue = () => {\r\n        scope.values[scope.idx] = newValue;\r\n      };\r\n\r\n      if (priority === TaskPriority.LOW) {\r\n        update(() => setValue());\r\n      } else {\r\n        setValue();\r\n        update();\r\n      }\r\n    }\r\n  }, []);\r\n  const { hook } = fiber;\r\n  const { idx, values } = hook;\r\n  const value: T = !detectIsUndefined(values[idx]) ? values[idx] : initialValue;\r\n\r\n  values[idx] = value;\r\n  scope.idx = idx;\r\n  scope.values = values;\r\n  hook.idx++;\r\n\r\n  return [value, setState];\r\n}\r\n\r\nexport { useState };\r\n","import { createComponent } from '../component';\r\nimport { useState } from '../use-state';\r\nimport { createContext } from '../context';\r\nimport { useContext } from '../use-context';\r\nimport { useMemo } from '../use-memo';\r\nimport { useCallback } from '../use-callback';\r\nimport type { DarkElement } from '../shared';\r\n\r\ntype SuspenseProps = {\r\n  fallback: DarkElement;\r\n};\r\n\r\ntype SuspenseContextValue = {\r\n  fallback: DarkElement;\r\n  isLoaded: boolean;\r\n  trigger: () => void;\r\n};\r\n\r\nconst SuspenseContext = createContext<SuspenseContextValue>({\r\n  fallback: null,\r\n  isLoaded: true,\r\n  trigger: () => {},\r\n});\r\n\r\nconst Suspense = createComponent<SuspenseProps>(({ fallback, slot }) => {\r\n  if (!fallback) {\r\n    throw new Error(`Suspense fallback doesn't found`);\r\n  }\r\n  const { isLoaded: isSuspenseLoaded } = useContext(SuspenseContext);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const trigger = useCallback(() => setIsLoaded(true), []);\r\n  const value = useMemo(() => ({ fallback, isLoaded, trigger }), [fallback, isLoaded]);\r\n\r\n  return SuspenseContext.Provider({\r\n    value,\r\n    slot: isSuspenseLoaded ? slot : null,\r\n  });\r\n});\r\n\r\nexport { SuspenseContext, Suspense };\r\n","import { type Component, createComponent, detectIsComponentFactory } from '../component';\r\nimport { useState } from '../use-state';\r\nimport { useEffect } from '../use-effect';\r\nimport { forwardRef } from '../ref';\r\nimport { SuspenseContext } from '../suspense';\r\nimport { useContext } from '../use-context';\r\n\r\nconst $$lazy = Symbol('lazy');\r\n\r\ntype LazyScope<P, R> = {\r\n  component: Component<P, R>;\r\n};\r\n\r\nfunction lazy<P, R = unknown>(dynamic: () => Promise<{ default: Component<P> }>) {\r\n  return forwardRef(\r\n    createComponent<P, R>(\r\n      (props, ref) => {\r\n        const { fallback, trigger } = useContext(SuspenseContext);\r\n        const [scope, setScope] = useState<LazyScope<P, R>>({\r\n          component: null,\r\n        });\r\n\r\n        useEffect(() => {\r\n          fetchModule(dynamic).then(component => {\r\n            setScope({ component });\r\n          });\r\n        }, []);\r\n\r\n        useEffect(() => {\r\n          if (!scope.component) return;\r\n          trigger();\r\n        }, [scope.component]);\r\n\r\n        return scope.component ? scope.component(props, ref) : fallback;\r\n      },\r\n      { token: $$lazy },\r\n    ),\r\n  );\r\n}\r\n\r\nconst detectIsLazy = (factory: unknown) => detectIsComponentFactory(factory) && factory.token === $$lazy;\r\n\r\nfunction fetchModule(dynamic: () => Promise<{ default: Component }>) {\r\n  return new Promise<Component>(resolve => {\r\n    dynamic().then(module => {\r\n      if (!module.default) {\r\n        throw new Error('lazy loaded component should be exported as default!');\r\n      }\r\n\r\n      resolve(module.default);\r\n    });\r\n  });\r\n}\r\n\r\nexport { lazy, detectIsLazy };\r\n","import { detectIsNumber } from '../helpers';\r\nimport { useState } from '../use-state';\r\nimport { useEffect } from '../use-effect';\r\nimport { TaskPriority } from '../constants';\r\n\r\ntype UseDeferredValueOprions = {\r\n  timeoutMs: number;\r\n};\r\n\r\nfunction useDeferredValue<T>(value: T, options?: UseDeferredValueOprions): T {\r\n  const { timeoutMs } = options || {};\r\n  const [deferredValue, setDeferredValue] = useState(value, TaskPriority.LOW);\r\n\r\n  useEffect(() => {\r\n    let timerId = null;\r\n\r\n    if (detectIsNumber(timeoutMs)) {\r\n      timerId = setTimeout(() => {\r\n        setDeferredValue(value);\r\n      }, timeoutMs);\r\n    } else {\r\n      setDeferredValue(value);\r\n    }\r\n\r\n    return () => timerId && clearTimeout(timerId);\r\n  }, [value]);\r\n\r\n  return deferredValue;\r\n}\r\n\r\nexport { useDeferredValue };\r\n","import { componentFiberHelper } from '../scope';\r\nimport { useEffect } from '../use-effect';\r\nimport { useUpdate } from '../use-update';\r\nimport { useMemo } from '../use-memo';\r\n\r\ntype ErrorScope = {\r\n  error: Error;\r\n};\r\n\r\nfunction useError(): Error | null {\r\n  const fiber = componentFiberHelper.get();\r\n  const update = useUpdate();\r\n  const scope: ErrorScope = useMemo(() => ({ error: null }), []);\r\n\r\n  fiber.catchException = (error: Error) => {\r\n    scope.error = error;\r\n    update();\r\n  };\r\n\r\n  useEffect(() => {\r\n    scope.error = null;\r\n  }, [scope.error]);\r\n\r\n  return scope.error;\r\n}\r\n\r\nexport { useError };\r\n","import { useMemo } from '../use-memo';\r\nimport type { MutableRef } from '../ref';\r\n\r\nfunction useImperativeHandle<T>(ref: MutableRef<T>, createHandle: () => T, deps: Array<any>) {\r\n  const current = useMemo(() => createHandle(), deps);\r\n\r\n  ref.current = current;\r\n}\r\n\r\nexport { useImperativeHandle };\r\n","import { useState } from '../use-state';\r\nimport { useCallback } from '../use-callback';\r\nimport { useMemo } from '../use-memo';\r\nimport { detectIsFunction } from '../helpers';\r\nimport type { Reducer, Dispatch, ReducerAction, ReducerState } from './model';\r\n\r\nfunction useReducer<R extends Reducer>(\r\n  reducer: R,\r\n  initialState: ReducerState<R>,\r\n  initializer?: (state: ReducerState<R>) => ReducerState<R>,\r\n): [ReducerState<R>, Dispatch<ReducerAction<R>>] {\r\n  const initialValue = useMemo(() => {\r\n    return detectIsFunction(initializer) ? initializer(initialState) : initialState;\r\n  }, []);\r\n  const [state, setState] = useState<ReducerState<R>>(initialValue);\r\n  const dispatch = useCallback((action: ReducerAction<R>) => setState(state => reducer(state, action)), []) as Dispatch<\r\n    ReducerAction<R>\r\n  >;\r\n\r\n  return [state, dispatch];\r\n}\r\n\r\nexport { useReducer };\r\n","import { useMemo } from '../use-memo';\r\nimport type { MutableRef } from '../ref/model';\r\n\r\nfunction useRef<T>(initialValue: T = null): MutableRef<T> {\r\n  const ref = useMemo(() => ({ current: initialValue }), []) as MutableRef<T>;\r\n\r\n  return ref;\r\n}\r\n\r\nexport { useRef };\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","TaskPriority","ROOT","EMPTY_NODE","ATTR_KEY","ATTR_REF","PARTIAL_UPDATE","detectIsFunction","detectIsUndefined","detectIsNumber","detectIsString","detectIsObject","detectIsBoolean","detectIsArray","Array","isArray","detectIsNull","detectIsEmpty","error","str","console","flatten","source","list","levelMap","idx","level","item","length","push","getTime","Date","now","keyBy","fn","reduce","acc","x","takeListFromEnd","count","slice","dummyFn","detectIsDepsDifferent","deps","prevDeps","i","defaultOptions","displayName","defaultProps","token","options","children","this","type","props","ref","shouldUpdate","createComponent","createElement","computedOptions","computedProps","ComponentFactory","NodeType","detectIsComponentFactory","getComponentFactoryKey","wipRoot","currentRoot","nextUnitOfWork","fromHookUpdate","events","Map","deletions","fiberMount","navigation","isDeepWalking","componentFiber","effects","rootId","stores","effectStoreHelper","set","id","effectStore","getRootId","Store","storeHelper","wipRootHelper","fiber","currentRootHelper","nextUnitOfWorkHelper","componentFiberHelper","fromHookUpdateHelper","eventsHelper","deletionsHelper","fiberMountHelper","reset","getIndex","jumpToChild","nextLevel","jumpToParent","jumpToSibling","deepWalking","effectsHelper","add","effect","$$useEffect","useEffect","hook","values","runEffect","undefined","run","setTimeout","cleanup","runEffectCleanup","hookValue","$$virtualNode","TAG","name","isVoid","attrs","VirtualNode","text","TEXT","COMMENT","detectIsVirtualNode","vNode","detectIsTagVirtualNode","TagVirtualNode","detectIsCommentVirtualNode","CommentVirtualNode","detectIsTextVirtualNode","TextVirtualNode","detectIsEmptyVirtualNode","getVirtualNodeKey","Text","Comment","View","def","as","slot","rest","createEmptyVirtualNode","detectIsVirtualNodeFactory","$$fragment","Fragment","detectIsFragment","forwardRef","component","detectIsRef","mutableRef","$$memo","defaultShouldUpdate","nextProps","keys","detectIsMemo","memo","Memo","processValue","getValue","isDepsDifferent","check","wrap","useMemo","computedGetValue","EffectTag","platform","scheduleCallback","Error","shouldYeildToHost","createNativeElement","applyCommits","detectIsPortal","unmountPortal","cloneTagMap","PLACEMENT","SKIP","nativeElement","parent","child","nextSibling","alternate","effectTag","instance","shadow","provider","transposition","mountedToHost","portalHost","childrenCount","marker","isUsed","markPortalHost","setError","catchException","workLoop","wipFiber","shouldYield","hasMoreWork","Boolean","performUnitOfWork","fromHook","onComplete","onLoop","nextFiber","isReturn","visitedMap","detectCanVisit","resetIsDeepWalking","newFiber","walkFiber","commitWork","commitChanges","hasChildrenProp","performChild","performedFiber","performSibling","performPartialUpdateEffects","DELETION","getChildAlternate","Fiber","pertformInstance","mutateAlternate","mutateFiber","performMemo","performedNextFiber","performedShadow","performedInstance","childrenIdx","getNextSiblingAlternate","isDifferentKeys","getElementKey","isUpdate","getInstanceType","UPDATE","alternateType","isSameType","isSameKeys","isRemovingCase","isInsertingCase","nextKeys","nextKey","extractKeys","diffKeys","getDiffKeys","fibersMap","map","createFibersByKeyMap","childAlternate","diffCount","childAlternates","getSiblingFibers","performRemovingNodes","diffKeyMap","fibersByPositionsMap","position","createFibersByPositionMap","usedKeyMap","keyIdx","insertionFiber","performInsertingNodes","memoFiber","alternateFactory","elements","splice","getAlternateByKey","getRootShadow","mountInstance","isComponentFactory","result","err","transformElementInstance","nextKeysMap","diff","element","createHook","createUpdateCallback","onStart","useUpdate","priority","scope","callback","useContext","context","defaultValue","getProvider","update","prevValue","hasProvider","subscriber","newValue","is","subscribers","findIndex","createContext","Provider","Consumer","mutateContext","createProvider","createConsumer","getChildren","toString","tag","useCallback","useState","initialValue","setState","sourceValue","LOW","SuspenseContext","fallback","isLoaded","trigger","Suspense","isSuspenseLoaded","setIsLoaded","$$lazy","lazy","dynamic","setScope","Promise","resolve","then","default","fetchModule","detectIsLazy","useDeferredValue","timeoutMs","deferredValue","setDeferredValue","timerId","clearTimeout","useError","useImperativeHandle","createHandle","current","useReducer","reducer","initialState","initializer","state","dispatch","action","useRef"],"sourceRoot":""}