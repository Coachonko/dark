{"version":3,"file":"dark-core.production.min.js","mappings":"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","sources":["webpack://DarkCore/webpack/universalModuleDefinition","webpack://DarkCore/webpack/bootstrap","webpack://DarkCore/webpack/runtime/define property getters","webpack://DarkCore/webpack/runtime/hasOwnProperty shorthand","webpack://DarkCore/webpack/runtime/make namespace object","webpack://DarkCore/./src/constants.ts","webpack://DarkCore/./src/helpers/index.ts","webpack://DarkCore/./src/component/component.ts","webpack://DarkCore/./src/view/types.ts","webpack://DarkCore/./src/scope/scope.ts","webpack://DarkCore/./src/use-effect/use-effect.ts","webpack://DarkCore/./src/view/view.ts","webpack://DarkCore/./src/fragment/fragment.ts","webpack://DarkCore/./src/ref/ref.ts","webpack://DarkCore/./src/memo/memo.ts","webpack://DarkCore/./src/use-memo/use-memo.ts","webpack://DarkCore/./src/platform/platform.ts","webpack://DarkCore/./src/fiber/types.ts","webpack://DarkCore/./src/use-layout-effect/use-layout-effect.ts","webpack://DarkCore/./src/walk/walk.ts","webpack://DarkCore/./src/unmount/unmount.ts","webpack://DarkCore/./src/fiber/fiber.ts","webpack://DarkCore/./src/batch/batch.ts","webpack://DarkCore/./src/use-update/use-update.ts","webpack://DarkCore/./src/use-context/use-context.ts","webpack://DarkCore/./src/context/context.ts","webpack://DarkCore/./src/element/element.ts","webpack://DarkCore/./src/use-callback/use-callback.ts","webpack://DarkCore/./src/use-state/use-state.ts","webpack://DarkCore/./src/suspense/suspense.ts","webpack://DarkCore/./src/lazy/lazy.ts","webpack://DarkCore/./src/use-deferred-value/use-deferred-value.ts","webpack://DarkCore/./src/use-error/use-error.ts","webpack://DarkCore/./src/use-event/use-event.ts","webpack://DarkCore/./src/use-imperative-handle/use-imperative-handle.ts","webpack://DarkCore/./src/use-reducer/use-reducer.ts","webpack://DarkCore/./src/use-ref/use-ref.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"DarkCore\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"DarkCore\"] = factory();\n\telse\n\t\troot[\"DarkCore\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const ROOT = 'root';\r\nexport const EMPTY_NODE = 'dark:matter';\r\nexport const ATTR_KEY = 'key';\r\nexport const ATTR_REF = 'ref';\r\nexport const PARTIAL_UPDATE = 'partial-update';\r\n\r\nexport enum TaskPriority {\r\n  HIGH = 2,\r\n  NORMAL = 1,\r\n  LOW = 0,\r\n}\r\n","import type { NestedArray } from '../shared';\r\n\r\nconst detectIsFunction = (o: any): o is Function => typeof o === 'function';\r\n\r\nconst detectIsUndefined = (o: any): o is undefined => typeof o === 'undefined';\r\n\r\nconst detectIsNumber = (o: any): o is number => typeof o === 'number';\r\n\r\nconst detectIsString = (o: any): o is string => typeof o === 'string';\r\n\r\nconst detectIsObject = (o: any): o is object => typeof o === 'object';\r\n\r\nconst detectIsBoolean = (o: any): o is boolean => typeof o === 'boolean';\r\n\r\nconst detectIsArray = (o: any): o is Array<any> => Array.isArray(o);\r\n\r\nconst detectIsNull = (o: any): o is null => o === null;\r\n\r\nconst detectIsEmpty = (o: any) => detectIsNull(o) || detectIsUndefined(o);\r\n\r\nfunction error(str: string) {\r\n  !detectIsUndefined(console) && console.error(str);\r\n}\r\n\r\nfunction flatten<T = any>(source: Array<NestedArray<T>>): Array<T> {\r\n  const list = [];\r\n  const levelMap = { 0: { idx: 0, source } };\r\n  let level = 0;\r\n\r\n  do {\r\n    const { source, idx } = levelMap[level];\r\n    const item = source[idx];\r\n\r\n    if (idx >= source.length) {\r\n      level--;\r\n      levelMap[level].idx++;\r\n      continue;\r\n    }\r\n\r\n    if (detectIsArray(item)) {\r\n      level++;\r\n      levelMap[level] = {\r\n        idx: 0,\r\n        source: item,\r\n      };\r\n    } else {\r\n      list.push(item);\r\n      levelMap[level].idx++;\r\n    }\r\n  } while (level > 0 || levelMap[level].idx < levelMap[level].source.length);\r\n\r\n  return list;\r\n}\r\n\r\nfunction getTime() {\r\n  return Date.now();\r\n}\r\n\r\nfunction keyBy<T = any>(\r\n  list: Array<T>,\r\n  fn: (o: T) => string | number,\r\n  value = false,\r\n): Record<string | number, T | boolean> {\r\n  return list.reduce((acc, x) => ((acc[fn(x)] = value ? x : true), acc), {});\r\n}\r\n\r\nfunction takeListFromEnd<T>(source: Array<T>, count: number) {\r\n  return source.slice(source.length - count, source.length);\r\n}\r\n\r\nconst dummyFn = () => {};\r\n\r\nfunction detectIsDepsDifferent(deps: Array<unknown>, prevDeps: Array<unknown>): boolean {\r\n  if (!detectIsUndefined(deps) && !detectIsUndefined(prevDeps) && deps.length > 0 && prevDeps.length > 0) {\r\n    for (let i = 0; i < prevDeps.length; i++) {\r\n      if (prevDeps[i] !== deps[i]) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport {\r\n  detectIsFunction,\r\n  detectIsUndefined,\r\n  detectIsNumber,\r\n  detectIsString,\r\n  detectIsObject,\r\n  detectIsBoolean,\r\n  detectIsArray,\r\n  detectIsNull,\r\n  detectIsEmpty,\r\n  error,\r\n  flatten,\r\n  getTime,\r\n  keyBy,\r\n  takeListFromEnd,\r\n  dummyFn,\r\n  detectIsDepsDifferent,\r\n};\r\n","import { ATTR_KEY } from '../constants';\r\nimport { error, detectIsEmpty } from '../helpers';\r\nimport type { DarkElementKey, DarkElementInstance } from '../shared';\r\nimport type { MutableRef } from '../ref';\r\nimport type { CreateElement, ComponentOptions, StandardComponentProps, SlotProps } from './types';\r\n\r\nconst $$component = Symbol('component');\r\nconst defaultOptions: ComponentOptions<any> = {\r\n  displayName: '',\r\n  defaultProps: {},\r\n  token: $$component,\r\n};\r\nclass ComponentFactory<P extends StandardComponentProps = any, R = any> {\r\n  public type: CreateElement<P>;\r\n  public token: Symbol;\r\n  public props: P;\r\n  public ref: MutableRef<R>;\r\n  public displayName: string;\r\n  public children: Array<DarkElementInstance> = [];\r\n  public shouldUpdate?: (props: P, nextProps: P) => boolean;\r\n\r\n  constructor(options: ComponentFactory<P>) {\r\n    this.type = options.type || null;\r\n    this.token = options.token || null;\r\n    this.props = options.props || null;\r\n    this.ref = options.ref || null;\r\n    this.displayName = options.displayName || '';\r\n    this.shouldUpdate = options.shouldUpdate || null;\r\n  }\r\n}\r\n\r\nfunction createComponent<P, R = any>(\r\n  createElement: CreateElement<P & SlotProps, R>,\r\n  options: ComponentOptions<P> = {},\r\n) {\r\n  type Props = P & StandardComponentProps;\r\n  const computedOptions = { ...defaultOptions, ...options };\r\n  const { token, defaultProps, displayName, shouldUpdate } = computedOptions;\r\n\r\n  return (props = {} as Props, ref?: MutableRef<R>): ComponentFactory<Props> => {\r\n    const computedProps = { ...defaultProps, ...props };\r\n    const factory = new ComponentFactory({\r\n      token,\r\n      ref,\r\n      displayName,\r\n      shouldUpdate,\r\n      props: computedProps,\r\n      type: createElement,\r\n      children: [],\r\n    });\r\n\r\n    if (computedProps.ref) {\r\n      delete computedProps.ref;\r\n\r\n      if (process.env.NODE_ENV === 'development') {\r\n        error(`[Dark]: To use ref you need to wrap the createComponent with forwardRef!`);\r\n      }\r\n    }\r\n\r\n    return factory;\r\n  };\r\n}\r\n\r\nconst detectIsComponentFactory = (factory: unknown): factory is ComponentFactory => factory instanceof ComponentFactory;\r\n\r\nconst getComponentFactoryKey = (factory: ComponentFactory): DarkElementKey =>\r\n  !detectIsEmpty(factory.props[ATTR_KEY]) ? factory.props[ATTR_KEY] : null;\r\n\r\nexport { ComponentFactory, createComponent, detectIsComponentFactory, getComponentFactoryKey };\r\n","export type ViewDef = {\r\n  as: string;\r\n  slot?: any;\r\n  isVoid?: boolean;\r\n  [prop: string]: any;\r\n};\r\n\r\nexport enum NodeType {\r\n  TAG = 'TAG',\r\n  TEXT = 'TEXT',\r\n  COMMENT = 'COMMENT',\r\n}\r\n","import type { Fiber } from '../fiber';\r\nimport { dummyFn } from '../helpers';\r\n\r\nlet rootId: number = null;\r\n\r\nconst stores = new Map<number, Store>();\r\n\r\nclass Store<N = unknown> {\r\n  public wipRoot: Fiber = null;\r\n  public currentRoot: Fiber = null;\r\n  public nextUnitOfWork: Fiber = null;\r\n  public events: Map<string, WeakMap<object, Function>> = new Map();\r\n  public unsubscribers: Array<() => void> = [];\r\n  public deletions: Array<Fiber> = [];\r\n  public fiberMount: FiberMountStore = {\r\n    level: 0,\r\n    navigation: {},\r\n    isDeepWalking: true,\r\n  };\r\n  public componentFiber: Fiber = null;\r\n  public effects: Array<() => void> = [];\r\n  public layoutEffects: Array<() => void> = [];\r\n  public isLayoutEffectsZone = false;\r\n  public isUpdateHookZone = false;\r\n  public isBatchZone = false;\r\n  public trackUpdate: (nativeElement: N) => void | undefined;\r\n}\r\n\r\ntype FiberMountStore = {\r\n  level: number;\r\n  navigation: Record<number, number>;\r\n  isDeepWalking: boolean;\r\n};\r\n\r\nconst rootStore = {\r\n  set: (id: number) => {\r\n    rootId = id;\r\n    !stores.get(rootId) && stores.set(rootId, new Store());\r\n  },\r\n  remove: (id: number) => stores.delete(id),\r\n};\r\n\r\nconst getRootId = () => rootId;\r\n\r\nconst store = {\r\n  get: (id: number = rootId) => stores.get(id),\r\n};\r\n\r\nconst wipRootStore = {\r\n  get: () => store.get()?.wipRoot || null,\r\n  set: (fiber: Fiber) => (store.get().wipRoot = fiber),\r\n};\r\n\r\nconst currentRootStore = {\r\n  get: (id?: number) => store.get(id)?.currentRoot || null,\r\n  set: (fiber: Fiber) => (store.get().currentRoot = fiber),\r\n};\r\n\r\nconst nextUnitOfWorkStore = {\r\n  get: () => store.get()?.nextUnitOfWork || null,\r\n  set: (fiber: Fiber) => (store.get().nextUnitOfWork = fiber),\r\n};\r\n\r\nconst currentFiberStore = {\r\n  get: () => store.get()?.componentFiber,\r\n  set: (fiber: Fiber) => (store.get().componentFiber = fiber),\r\n};\r\n\r\nconst eventsStore = {\r\n  get: () => store.get().events,\r\n  addUnsubscriber: (fn: () => void) => store.get().unsubscribers.push(fn),\r\n  unsubscribe: (id: number) => store.get(id).unsubscribers.forEach(fn => fn()),\r\n};\r\n\r\nconst deletionsStore = {\r\n  get: () => store.get().deletions,\r\n  set: (deletions: Array<Fiber>) => (store.get().deletions = deletions),\r\n};\r\n\r\nconst fiberMountStore = {\r\n  reset: () => {\r\n    store.get().fiberMount = {\r\n      level: 0,\r\n      navigation: {},\r\n      isDeepWalking: true,\r\n    };\r\n  },\r\n  getIndex: () => store.get().fiberMount.navigation[store.get().fiberMount.level],\r\n  jumpToChild: () => {\r\n    const { fiberMount } = store.get();\r\n    const level = fiberMount.level;\r\n    const nextLevel = level + 1;\r\n\r\n    fiberMount.level = nextLevel;\r\n    fiberMount.navigation[nextLevel] = 0;\r\n  },\r\n  jumpToParent: () => {\r\n    const { fiberMount } = store.get();\r\n    const level = fiberMount.level;\r\n    const nextLevel = level - 1;\r\n\r\n    fiberMount.navigation[level] = 0;\r\n    fiberMount.level = nextLevel;\r\n  },\r\n  jumpToSibling: () => {\r\n    const { fiberMount } = store.get();\r\n    const level = fiberMount.level;\r\n    const idx = fiberMount.navigation[level] + 1;\r\n\r\n    fiberMount.navigation[level] = idx;\r\n  },\r\n  deepWalking: {\r\n    get: () => store.get().fiberMount.isDeepWalking,\r\n    set: (value: boolean) => (store.get().fiberMount.isDeepWalking = value),\r\n  },\r\n};\r\n\r\nconst effectsStore = {\r\n  get: () => store.get().effects,\r\n  reset: () => (store.get().effects = []),\r\n  add: (effect: () => void) => store.get().effects.push(effect),\r\n};\r\n\r\nconst layoutEffectsStore = {\r\n  get: () => store.get().layoutEffects,\r\n  reset: () => (store.get().layoutEffects = []),\r\n  add: (effect: () => void) => store.get().layoutEffects.push(effect),\r\n};\r\n\r\nconst isLayoutEffectsZone = {\r\n  get: () => store.get()?.isLayoutEffectsZone || false,\r\n  set: (value: boolean) => (store.get().isLayoutEffectsZone = value),\r\n};\r\n\r\nconst isUpdateHookZone = {\r\n  get: () => store.get()?.isUpdateHookZone || false,\r\n  set: (value: boolean) => (store.get().isUpdateHookZone = value),\r\n};\r\n\r\nconst isBatchZone = {\r\n  get: () => store.get()?.isBatchZone || false,\r\n  set: (value: boolean) => (store.get().isBatchZone = value),\r\n};\r\n\r\nexport {\r\n  getRootId,\r\n  rootStore,\r\n  wipRootStore,\r\n  currentRootStore,\r\n  nextUnitOfWorkStore,\r\n  currentFiberStore,\r\n  eventsStore,\r\n  deletionsStore,\r\n  fiberMountStore,\r\n  effectsStore,\r\n  layoutEffectsStore,\r\n  isLayoutEffectsZone,\r\n  isUpdateHookZone,\r\n  isBatchZone,\r\n};\r\n","import { detectIsUndefined, detectIsFunction, detectIsDepsDifferent } from '../helpers';\r\nimport { currentFiberStore, effectsStore } from '../scope';\r\nimport type { Fiber, Hook, HookValue } from '../fiber';\r\nimport type { Effect, DropEffect } from './types';\r\n\r\nconst $$useEffect = Symbol('use-effect');\r\n\r\nconst { useEffect, hasEffects, dropEffects } = createEffect($$useEffect, effectsStore);\r\n\r\nfunction createEffect(token: Symbol, store: typeof effectsStore) {\r\n  function useEffect(effect: Effect, deps?: Array<any>) {\r\n    const fiber = currentFiberStore.get();\r\n    const hook = fiber.hook as Hook<HookValue<DropEffect>>;\r\n    const { idx, values } = hook;\r\n    const runEffect = () => {\r\n      values[idx] = {\r\n        deps,\r\n        token,\r\n        value: undefined,\r\n      };\r\n\r\n      store.add(() => {\r\n        values[idx].value = effect();\r\n      });\r\n    };\r\n\r\n    if (detectIsUndefined(values[idx])) {\r\n      runEffect();\r\n    } else {\r\n      const { deps: prevDeps, value: cleanup } = values[idx];\r\n      const isDepsDifferent = deps ? detectIsDepsDifferent(deps, prevDeps) : true;\r\n\r\n      if (isDepsDifferent) {\r\n        detectIsFunction(cleanup) && cleanup();\r\n        runEffect();\r\n      }\r\n    }\r\n\r\n    hook.idx++;\r\n  }\r\n\r\n  function hasEffects(fiber: Fiber) {\r\n    const { values } = fiber.hook as Hook<HookValue>;\r\n    const hasEffect = values.some(x => x.token === token);\r\n\r\n    return hasEffect;\r\n  }\r\n\r\n  function dropEffects(hook: Hook<HookValue<DropEffect>>) {\r\n    const { values } = hook;\r\n\r\n    for (const value of values) {\r\n      if (value.token === token) {\r\n        const cleanup = value.value;\r\n\r\n        detectIsFunction(cleanup) && cleanup();\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    useEffect,\r\n    hasEffects,\r\n    dropEffects,\r\n  };\r\n}\r\n\r\nexport { useEffect, hasEffects, dropEffects, createEffect };\r\n","import { EMPTY_NODE, ATTR_KEY } from '../constants';\r\nimport { detectIsArray, detectIsEmpty, detectIsFunction, detectIsString } from '../helpers';\r\nimport type { DarkElementKey } from '../shared';\r\nimport type { ComponentFactory, StandardComponentProps } from '../component';\r\nimport { NodeType, type ViewDef } from './types';\r\n\r\nexport type VirtualNodeFactory = () => VirtualNode;\r\nexport type TagVirtualNodeFactory = () => TagVirtualNode;\r\nexport type TextVirtualNodeFactory = () => TextVirtualNode;\r\nexport type CommentVirtualNodeFactory = () => CommentVirtualNode;\r\n\r\nconst $$virtualNode = Symbol('virtual-node');\r\n\r\nclass VirtualNode {\r\n  public type: NodeType = null;\r\n\r\n  constructor(options: Partial<VirtualNode>) {\r\n    this.type = options.type;\r\n  }\r\n}\r\n\r\nclass TagVirtualNode extends VirtualNode {\r\n  public type = NodeType.TAG;\r\n  public name: string = null;\r\n  public isVoid = false;\r\n  public attrs: Record<string, any> = {};\r\n  public children: Array<VirtualNodeFactory | ComponentFactory> = [];\r\n\r\n  constructor(options: Partial<TagVirtualNode>) {\r\n    super(options);\r\n    this.name = options.name || this.name;\r\n    this.isVoid = options.isVoid || this.isVoid;\r\n    this.attrs = options.attrs || this.attrs;\r\n    this.children = options.children || this.children;\r\n  }\r\n}\r\n\r\nclass TextVirtualNode extends VirtualNode {\r\n  public type = NodeType.TEXT;\r\n  public value = '';\r\n\r\n  constructor(text: string) {\r\n    super({});\r\n    this.value = text;\r\n  }\r\n}\r\n\r\nclass CommentVirtualNode extends VirtualNode {\r\n  public type = NodeType.COMMENT;\r\n  public value = '';\r\n\r\n  constructor(text: string) {\r\n    super({});\r\n    this.value = text;\r\n  }\r\n}\r\n\r\nconst detectIsVirtualNode = (vNode: unknown): vNode is VirtualNode => vNode instanceof VirtualNode;\r\n\r\nconst detectIsTagVirtualNode = (vNode: unknown): vNode is TagVirtualNode => vNode instanceof TagVirtualNode;\r\n\r\nconst detectIsCommentVirtualNode = (vNode: unknown): vNode is CommentVirtualNode => vNode instanceof CommentVirtualNode;\r\n\r\nconst detectIsTextVirtualNode = (vNode: unknown): vNode is TextVirtualNode => vNode instanceof TextVirtualNode;\r\n\r\nconst detectIsEmptyVirtualNode = (vNode: unknown): boolean =>\r\n  detectIsCommentVirtualNode(vNode) && vNode.value === EMPTY_NODE;\r\n\r\nfunction getVirtualNodeKey(vNode: TagVirtualNode): DarkElementKey | null {\r\n  const key = vNode && vNode.attrs[ATTR_KEY];\r\n\r\n  return !detectIsEmpty(key) ? key : null;\r\n}\r\n\r\nconst createEmptyVirtualNode = () => new CommentVirtualNode(EMPTY_NODE);\r\n\r\nconst detectIsVirtualNodeFactory = (factory: unknown): factory is VirtualNodeFactory =>\r\n  detectIsFunction(factory) && factory[$$virtualNode] === true;\r\n\r\nfunction View(def: ViewDef): TagVirtualNodeFactory {\r\n  const factory = () => {\r\n    const { as, slot, isVoid = false, ...rest } = def;\r\n    const children = isVoid ? [] : detectIsArray(slot) ? slot : slot ? [slot] : [];\r\n\r\n    return new TagVirtualNode({\r\n      name: as,\r\n      isVoid,\r\n      attrs: { ...rest },\r\n      children: children as Array<VirtualNodeFactory>,\r\n    });\r\n  };\r\n\r\n  factory[$$virtualNode] = true;\r\n\r\n  return factory;\r\n}\r\n\r\nfunction Text(source: string | StandardComponentProps['slot']): string | TextVirtualNode {\r\n  const text = detectIsString(source)\r\n    ? new TextVirtualNode(source)\r\n    : detectIsTextVirtualNode(source)\r\n    ? source.value\r\n    : '';\r\n\r\n  return text;\r\n}\r\n\r\nfunction Comment(text: string): CommentVirtualNodeFactory {\r\n  const factory = () => new CommentVirtualNode(text);\r\n\r\n  factory[$$virtualNode] = true;\r\n\r\n  return factory;\r\n}\r\n\r\nexport {\r\n  VirtualNode,\r\n  TagVirtualNode,\r\n  TextVirtualNode,\r\n  CommentVirtualNode,\r\n  detectIsVirtualNode,\r\n  detectIsTagVirtualNode,\r\n  detectIsCommentVirtualNode,\r\n  detectIsTextVirtualNode,\r\n  detectIsEmptyVirtualNode,\r\n  getVirtualNodeKey,\r\n  createEmptyVirtualNode,\r\n  detectIsVirtualNodeFactory,\r\n  View,\r\n  Text,\r\n  Comment,\r\n};\r\n","import { type KeyProps, createComponent, detectIsComponentFactory } from '../component';\r\n\r\nconst $$fragment = Symbol('fragment');\r\n\r\nconst Fragment = createComponent<KeyProps>(({ slot }) => slot || null, {\r\n  token: $$fragment,\r\n});\r\n\r\nconst detectIsFragment = (factory: unknown) => detectIsComponentFactory(factory) && factory.token === $$fragment;\r\n\r\nexport { Fragment, detectIsFragment };\r\n","import { detectIsObject, detectIsNull } from '../helpers';\r\nimport type { Component, RefProps, ComponentFactory } from '../component';\r\nimport type { MutableRef } from './types';\r\n\r\nfunction forwardRef<P, R>(component: Component<P, R>) {\r\n  type Props = P & RefProps<R>;\r\n\r\n  return ({ ref, ...rest }: Props) => {\r\n    return component(rest as P, ref) as ComponentFactory<P, R>;\r\n  };\r\n}\r\n\r\nconst detectIsRef = (ref: unknown) => {\r\n  if (!detectIsObject(ref) || detectIsNull(ref)) return false;\r\n  const mutableRef = ref as MutableRef;\r\n\r\n  for (const key in mutableRef) {\r\n    if (key === 'current' && mutableRef.hasOwnProperty(key)) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nexport { forwardRef, detectIsRef };\r\n","import {\r\n  type Component,\r\n  type ComponentFactory,\r\n  type StandardComponentProps,\r\n  type RefProps,\r\n  type SlotProps,\r\n  createComponent,\r\n  detectIsComponentFactory,\r\n} from '../component';\r\nimport { type MutableRef, forwardRef } from '../ref';\r\n\r\ntype ShouldUpdate<T> = (props: T, nextProps: T) => boolean;\r\n\r\nconst $$memo = Symbol('memo');\r\n\r\nconst defaultShouldUpdate = (props: {}, nextProps: {}): boolean => {\r\n  const keys = Object.keys(nextProps);\r\n\r\n  for (const key of keys) {\r\n    if (key !== 'slot' && nextProps[key] !== props[key]) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst detectIsMemo = (factory: unknown) => detectIsComponentFactory(factory) && factory.token === $$memo;\r\n\r\nfunction memo<T>(\r\n  component: (props: T, ref?: MutableRef<unknown>) => ComponentFactory<T, unknown>,\r\n  shouldUpdate: ShouldUpdate<T & SlotProps> = defaultShouldUpdate,\r\n): Component<T & StandardComponentProps> {\r\n  return forwardRef(\r\n    createComponent(\r\n      (props: T & RefProps, ref) => {\r\n        ref && (props.ref = ref);\r\n\r\n        return component(props);\r\n      },\r\n      { token: $$memo, shouldUpdate },\r\n    ),\r\n  );\r\n}\r\n\r\nexport { $$memo, memo, detectIsMemo };\r\n","import { type DarkElement } from '../shared';\r\nimport { detectIsUndefined, detectIsArray, detectIsDepsDifferent } from '../helpers';\r\nimport { detectIsComponentFactory, createComponent } from '../component';\r\nimport { detectIsVirtualNodeFactory } from '../view';\r\nimport { currentFiberStore } from '../scope';\r\nimport { Fragment } from '../fragment';\r\nimport { $$memo } from '../memo';\r\n\r\nconst Memo = createComponent(({ slot }) => slot, { token: $$memo });\r\n\r\nfunction wrap<T>(value: T, isDepsDifferent: boolean) {\r\n  const check = (value: T) => detectIsVirtualNodeFactory(value) || detectIsComponentFactory(value);\r\n\r\n  if (detectIsArray(value) ? check(value[0]) : check(value)) {\r\n    const slot = value as unknown as DarkElement;\r\n    const factory = Memo({\r\n      slot: Fragment({ slot }),\r\n    });\r\n\r\n    factory.shouldUpdate = () => isDepsDifferent;\r\n\r\n    return factory;\r\n  }\r\n\r\n  return value;\r\n}\r\n\r\nfunction processValue<T>(getValue: () => T, isDepsDifferent = false) {\r\n  return wrap(getValue(), isDepsDifferent);\r\n}\r\n\r\nfunction useMemo<T>(getValue: () => T, deps: Array<any>): T {\r\n  const fiber = currentFiberStore.get();\r\n  const { hook } = fiber;\r\n  const { idx, values } = hook;\r\n\r\n  if (detectIsUndefined(values[idx])) {\r\n    const value = processValue(getValue);\r\n\r\n    values[idx] = {\r\n      deps,\r\n      value,\r\n    };\r\n\r\n    hook.idx++;\r\n\r\n    return value as T;\r\n  }\r\n\r\n  const hookValue = values[idx];\r\n  const prevDeps = hookValue.deps as Array<any>;\r\n  const isDepsDifferent = detectIsDepsDifferent(deps, prevDeps);\r\n  const computedGetValue = isDepsDifferent ? getValue : () => hookValue.value;\r\n\r\n  hookValue.deps = deps;\r\n  hookValue.value = processValue(computedGetValue, isDepsDifferent);\r\n\r\n  hook.idx++;\r\n\r\n  return hookValue.value;\r\n}\r\n\r\nexport { useMemo };\r\n","import type { Platform } from './types';\r\n\r\nexport const platform: Platform = {\r\n  createNativeElement: () => {\r\n    throw new Error('createNativeElement not installed by renderer');\r\n  },\r\n  requestAnimationFrame: () => {\r\n    throw new Error('requestAnimationFrame not installed by renderer');\r\n  },\r\n  scheduleCallback: () => {\r\n    throw new Error('scheduleCallback not installed by renderer');\r\n  },\r\n  shouldYeildToHost: () => {\r\n    throw new Error('shouldYeildToHost not installed by renderer');\r\n  },\r\n  applyCommit: () => {\r\n    throw new Error('applyCommit not installed by renderer');\r\n  },\r\n  finishCommitWork: () => {\r\n    throw new Error('finishCommitWork not installed by renderer');\r\n  },\r\n  detectIsPortal: () => {\r\n    throw new Error('detectIsPortal not installed by renderer');\r\n  },\r\n  unmountPortal: () => {\r\n    throw new Error('unmountPortal not installed by renderer');\r\n  },\r\n};\r\n","export enum EffectTag {\r\n  CREATE = 'CREATE',\r\n  UPDATE = 'UPDATE',\r\n  DELETE = 'DELETE',\r\n  SKIP = 'SKIP',\r\n}\r\n\r\nexport type NativeElement = unknown;\r\n\r\nexport type HookValue<T = any> = {\r\n  token?: Symbol;\r\n  deps: Array<any>;\r\n  value: T;\r\n};\r\n\r\nexport type Hook<T = any> = {\r\n  idx: number;\r\n  values: Array<T>;\r\n};\r\n\r\nexport const cloneTagMap = {\r\n  [EffectTag.CREATE]: true,\r\n  [EffectTag.SKIP]: true,\r\n};\r\n","import { layoutEffectsStore } from '../scope';\r\nimport { createEffect } from '../use-effect';\r\n\r\nconst $$useLayoutEffect = Symbol('use-layout-effect');\r\n\r\nconst {\r\n  useEffect: useLayoutEffect,\r\n  hasEffects: hasLayoutEffects,\r\n  dropEffects: dropLayoutEffects,\r\n} = createEffect($$useLayoutEffect, layoutEffectsStore);\r\n\r\nexport { useLayoutEffect, hasLayoutEffects, dropLayoutEffects };\r\n","import { type Fiber } from '../fiber';\r\n\r\ntype WalkFiberOptions<T> = {\r\n  fiber: Fiber;\r\n  onLoop: (options: OnLoopOptions<T>) => void;\r\n};\r\n\r\ntype OnLoopOptions<T> = {\r\n  nextFiber: Fiber<T>;\r\n  isReturn: boolean;\r\n  resetIsDeepWalking: () => void;\r\n  stop: () => void;\r\n};\r\n\r\nfunction walkFiber<T = unknown>(options: WalkFiberOptions<T>) {\r\n  const { fiber, onLoop } = options;\r\n  let nextFiber = fiber;\r\n  let isDeepWalking = true;\r\n  let isReturn = false;\r\n  let isStopped = false;\r\n  const visitedMap = new Map<Fiber, true>();\r\n  const detectCanVisit = (fiber: Fiber) => !visitedMap.get(fiber);\r\n\r\n  while (nextFiber) {\r\n    onLoop({\r\n      nextFiber: nextFiber as Fiber<T>,\r\n      isReturn,\r\n      resetIsDeepWalking: () => (isDeepWalking = false),\r\n      stop: () => (isStopped = true),\r\n    });\r\n\r\n    if (isStopped) {\r\n      break;\r\n    }\r\n\r\n    if (nextFiber.child && isDeepWalking && detectCanVisit(nextFiber.child)) {\r\n      const newFiber = nextFiber.child;\r\n\r\n      isReturn = false;\r\n      nextFiber = newFiber;\r\n      visitedMap.set(newFiber, true);\r\n    } else if (nextFiber.nextSibling && detectCanVisit(nextFiber.nextSibling)) {\r\n      const newFiber = nextFiber.nextSibling;\r\n\r\n      isDeepWalking = true;\r\n      isReturn = false;\r\n      nextFiber = newFiber;\r\n      visitedMap.set(newFiber, true);\r\n    } else if (\r\n      nextFiber.parent &&\r\n      nextFiber.parent === fiber &&\r\n      nextFiber.parent.nextSibling &&\r\n      detectCanVisit(nextFiber.parent.nextSibling)\r\n    ) {\r\n      const newFiber = nextFiber.parent.nextSibling;\r\n\r\n      isDeepWalking = true;\r\n      isReturn = false;\r\n      nextFiber = newFiber;\r\n      visitedMap.set(newFiber, true);\r\n    } else if (nextFiber.parent && nextFiber.parent !== fiber) {\r\n      isDeepWalking = false;\r\n      isReturn = true;\r\n      nextFiber = nextFiber.parent;\r\n    } else {\r\n      nextFiber = null;\r\n    }\r\n  }\r\n}\r\n\r\nexport { walkFiber };\r\n","import { type Fiber } from '../fiber';\r\nimport { platform } from '../platform';\r\nimport { detectIsComponentFactory } from '../component';\r\nimport { dropEffects } from '../use-effect';\r\nimport { dropLayoutEffects } from '../use-layout-effect';\r\nimport { walkFiber } from '../walk';\r\nimport { detectIsUndefined } from '../helpers';\r\nimport { currentRootStore, eventsStore, rootStore } from '../scope';\r\n\r\nfunction unmountFiber(fiber: Fiber) {\r\n  if (!fiber.effectHost && !fiber.layoutEffectHost && !fiber.portalHost) return;\r\n\r\n  walkFiber({\r\n    fiber,\r\n    onLoop: ({ nextFiber, isReturn, stop }) => {\r\n      if (nextFiber === fiber.nextSibling || fiber.transposition) return stop();\r\n\r\n      if (!isReturn && detectIsComponentFactory(nextFiber.instance)) {\r\n        nextFiber.layoutEffectHost && dropLayoutEffects(nextFiber.hook);\r\n        nextFiber.effectHost && dropEffects(nextFiber.hook);\r\n        nextFiber.portalHost && platform.unmountPortal(nextFiber);\r\n      }\r\n    },\r\n  });\r\n}\r\n\r\nfunction unmountRoot(rootId: number, onComplete: () => void) {\r\n  if (detectIsUndefined(rootId)) return;\r\n\r\n  unmountFiber(currentRootStore.get(rootId));\r\n  eventsStore.unsubscribe(rootId);\r\n  rootStore.remove(rootId);\r\n  onComplete();\r\n}\r\n\r\nexport { unmountFiber, unmountRoot };\r\n","import { flatten, detectIsEmpty, error, keyBy, takeListFromEnd, detectIsUndefined, detectIsArray } from '../helpers';\r\nimport { platform } from '../platform';\r\nimport {\r\n  wipRootStore,\r\n  currentRootStore,\r\n  nextUnitOfWorkStore,\r\n  deletionsStore,\r\n  fiberMountStore,\r\n  currentFiberStore,\r\n  isUpdateHookZone,\r\n  rootStore,\r\n  effectsStore,\r\n  layoutEffectsStore,\r\n  isLayoutEffectsZone,\r\n} from '../scope';\r\nimport { type ComponentFactory, detectIsComponentFactory, getComponentFactoryKey } from '../component';\r\nimport {\r\n  type TagVirtualNode,\r\n  detectIsTagVirtualNode,\r\n  createEmptyVirtualNode,\r\n  getVirtualNodeKey,\r\n  detectIsVirtualNode,\r\n  detectIsVirtualNodeFactory,\r\n} from '../view';\r\nimport { detectIsMemo } from '../memo';\r\nimport type { Context, ContextProviderValue } from '../context';\r\nimport type { DarkElementKey, DarkElement, DarkElementInstance } from '../shared';\r\nimport { PARTIAL_UPDATE } from '../constants';\r\nimport { type NativeElement, type Hook, EffectTag, cloneTagMap } from './types';\r\nimport { hasEffects } from '../use-effect';\r\nimport { hasLayoutEffects } from '../use-layout-effect';\r\nimport { walkFiber } from '../walk';\r\nimport { unmountFiber } from '../unmount';\r\n\r\nclass Fiber<N = NativeElement> {\r\n  public nativeElement: N;\r\n  public parent: Fiber<N>;\r\n  public child: Fiber<N>;\r\n  public nextSibling: Fiber<N>;\r\n  public alternate: Fiber<N>;\r\n  public effectTag: EffectTag;\r\n  public instance: DarkElementInstance;\r\n  public hook: Hook;\r\n  public shadow: Fiber<N>;\r\n  public provider: Map<Context, ContextProviderValue>;\r\n  public transposition: boolean;\r\n  public mountedToHost: boolean;\r\n  public portalHost: boolean;\r\n  public effectHost: boolean;\r\n  public layoutEffectHost: boolean;\r\n  public childrenCount: number;\r\n  public marker: string;\r\n  public isUsed: boolean;\r\n  public idx: number;\r\n  public batched: Array<() => void>;\r\n  public catchException: (error: Error) => void;\r\n\r\n  constructor(options: Partial<Fiber<N>>) {\r\n    this.nativeElement = options.nativeElement || null;\r\n    this.parent = options.parent || null;\r\n    this.child = options.child || null;\r\n    this.nextSibling = options.nextSibling || null;\r\n    this.alternate = options.alternate || null;\r\n    this.effectTag = options.effectTag || null;\r\n    this.instance = options.instance || null;\r\n    this.hook = options.hook || createHook();\r\n    this.shadow = options.shadow || null;\r\n    this.provider = options.provider || null;\r\n    this.transposition = !detectIsUndefined(options.transposition) ? options.transposition : false;\r\n    this.mountedToHost = !detectIsUndefined(options.mountedToHost) || false;\r\n    this.portalHost = !detectIsUndefined(options.portalHost) ? options.portalHost : false;\r\n    this.effectHost = !detectIsUndefined(options.effectHost) ? options.effectHost : false;\r\n    this.layoutEffectHost = !detectIsUndefined(options.layoutEffectHost) ? options.layoutEffectHost : false;\r\n    this.childrenCount = options.childrenCount || 0;\r\n    this.marker = options.marker || '';\r\n    this.idx = options.idx || 0;\r\n    this.isUsed = options.isUsed || false;\r\n    this.batched = options.batched || [];\r\n  }\r\n\r\n  public markPortalHost() {\r\n    this.portalHost = true;\r\n    this.parent && !this.parent.portalHost && this.parent.markPortalHost();\r\n  }\r\n\r\n  public markEffectHost() {\r\n    this.effectHost = true;\r\n    this.parent && !this.parent.effectHost && this.parent.markEffectHost();\r\n  }\r\n\r\n  public markLayoutEffectHost() {\r\n    this.layoutEffectHost = true;\r\n    this.parent && !this.parent.layoutEffectHost && this.parent.markLayoutEffectHost();\r\n  }\r\n\r\n  public markMountedToHost() {\r\n    this.mountedToHost = true;\r\n    this.parent && !this.parent.mountedToHost && this.parent.markMountedToHost();\r\n  }\r\n\r\n  public setError(error: Error) {\r\n    if (typeof this.catchException === 'function') {\r\n      this.catchException(error);\r\n    } else if (this.parent) {\r\n      this.parent.setError(error);\r\n    }\r\n  }\r\n}\r\n\r\nfunction workLoop() {\r\n  const wipFiber = wipRootStore.get();\r\n  let nextUnitOfWork = nextUnitOfWorkStore.get();\r\n  let shouldYield = false;\r\n  let hasMoreWork = Boolean(nextUnitOfWork);\r\n\r\n  while (nextUnitOfWork && !shouldYield) {\r\n    nextUnitOfWork = performUnitOfWork(nextUnitOfWork);\r\n    nextUnitOfWorkStore.set(nextUnitOfWork);\r\n    hasMoreWork = Boolean(nextUnitOfWork);\r\n    shouldYield = platform.shouldYeildToHost();\r\n  }\r\n\r\n  if (!nextUnitOfWork && wipFiber) {\r\n    commitChanges();\r\n  }\r\n\r\n  return hasMoreWork;\r\n}\r\n\r\nfunction performUnitOfWork(fiber: Fiber) {\r\n  let isDeepWalking = true;\r\n  let nextFiber = fiber;\r\n  let shadow: Fiber = fiber.shadow;\r\n  let instance = fiber.instance;\r\n\r\n  while (true) {\r\n    isDeepWalking = fiberMountStore.deepWalking.get();\r\n    nextFiber.hook.idx = 0;\r\n\r\n    if (isDeepWalking) {\r\n      const hasChildren = hasChildrenProp(instance) && instance.children.length > 0;\r\n\r\n      if (hasChildren) {\r\n        const { performedFiber, performedNextFiber, performedShadow, performedInstance } = performChild({\r\n          nextFiber,\r\n          shadow,\r\n          instance,\r\n        });\r\n\r\n        nextFiber = performedNextFiber;\r\n        shadow = performedShadow;\r\n        instance = performedInstance;\r\n\r\n        if (performedFiber) return performedFiber;\r\n      } else {\r\n        const { performedFiber, performedNextFiber, performedShadow, performedInstance } = performSibling({\r\n          nextFiber,\r\n          shadow,\r\n          instance,\r\n        });\r\n\r\n        nextFiber = performedNextFiber;\r\n        shadow = performedShadow;\r\n        instance = performedInstance;\r\n\r\n        if (performedFiber) return performedFiber;\r\n      }\r\n    } else {\r\n      const { performedFiber, performedNextFiber, performedShadow, performedInstance } = performSibling({\r\n        nextFiber,\r\n        shadow,\r\n        instance,\r\n      });\r\n\r\n      nextFiber = performedNextFiber;\r\n      shadow = performedShadow;\r\n      instance = performedInstance;\r\n\r\n      if (performedFiber) return performedFiber;\r\n    }\r\n\r\n    performPartialUpdateEffects(nextFiber);\r\n\r\n    if (nextFiber.parent === null) return null;\r\n  }\r\n}\r\n\r\nfunction performPartialUpdateEffects(nextFiber: Fiber) {\r\n  if (nextFiber.marker !== PARTIAL_UPDATE) return;\r\n\r\n  const alternate = nextFiber.child?.alternate || null;\r\n  const fiber = nextFiber.child || null;\r\n\r\n  if (alternate && fiber && alternate.nextSibling && !fiber.nextSibling) {\r\n    let nextFiber = alternate.nextSibling;\r\n    const deletions: Array<Fiber> = [];\r\n\r\n    while (nextFiber) {\r\n      nextFiber.effectTag = EffectTag.DELETE;\r\n      deletions.push(nextFiber);\r\n      nextFiber = nextFiber.nextSibling;\r\n    }\r\n\r\n    deletionsStore.get().push(...deletions);\r\n  }\r\n}\r\n\r\ntype PerformChildOptions = {\r\n  nextFiber: Fiber;\r\n  shadow: Fiber;\r\n  instance: DarkElementInstance;\r\n};\r\n\r\nfunction performChild(options: PerformChildOptions) {\r\n  fiberMountStore.jumpToChild();\r\n  let nextFiber = options.nextFiber;\r\n  let shadow = options.shadow;\r\n  let instance = options.instance;\r\n\r\n  shadow = shadow ? shadow.child : null;\r\n\r\n  const alternate = getChildAlternate(nextFiber);\r\n  const hook = getHook({ shadow, alternate, instance });\r\n  const provider = shadow ? shadow.provider : alternate ? alternate.provider : null;\r\n  let fiber = new Fiber({ hook, provider });\r\n\r\n  currentFiberStore.set(fiber);\r\n  fiber.parent = nextFiber;\r\n\r\n  const { performedInstance, performedShadow } = pertformInstance({\r\n    instance,\r\n    idx: 0,\r\n    fiber,\r\n    alternate,\r\n  });\r\n  instance = performedInstance || instance;\r\n  shadow = performedShadow || shadow;\r\n  alternate && mutateAlternate({ alternate, instance });\r\n  mutateFiber({ fiber, alternate, instance });\r\n  fiber = alternate ? performMemo({ fiber, alternate, instance }) : fiber;\r\n\r\n  fiber.idx = 0;\r\n\r\n  nextFiber.child = fiber;\r\n  fiber.parent = nextFiber;\r\n  fiber.shadow = shadow;\r\n  nextFiber = fiber;\r\n\r\n  cloneTagMap[fiber.parent.effectTag] && (fiber.effectTag = fiber.parent.effectTag);\r\n\r\n  return {\r\n    performedFiber: nextFiber,\r\n    performedNextFiber: nextFiber,\r\n    performedShadow: shadow,\r\n    performedInstance: instance,\r\n  };\r\n}\r\n\r\ntype PerformSiblingOptions = {\r\n  nextFiber: Fiber;\r\n  shadow: Fiber;\r\n  instance: DarkElementInstance;\r\n};\r\n\r\nfunction performSibling(options: PerformSiblingOptions) {\r\n  fiberMountStore.jumpToSibling();\r\n  let nextFiber = options.nextFiber;\r\n  let shadow = options.shadow;\r\n  let instance = options.instance;\r\n  const parent = nextFiber.parent.instance;\r\n  const childrenIdx = fiberMountStore.getIndex();\r\n  const hasSibling = hasChildrenProp(parent) && parent.children[childrenIdx];\r\n\r\n  if (hasSibling) {\r\n    fiberMountStore.deepWalking.set(true);\r\n\r\n    shadow = shadow ? shadow.nextSibling : null;\r\n    const alternate = getNextSiblingAlternate(nextFiber);\r\n    const hook = getHook({ shadow, alternate, instance });\r\n    const provider = shadow ? shadow.provider : alternate ? alternate.provider : null;\r\n    let fiber = new Fiber({ hook, provider });\r\n\r\n    currentFiberStore.set(fiber);\r\n    fiber.parent = nextFiber.parent;\r\n\r\n    const { performedInstance, performedShadow } = pertformInstance({\r\n      instance: parent,\r\n      idx: childrenIdx,\r\n      fiber,\r\n      alternate,\r\n    });\r\n    instance = performedInstance || instance;\r\n    shadow = performedShadow || shadow;\r\n    alternate && mutateAlternate({ alternate, instance });\r\n    mutateFiber({ fiber, alternate, instance });\r\n    fiber = alternate ? performMemo({ fiber, alternate, instance }) : fiber;\r\n\r\n    fiber.idx = childrenIdx;\r\n\r\n    fiber.parent = nextFiber.parent;\r\n    nextFiber.nextSibling = fiber;\r\n    fiber.shadow = shadow;\r\n    nextFiber = fiber;\r\n\r\n    cloneTagMap[fiber.parent.effectTag] && (fiber.effectTag = fiber.parent.effectTag);\r\n\r\n    return {\r\n      performedFiber: nextFiber,\r\n      performedNextFiber: nextFiber,\r\n      performedShadow: shadow,\r\n      performedInstance: instance,\r\n    };\r\n  } else {\r\n    fiberMountStore.jumpToParent();\r\n    fiberMountStore.deepWalking.set(false);\r\n    shadow = shadow ? shadow.parent : null;\r\n    nextFiber = nextFiber.parent;\r\n    instance = nextFiber.instance;\r\n\r\n    if (hasChildrenProp(nextFiber.instance)) {\r\n      nextFiber.instance.children = [];\r\n    }\r\n  }\r\n\r\n  return {\r\n    performedFiber: null,\r\n    performedNextFiber: nextFiber,\r\n    performedShadow: shadow,\r\n    performedInstance: instance,\r\n  };\r\n}\r\n\r\ntype MutateFiberOptions = {\r\n  fiber: Fiber;\r\n  alternate: Fiber;\r\n  instance: DarkElementInstance;\r\n};\r\n\r\nfunction mutateFiber(options: MutateFiberOptions) {\r\n  const { fiber, alternate, instance } = options;\r\n  const key = alternate ? getElementKey(alternate.instance) : null;\r\n  const nextKey = alternate ? getElementKey(instance) : null;\r\n  const isDifferentKeys = key !== nextKey;\r\n  const isSameType = Boolean(alternate) && getInstanceType(alternate.instance) === getInstanceType(instance);\r\n  const isUpdate = isSameType && !isDifferentKeys;\r\n\r\n  fiber.instance = instance;\r\n  fiber.alternate = alternate || null;\r\n  fiber.nativeElement = isUpdate ? alternate.nativeElement : null;\r\n  fiber.effectTag = isUpdate ? EffectTag.UPDATE : EffectTag.CREATE;\r\n  fiber.mountedToHost = isUpdate;\r\n\r\n  if (hasChildrenProp(fiber.instance)) {\r\n    fiber.childrenCount = fiber.instance.children.length;\r\n  }\r\n\r\n  if (fiber.alternate) {\r\n    fiber.alternate.shadow = null;\r\n    fiber.alternate.alternate = null;\r\n  }\r\n\r\n  if (!fiber.nativeElement && detectIsVirtualNode(fiber.instance)) {\r\n    fiber.nativeElement = platform.createNativeElement(fiber.instance);\r\n  }\r\n}\r\n\r\ntype PerformAlternateOptions = {\r\n  alternate: Fiber;\r\n  instance: DarkElementInstance;\r\n};\r\n\r\nfunction mutateAlternate(options: PerformAlternateOptions) {\r\n  const { alternate, instance } = options;\r\n  const alternateType = getInstanceType(alternate.instance);\r\n  const elementType = getInstanceType(instance);\r\n  const isSameType = elementType === alternateType;\r\n  const prevKey = getElementKey(alternate.instance);\r\n  const nextKey = getElementKey(instance);\r\n  const isSameKeys = prevKey === nextKey;\r\n\r\n  alternate.isUsed = true;\r\n\r\n  if (!isSameType || !isSameKeys) {\r\n    alternate.effectTag = EffectTag.DELETE;\r\n    deletionsStore.get().push(alternate);\r\n  } else if (hasChildrenProp(alternate.instance) && hasChildrenProp(instance)) {\r\n    const prevElementsCount = alternate.childrenCount;\r\n    const nextElementsCount = instance.children.length;\r\n\r\n    if (prevElementsCount !== nextElementsCount) {\r\n      const children = hasChildrenProp(instance) ? instance.children : [];\r\n      const { prevKeys, nextKeys } = extractKeys(alternate.child, children);\r\n      const hasPrevKeys = prevKeys.length > 0;\r\n      const hasNextKeys = nextKeys.length > 0;\r\n      const hasAnyKeys = hasPrevKeys || hasNextKeys;\r\n\r\n      if (process.env.NODE_ENV === 'development') {\r\n        if (!hasAnyKeys && prevElementsCount !== 0 && nextElementsCount !== 0) {\r\n          error(`\r\n            [Dark]: Operation of inserting, adding, replacing elements into list requires to have a unique key for every node (string or number, but not array index)!\r\n          `);\r\n        }\r\n      }\r\n\r\n      const performRemoving = () => {\r\n        const diffKeys = getDiffKeys(prevKeys, nextKeys);\r\n\r\n        if (diffKeys.length > 0) {\r\n          const fibersMap = createFibersByKeyMap(alternate.child);\r\n\r\n          for (const key of diffKeys) {\r\n            const fiber = fibersMap[key] || null;\r\n\r\n            if (fiber) {\r\n              fiber.effectTag = EffectTag.DELETE;\r\n              deletionsStore.get().push(fiber);\r\n            }\r\n          }\r\n        } else {\r\n          const diffCount = prevElementsCount - nextElementsCount;\r\n          if (diffCount <= 0) return;\r\n          const fibers = takeListFromEnd(getSiblingFibers(alternate.child), diffCount);\r\n\r\n          for (const fiber of fibers) {\r\n            fiber.effectTag = EffectTag.DELETE;\r\n          }\r\n\r\n          deletionsStore.get().push(...fibers);\r\n        }\r\n      };\r\n\r\n      const performInserting = () => {\r\n        const diffKeys = getDiffKeys(nextKeys, prevKeys);\r\n\r\n        if (diffKeys.length === 0 || diffKeys.length === nextKeys.length) return;\r\n\r\n        const diffKeyMap = keyBy(diffKeys, x => x);\r\n        const usedKeyMap = {};\r\n        let keyIdx = 0;\r\n\r\n        for (const nextKey of nextKeys) {\r\n          if (process.env.NODE_ENV === 'development') {\r\n            if (usedKeyMap[nextKey]) {\r\n              error(`Some key of node already has been used!`);\r\n            }\r\n          }\r\n\r\n          usedKeyMap[nextKey] = true;\r\n\r\n          if (nextKey !== prevKeys[keyIdx] && diffKeyMap[nextKey]) {\r\n            const insertionFiber = new Fiber({\r\n              instance: createEmptyVirtualNode(),\r\n              parent: alternate,\r\n              effectTag: EffectTag.CREATE,\r\n            });\r\n\r\n            if (keyIdx === 0) {\r\n              insertionFiber.nextSibling = alternate.child;\r\n              alternate.child = insertionFiber;\r\n            } else {\r\n              const [fiber, prevFiber] = getFibersByIdx(alternate.child, keyIdx);\r\n\r\n              if (fiber && prevFiber) {\r\n                insertionFiber.nextSibling = fiber;\r\n                prevFiber.nextSibling = insertionFiber;\r\n              }\r\n            }\r\n          }\r\n\r\n          keyIdx++;\r\n        }\r\n      };\r\n\r\n      performRemoving();\r\n      performInserting();\r\n    }\r\n  }\r\n}\r\n\r\ntype PerformMemoOptions = {\r\n  fiber: Fiber;\r\n  alternate: Fiber;\r\n  instance: DarkElementInstance;\r\n};\r\n\r\nfunction performMemo(options: PerformMemoOptions) {\r\n  const { fiber, alternate, instance } = options;\r\n\r\n  if (detectIsMemo(fiber.instance)) {\r\n    let memoFiber: Fiber = null;\r\n    const factory = instance as ComponentFactory;\r\n    const alternateFactory = alternate.instance as ComponentFactory;\r\n\r\n    if (factory.type !== alternateFactory.type) return fiber;\r\n\r\n    const props = alternateFactory.props;\r\n    const nextProps = factory.props;\r\n    const skip = !factory.shouldUpdate(props, nextProps);\r\n\r\n    if (skip) {\r\n      let nextFiber: Fiber = null;\r\n      fiberMountStore.deepWalking.set(false);\r\n\r\n      memoFiber = new Fiber({\r\n        ...alternate,\r\n        alternate,\r\n        effectTag: EffectTag.SKIP,\r\n        nextSibling: alternate.nextSibling\r\n          ? alternate.nextSibling.effectTag === EffectTag.DELETE\r\n            ? null\r\n            : alternate.nextSibling\r\n          : null,\r\n      });\r\n\r\n      alternate.alternate = null;\r\n      nextFiber = memoFiber.child;\r\n\r\n      while (nextFiber) {\r\n        nextFiber.parent = memoFiber;\r\n        nextFiber = nextFiber.nextSibling;\r\n      }\r\n\r\n      if (memoFiber.effectHost) {\r\n        fiber.markEffectHost();\r\n      }\r\n\r\n      if (memoFiber.layoutEffectHost) {\r\n        fiber.markLayoutEffectHost();\r\n      }\r\n\r\n      if (memoFiber.mountedToHost) {\r\n        fiber.markMountedToHost();\r\n      }\r\n\r\n      if (memoFiber.portalHost) {\r\n        fiber.markPortalHost();\r\n      }\r\n\r\n      return memoFiber;\r\n    }\r\n  }\r\n\r\n  return fiber;\r\n}\r\n\r\ntype PerformInstanceOptions = {\r\n  instance: DarkElementInstance;\r\n  idx: number;\r\n  fiber: Fiber;\r\n  alternate: Fiber;\r\n};\r\n\r\nfunction pertformInstance(options: PerformInstanceOptions) {\r\n  const { instance, idx, fiber, alternate } = options;\r\n  let performedInstance: DarkElementInstance = null;\r\n  let performedShadow: Fiber = null;\r\n\r\n  if (hasChildrenProp(instance)) {\r\n    const elements = detectIsArray(instance.children[idx])\r\n      ? flatten([instance.children[idx]])\r\n      : [instance.children[idx]];\r\n\r\n    instance.children.splice(idx, 1, ...elements);\r\n    performedInstance = instance.children[idx];\r\n    performedShadow = alternate\r\n      ? getRootShadow({\r\n          instance: performedInstance,\r\n          fiber,\r\n          alternate,\r\n        })\r\n      : performedShadow;\r\n    performedInstance = mountInstance(fiber, performedInstance);\r\n  }\r\n\r\n  if (detectIsComponentFactory(performedInstance)) {\r\n    if (hasEffects(fiber)) {\r\n      fiber.markEffectHost();\r\n    }\r\n\r\n    if (hasLayoutEffects(fiber)) {\r\n      fiber.markLayoutEffectHost();\r\n    }\r\n\r\n    if (platform.detectIsPortal(performedInstance)) {\r\n      fiber.markPortalHost();\r\n    }\r\n  }\r\n\r\n  return {\r\n    performedInstance,\r\n    performedShadow,\r\n  };\r\n}\r\n\r\ntype GetRootShadowOptions = {\r\n  instance: DarkElementInstance;\r\n  fiber: Fiber;\r\n  alternate: Fiber;\r\n};\r\n\r\nfunction getRootShadow(options: GetRootShadowOptions) {\r\n  const { instance, fiber, alternate } = options;\r\n  const key = getElementKey(alternate.instance);\r\n  const nextKey = getElementKey(instance);\r\n  let shadow: Fiber = null;\r\n\r\n  if (key !== nextKey) {\r\n    shadow = getAlternateByKey(nextKey, alternate.parent.child);\r\n\r\n    if (shadow) {\r\n      fiber.hook = shadow.hook;\r\n      fiber.provider = shadow.provider;\r\n      alternate.transposition = true;\r\n    }\r\n  }\r\n\r\n  return shadow;\r\n}\r\n\r\nfunction mountInstance(fiber: Fiber, instance: DarkElementInstance) {\r\n  const isComponentFactory = detectIsComponentFactory(instance);\r\n  const factory = instance as ComponentFactory;\r\n\r\n  if (isComponentFactory) {\r\n    try {\r\n      const result = factory.type(factory.props, factory.ref);\r\n\r\n      factory.children = detectIsArray(result)\r\n        ? (flatten([result]) as Array<DarkElementInstance>)\r\n        : ([result] as Array<DarkElementInstance>);\r\n    } catch (err) {\r\n      factory.children = [];\r\n      fiber.setError(err);\r\n      error(err);\r\n    }\r\n  } else if (detectIsVirtualNodeFactory(instance)) {\r\n    instance = instance();\r\n  }\r\n\r\n  if (hasChildrenProp(instance)) {\r\n    for (let i = 0; i < instance.children.length; i++) {\r\n      if (!instance.children[i]) {\r\n        instance.children[i] = transformElementInstance(instance.children[i]) as DarkElementInstance;\r\n      }\r\n    }\r\n\r\n    instance.children = isComponentFactory\r\n      ? instance.children\r\n      : detectIsArray(instance.children)\r\n      ? flatten([instance.children])\r\n      : [instance.children];\r\n\r\n    if (isComponentFactory && factory.children.length === 0) {\r\n      factory.children.push(createEmptyVirtualNode());\r\n    }\r\n  }\r\n\r\n  return instance;\r\n}\r\n\r\nfunction getFibersByIdx(fiber: Fiber, idx: number): [Fiber | null, Fiber | null] {\r\n  const map: Record<string, Fiber> = {};\r\n  let nextFiber = fiber;\r\n  let position = 0;\r\n\r\n  while (nextFiber) {\r\n    map[position] = nextFiber;\r\n\r\n    if (position === idx) {\r\n      return [map[position] || null, map[position - 1] || null];\r\n    }\r\n\r\n    position++;\r\n    nextFiber = nextFiber.nextSibling;\r\n  }\r\n\r\n  return [null, null];\r\n}\r\n\r\nfunction createFibersByKeyMap(fiber: Fiber) {\r\n  let nextFiber = fiber;\r\n  const map: Record<string, Fiber> = {};\r\n\r\n  while (nextFiber) {\r\n    const key = getElementKey(nextFiber.instance);\r\n\r\n    if (!detectIsEmpty(key)) {\r\n      map[key] = nextFiber;\r\n    }\r\n\r\n    nextFiber = nextFiber.nextSibling;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\nfunction extractKeys(alternate: Fiber, children: Array<DarkElementInstance>) {\r\n  let nextFiber = alternate;\r\n  let idx = 0;\r\n  const prevKeys: Array<DarkElementKey> = [];\r\n  const nextKeys: Array<DarkElementKey> = [];\r\n\r\n  while (nextFiber || idx < children.length) {\r\n    const key = nextFiber && getElementKey(nextFiber.instance);\r\n    const nextKey = children[idx] && getElementKey(children[idx]);\r\n\r\n    if (!detectIsEmpty(key)) {\r\n      prevKeys.push(key);\r\n    }\r\n\r\n    if (!detectIsEmpty(nextKey)) {\r\n      nextKeys.push(nextKey);\r\n    }\r\n\r\n    nextFiber = nextFiber ? nextFiber.nextSibling : null;\r\n    idx++;\r\n  }\r\n\r\n  return {\r\n    prevKeys,\r\n    nextKeys,\r\n  };\r\n}\r\n\r\nfunction getAlternateByKey(key: DarkElementKey, fiber: Fiber) {\r\n  if (detectIsEmpty(key)) return null;\r\n  let nextFiber = fiber;\r\n\r\n  while (nextFiber) {\r\n    if (key === getElementKey(nextFiber.instance)) {\r\n      return nextFiber;\r\n    }\r\n\r\n    nextFiber = nextFiber.nextSibling;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction getElementKey(instance: DarkElementInstance): DarkElementKey | null {\r\n  const key = detectIsComponentFactory(instance)\r\n    ? getComponentFactoryKey(instance)\r\n    : detectIsTagVirtualNode(instance)\r\n    ? getVirtualNodeKey(instance)\r\n    : null;\r\n\r\n  return key;\r\n}\r\n\r\nfunction getDiffKeys(keys: Array<DarkElementKey>, nextKeys: Array<DarkElementKey>): Array<DarkElementKey> {\r\n  const nextKeysMap = nextKeys.reduce((acc, key) => ((acc[key] = true), acc), {});\r\n  const diff = [];\r\n\r\n  for (const key of keys) {\r\n    if (!nextKeysMap[key]) {\r\n      diff.push(key);\r\n    }\r\n  }\r\n\r\n  return diff;\r\n}\r\n\r\nfunction getChildAlternate(fiber: Fiber): Fiber | null {\r\n  let alternate = fiber.alternate && fiber.alternate.effectTag !== EffectTag.DELETE ? fiber.alternate.child : null;\r\n\r\n  while (alternate && alternate.effectTag === EffectTag.DELETE) {\r\n    alternate = alternate.nextSibling;\r\n  }\r\n\r\n  return alternate;\r\n}\r\n\r\nfunction getNextSiblingAlternate(fiber: Fiber): Fiber | null {\r\n  let alternate = fiber.alternate?.nextSibling || null;\r\n\r\n  while (alternate && alternate.effectTag === EffectTag.DELETE) {\r\n    alternate = alternate.nextSibling;\r\n  }\r\n\r\n  return alternate;\r\n}\r\n\r\nfunction transformElementInstance(instance: DarkElement) {\r\n  return detectIsEmpty(instance) || instance === false ? createEmptyVirtualNode() : instance;\r\n}\r\n\r\nfunction getInstanceType(instance: DarkElementInstance): string | Function {\r\n  return detectIsTagVirtualNode(instance)\r\n    ? instance.name\r\n    : detectIsVirtualNode(instance)\r\n    ? instance.type\r\n    : detectIsComponentFactory(instance)\r\n    ? instance.type\r\n    : null;\r\n}\r\n\r\nfunction getSiblingFibers(fiber: Fiber): Array<Fiber> {\r\n  const list = [];\r\n  let nextFiber = fiber;\r\n\r\n  while (nextFiber) {\r\n    list.push(nextFiber);\r\n    nextFiber = nextFiber.nextSibling;\r\n  }\r\n\r\n  return list;\r\n}\r\n\r\nfunction hasChildrenProp(element: DarkElementInstance): element is TagVirtualNode | ComponentFactory {\r\n  return detectIsTagVirtualNode(element) || detectIsComponentFactory(element);\r\n}\r\n\r\nfunction commitChanges() {\r\n  const wipFiber = wipRootStore.get();\r\n\r\n  commitWork(wipFiber.child, () => {\r\n    const layoutEffects = layoutEffectsStore.get();\r\n    const effects = effectsStore.get();\r\n\r\n    isLayoutEffectsZone.set(true);\r\n    layoutEffects.forEach(fn => fn());\r\n    isLayoutEffectsZone.set(false);\r\n\r\n    setTimeout(() => {\r\n      effects.forEach(fn => fn());\r\n    });\r\n\r\n    wipRootStore.set(null); // important order\r\n    layoutEffectsStore.reset();\r\n    effectsStore.reset();\r\n\r\n    if (isUpdateHookZone.get()) {\r\n      isUpdateHookZone.set(false);\r\n    } else {\r\n      currentRootStore.set(wipFiber);\r\n    }\r\n  });\r\n}\r\n\r\nfunction commitWork(fiber: Fiber, onComplete: Function) {\r\n  const deletions = deletionsStore.get();\r\n\r\n  // important order\r\n  for (const fiber of deletions) {\r\n    unmountFiber(fiber);\r\n    platform.applyCommit(fiber);\r\n  }\r\n\r\n  walkFiber({\r\n    fiber,\r\n    onLoop: ({ nextFiber, isReturn, resetIsDeepWalking }) => {\r\n      const skip = nextFiber.effectTag === EffectTag.SKIP;\r\n\r\n      if (skip) {\r\n        resetIsDeepWalking();\r\n      } else if (!isReturn) {\r\n        platform.applyCommit(nextFiber);\r\n      }\r\n\r\n      if (nextFiber && nextFiber.shadow) {\r\n        nextFiber.shadow = null;\r\n      }\r\n    },\r\n  });\r\n\r\n  platform.finishCommitWork();\r\n  deletionsStore.set([]);\r\n  onComplete();\r\n}\r\n\r\nfunction createHook(): Hook {\r\n  return {\r\n    idx: 0,\r\n    values: [],\r\n  };\r\n}\r\n\r\ntype GetHookOptions = {\r\n  shadow: Fiber;\r\n  alternate: Fiber;\r\n  instance: DarkElementInstance;\r\n};\r\n\r\nfunction getHook(options: GetHookOptions) {\r\n  const { shadow, alternate, instance } = options;\r\n\r\n  if (shadow) return shadow.hook;\r\n\r\n  if (alternate && getElementKey(alternate.instance) === getElementKey(instance)) {\r\n    return alternate.hook;\r\n  }\r\n\r\n  return createHook();\r\n}\r\n\r\ntype CreateUpdateCallbackOptions = {\r\n  rootId: number;\r\n  fiber: Fiber;\r\n  forceStart?: boolean;\r\n  onStart: () => void;\r\n};\r\n\r\nfunction createUpdateCallback(options: CreateUpdateCallbackOptions) {\r\n  const { rootId, fiber, forceStart = false, onStart } = options;\r\n  const callback = () => {\r\n    forceStart && onStart();\r\n    if (fiber.isUsed) return;\r\n    !forceStart && onStart();\r\n    rootStore.set(rootId); // important order!\r\n    isUpdateHookZone.set(true);\r\n    fiberMountStore.reset();\r\n\r\n    fiber.alternate = new Fiber({\r\n      ...fiber,\r\n      alternate: null,\r\n    });\r\n    fiber.marker = PARTIAL_UPDATE;\r\n    fiber.effectTag = EffectTag.UPDATE;\r\n    fiber.child = null;\r\n\r\n    wipRootStore.set(fiber);\r\n    currentFiberStore.set(fiber);\r\n    fiber.instance = mountInstance(fiber, fiber.instance);\r\n    nextUnitOfWorkStore.set(fiber);\r\n  };\r\n\r\n  return callback;\r\n}\r\n\r\nexport { Fiber, workLoop, createHook, hasChildrenProp, createUpdateCallback };\r\n","import { type Fiber } from '../fiber';\r\nimport { isBatchZone } from '../scope';\r\nimport { platform } from '../platform';\r\n\r\nfunction batch(callback: () => void) {\r\n  isBatchZone.set(true);\r\n  callback();\r\n}\r\n\r\nfunction runBatch(fiber: Fiber, callback: () => void) {\r\n  fiber.batched.push(callback);\r\n\r\n  const update = () => {\r\n    const size = fiber.batched.length;\r\n\r\n    platform.requestAnimationFrame(() => {\r\n      if (size === fiber.batched.length) {\r\n        const fn = fiber.batched[fiber.batched.length - 1];\r\n\r\n        isBatchZone.set(false);\r\n        fiber.batched = [];\r\n        fn && fn();\r\n      } else {\r\n        update();\r\n      }\r\n    });\r\n  };\r\n\r\n  update();\r\n}\r\n\r\nexport { batch, runBatch };\r\n","import { platform, type ScheduleCallbackOptions } from '../platform';\r\nimport { getRootId, currentFiberStore, isLayoutEffectsZone, isBatchZone } from '../scope';\r\nimport { createUpdateCallback } from '../fiber';\r\nimport { useMemo } from '../use-memo';\r\nimport { dummyFn } from '../helpers';\r\nimport { runBatch as batch } from '../batch';\r\n\r\nfunction useUpdate(options?: ScheduleCallbackOptions) {\r\n  const rootId = getRootId();\r\n  const fiber = currentFiberStore.get();\r\n  const scope = useMemo(() => ({ fiber }), []);\r\n\r\n  scope.fiber = fiber;\r\n\r\n  const update = (onStart?: () => void) => {\r\n    const callback = createUpdateCallback({\r\n      rootId,\r\n      fiber: scope.fiber,\r\n      forceStart: Boolean(options?.timeoutMs),\r\n      onStart: onStart || dummyFn,\r\n    });\r\n\r\n    if (isLayoutEffectsZone.get()) {\r\n      options = {\r\n        ...(options || {}),\r\n        forceSync: true,\r\n      };\r\n    }\r\n\r\n    if (isBatchZone.get()) {\r\n      batch(scope.fiber, () => platform.scheduleCallback(callback, options));\r\n    } else {\r\n      platform.scheduleCallback(callback, options);\r\n    }\r\n  };\r\n\r\n  return update;\r\n}\r\n\r\nexport { useUpdate };\r\n","import { useEffect } from '../use-effect';\r\nimport { useMemo } from '../use-memo';\r\nimport { currentFiberStore } from '../scope';\r\nimport { useUpdate } from '../use-update';\r\nimport type { Fiber } from '../fiber';\r\nimport type { Context, ContextProviderValue } from '../context';\r\n\r\nfunction useContext<T>(context: Context<T>): T {\r\n  const { defaultValue } = context;\r\n  const fiber = currentFiberStore.get();\r\n  const provider = getProvider<T>(context, fiber);\r\n  const value = provider ? provider.value : defaultValue;\r\n  const update = useUpdate();\r\n  const scope = useMemo(() => ({ prevValue: value }), []);\r\n  const hasProvider = Boolean(provider);\r\n\r\n  useEffect(() => {\r\n    if (!hasProvider) return;\r\n\r\n    const subscriber = (newValue: T) => {\r\n      if (!Object.is(scope.prevValue, newValue)) {\r\n        update();\r\n      }\r\n    };\r\n\r\n    provider.subscribers.push(subscriber);\r\n\r\n    return () => {\r\n      const idx = provider.subscribers.findIndex(x => x === subscriber);\r\n\r\n      if (idx !== -1) {\r\n        provider.subscribers.splice(idx, 1);\r\n      }\r\n    };\r\n  }, [hasProvider]);\r\n\r\n  scope.prevValue = value;\r\n\r\n  return value;\r\n}\r\n\r\nfunction getProvider<T>(context: Context<T>, fiber: Fiber): ContextProviderValue<T> {\r\n  let nextFiber = fiber;\r\n\r\n  while (nextFiber) {\r\n    if (nextFiber.provider && nextFiber.provider.get(context)) {\r\n      return nextFiber.provider.get(context) as ContextProviderValue<T>;\r\n    }\r\n\r\n    nextFiber = nextFiber.parent;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport { useContext };\r\n","import { createComponent } from '../component';\r\nimport { useEffect } from '../use-effect';\r\nimport { currentFiberStore } from '../scope';\r\nimport { useContext } from '../use-context';\r\nimport { detectIsFunction } from '../helpers';\r\nimport type { Context, ContexProviderProps } from './types';\r\n\r\nfunction createContext<T>(defaultValue: T): Context<T> {\r\n  let displayName = 'Context';\r\n  const context: Context<T> = {\r\n    displayName,\r\n    defaultValue,\r\n    Provider: null,\r\n    Consumer: null,\r\n  };\r\n\r\n  mutateContext(context, defaultValue, displayName);\r\n\r\n  Object.defineProperty(context, 'displayName', {\r\n    get: () => displayName,\r\n    set: (newValue: string) => {\r\n      displayName = newValue;\r\n      mutateContext(context, defaultValue, displayName);\r\n    },\r\n  });\r\n\r\n  return context;\r\n}\r\n\r\nfunction mutateContext<T>(context: Context<T>, defaultValue: T, displayName: string) {\r\n  context.Provider = createProvider(context, defaultValue, displayName);\r\n  context.Consumer = createConsumer(context, displayName);\r\n}\r\n\r\nfunction createProvider<T>(context: Context<T>, defaultValue: T, displayName: string) {\r\n  return createComponent<ContexProviderProps<T>>(\r\n    ({ value = defaultValue, slot }) => {\r\n      const fiber = currentFiberStore.get();\r\n\r\n      if (!fiber.provider) {\r\n        fiber.provider = new Map();\r\n      }\r\n\r\n      if (!fiber.provider.get(context)) {\r\n        fiber.provider.set(context, {\r\n          subscribers: [],\r\n          value,\r\n        });\r\n      }\r\n\r\n      const provider = fiber.provider.get(context);\r\n\r\n      useEffect(() => {\r\n        for (const subscriber of provider.subscribers) {\r\n          subscriber(value);\r\n        }\r\n      }, [value]);\r\n\r\n      provider.value = value;\r\n\r\n      return slot;\r\n    },\r\n    { displayName: `${displayName}.Provider` },\r\n  );\r\n}\r\n\r\nfunction createConsumer<T>(context: Context<T>, displayName: string) {\r\n  return createComponent(\r\n    ({ slot }) => {\r\n      const value = useContext(context);\r\n\r\n      return detectIsFunction(slot) ? slot(value) : null;\r\n    },\r\n    { displayName: `${displayName}.Consumer` },\r\n  );\r\n}\r\n\r\nexport { createContext };\r\n","import { detectIsNumber, detectIsString, detectIsFunction } from '../helpers';\r\nimport { View, Text, type TagVirtualNodeFactory } from '../view';\r\n\r\nfunction getChildren(children: Array<any>) {\r\n  children = children.map(x => (detectIsString(x) || detectIsNumber(x) ? Text(x.toString()) : x));\r\n\r\n  return children ? (Array.isArray(children) ? [...children] : [children]) : [];\r\n}\r\n\r\nfunction createElement(\r\n  tag: string | Function,\r\n  props: any,\r\n  ...children: Array<any>\r\n): TagVirtualNodeFactory | Function | null {\r\n  if (detectIsString(tag)) {\r\n    return View({\r\n      ...props,\r\n      as: tag,\r\n      slot: getChildren(children),\r\n    });\r\n  }\r\n\r\n  if (detectIsFunction(tag)) {\r\n    let slot = getChildren(children);\r\n\r\n    slot = slot.length === 1 ? slot[0] : slot;\r\n\r\n    return tag({ ...props, slot });\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport { createElement };\r\n","import { useMemo } from '../use-memo';\r\n\r\nfunction useCallback<T = Function>(callback: T, deps: Array<any>): T {\r\n  const value = useMemo(() => callback, deps);\r\n\r\n  return value;\r\n}\r\n\r\nexport { useCallback };\r\n","import { type ScheduleCallbackOptions } from '../platform';\r\nimport { detectIsUndefined, detectIsFunction } from '../helpers';\r\nimport { currentFiberStore } from '../scope';\r\nimport { useUpdate } from '../use-update';\r\nimport { useMemo } from '../use-memo';\r\nimport { useCallback } from '../use-callback';\r\nimport { TaskPriority } from '../constants';\r\n\r\ntype Value<T> = T | ((prevValue: T) => T);\r\ntype Scope = {\r\n  idx: number;\r\n  values: Array<any>;\r\n};\r\n\r\nfunction useState<T = unknown>(initialValue: T, options?: ScheduleCallbackOptions): [T, (value: Value<T>) => void] {\r\n  const fiber = currentFiberStore.get();\r\n  const update = useUpdate(options);\r\n  const scope: Scope = useMemo(\r\n    () => ({\r\n      idx: fiber.hook.idx,\r\n      values: fiber.hook.values,\r\n    }),\r\n    [],\r\n  );\r\n  const setState = useCallback((sourceValue: Value<T>) => {\r\n    const value = scope.values[scope.idx];\r\n    const newValue = detectIsFunction(sourceValue) ? sourceValue(value) : sourceValue;\r\n\r\n    if (!Object.is(value, newValue)) {\r\n      const setValue = () => {\r\n        scope.values[scope.idx] = newValue;\r\n      };\r\n\r\n      if (options?.priority === TaskPriority.LOW) {\r\n        update(() => setValue());\r\n      } else {\r\n        setValue();\r\n        update();\r\n      }\r\n    }\r\n  }, []);\r\n  const { hook } = fiber;\r\n  const { idx, values } = hook;\r\n  const value: T = !detectIsUndefined(values[idx]) ? values[idx] : initialValue;\r\n\r\n  values[idx] = value;\r\n  scope.idx = idx;\r\n  scope.values = values;\r\n  hook.idx++;\r\n\r\n  return [value, setState];\r\n}\r\n\r\nexport { useState };\r\n","import { createComponent } from '../component';\r\nimport { useState } from '../use-state';\r\nimport { createContext } from '../context';\r\nimport { useContext } from '../use-context';\r\nimport { useMemo } from '../use-memo';\r\nimport { useCallback } from '../use-callback';\r\nimport type { DarkElement } from '../shared';\r\n\r\ntype SuspenseProps = {\r\n  fallback: DarkElement;\r\n};\r\n\r\ntype SuspenseContextValue = {\r\n  fallback: DarkElement;\r\n  isLoaded: boolean;\r\n  trigger: () => void;\r\n};\r\n\r\nconst SuspenseContext = createContext<SuspenseContextValue>({\r\n  fallback: null,\r\n  isLoaded: true,\r\n  trigger: () => {},\r\n});\r\n\r\nconst Suspense = createComponent<SuspenseProps>(({ fallback, slot }) => {\r\n  if (!fallback) {\r\n    throw new Error(`[Dark]: Suspense fallback not found`);\r\n  }\r\n  const { isLoaded: isSuspenseLoaded } = useContext(SuspenseContext);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const trigger = useCallback(() => setIsLoaded(true), []);\r\n  const value = useMemo(() => ({ fallback, isLoaded, trigger }), [fallback, isLoaded]);\r\n\r\n  return SuspenseContext.Provider({\r\n    value,\r\n    slot: isSuspenseLoaded ? slot : null,\r\n  });\r\n});\r\n\r\nexport { SuspenseContext, Suspense };\r\n","import { type Component, createComponent, detectIsComponentFactory } from '../component';\r\nimport { useState } from '../use-state';\r\nimport { useEffect } from '../use-effect';\r\nimport { forwardRef } from '../ref';\r\nimport { SuspenseContext } from '../suspense';\r\nimport { useContext } from '../use-context';\r\n\r\nconst $$lazy = Symbol('lazy');\r\n\r\ntype LazyScope<P, R> = {\r\n  component: Component<P, R>;\r\n};\r\n\r\nfunction lazy<P, R = unknown>(dynamic: () => Promise<{ default: Component<P> }>) {\r\n  return forwardRef(\r\n    createComponent<P, R>(\r\n      (props, ref) => {\r\n        const { fallback, trigger } = useContext(SuspenseContext);\r\n        const [scope, setScope] = useState<LazyScope<P, R>>({\r\n          component: null,\r\n        });\r\n\r\n        useEffect(() => {\r\n          fetchModule(dynamic).then(component => {\r\n            setScope({ component });\r\n          });\r\n        }, []);\r\n\r\n        useEffect(() => {\r\n          if (!scope.component) return;\r\n          trigger();\r\n        }, [scope.component]);\r\n\r\n        return scope.component ? scope.component(props, ref) : fallback;\r\n      },\r\n      { token: $$lazy },\r\n    ),\r\n  );\r\n}\r\n\r\nconst detectIsLazy = (factory: unknown) => detectIsComponentFactory(factory) && factory.token === $$lazy;\r\n\r\nfunction fetchModule(dynamic: () => Promise<{ default: Component }>) {\r\n  return new Promise<Component>(resolve => {\r\n    dynamic().then(module => {\r\n      if (!module.default) {\r\n        throw new Error('[Dark]: lazy loaded component should be exported as default!');\r\n      }\r\n\r\n      resolve(module.default);\r\n    });\r\n  });\r\n}\r\n\r\nexport { lazy, detectIsLazy };\r\n","import { useState } from '../use-state';\r\nimport { useEffect } from '../use-effect';\r\nimport { TaskPriority } from '../constants';\r\n\r\ntype UseDeferredValueOprions = {\r\n  timeoutMs: number;\r\n};\r\n\r\nfunction useDeferredValue<T>(value: T, options?: UseDeferredValueOprions): T {\r\n  const { timeoutMs } = options || {};\r\n  const [deferredValue, setDeferredValue] = useState(value, {\r\n    priority: TaskPriority.LOW,\r\n    timeoutMs,\r\n  });\r\n\r\n  useEffect(() => {\r\n    setDeferredValue(value);\r\n  }, [value]);\r\n\r\n  return deferredValue;\r\n}\r\n\r\nexport { useDeferredValue };\r\n","import { currentFiberStore } from '../scope';\r\nimport { useEffect } from '../use-effect';\r\nimport { useUpdate } from '../use-update';\r\nimport { useMemo } from '../use-memo';\r\n\r\ntype ErrorScope = {\r\n  error: Error;\r\n};\r\n\r\nfunction useError(): Error | null {\r\n  const fiber = currentFiberStore.get();\r\n  const update = useUpdate();\r\n  const scope: ErrorScope = useMemo(() => ({ error: null }), []);\r\n\r\n  fiber.catchException = (error: Error) => {\r\n    scope.error = error;\r\n    update();\r\n  };\r\n\r\n  useEffect(() => {\r\n    scope.error = null;\r\n  }, [scope.error]);\r\n\r\n  return scope.error;\r\n}\r\n\r\nexport { useError };\r\n","import { useMemo } from '../use-memo';\r\nimport { useCallback } from '../use-callback';\r\n\r\nfunction useEvent<T extends (...args) => any>(fn: T) {\r\n  const scope = useMemo(() => ({ fn }), []);\r\n\r\n  scope.fn = fn;\r\n\r\n  const callback = useCallback((...args) => {\r\n    return scope.fn(...args);\r\n  }, []);\r\n\r\n  return callback as unknown as T;\r\n}\r\n\r\nexport { useEvent };\r\n","import { useMemo } from '../use-memo';\r\nimport type { MutableRef } from '../ref';\r\n\r\nfunction useImperativeHandle<T>(ref: MutableRef<T>, createHandle: () => T, deps: Array<any>) {\r\n  const current = useMemo(() => createHandle(), deps);\r\n\r\n  ref.current = current;\r\n}\r\n\r\nexport { useImperativeHandle };\r\n","import { useState } from '../use-state';\r\nimport { useCallback } from '../use-callback';\r\nimport { useMemo } from '../use-memo';\r\nimport { detectIsFunction } from '../helpers';\r\nimport type { Reducer, Dispatch, ReducerAction, ReducerState } from './types';\r\n\r\nfunction useReducer<R extends Reducer>(\r\n  reducer: R,\r\n  initialState: ReducerState<R>,\r\n  initializer?: (state: ReducerState<R>) => ReducerState<R>,\r\n): [ReducerState<R>, Dispatch<ReducerAction<R>>] {\r\n  const initialValue = useMemo(() => {\r\n    return detectIsFunction(initializer) ? initializer(initialState) : initialState;\r\n  }, []);\r\n  const [state, setState] = useState<ReducerState<R>>(initialValue);\r\n  const dispatch = useCallback((action: ReducerAction<R>) => setState(state => reducer(state, action)), []) as Dispatch<\r\n    ReducerAction<R>\r\n  >;\r\n\r\n  return [state, dispatch];\r\n}\r\n\r\nexport { useReducer };\r\n","import { useMemo } from '../use-memo';\r\nimport type { MutableRef } from '../ref';\r\n\r\nfunction useRef<T>(initialValue: T = null): MutableRef<T> {\r\n  const ref = useMemo(() => ({ current: initialValue }), []) as MutableRef<T>;\r\n\r\n  return ref;\r\n}\r\n\r\nexport { useRef };\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","TaskPriority","ROOT","EMPTY_NODE","ATTR_KEY","ATTR_REF","PARTIAL_UPDATE","detectIsFunction","detectIsUndefined","detectIsNumber","detectIsString","detectIsObject","detectIsBoolean","detectIsArray","Array","isArray","detectIsNull","detectIsEmpty","error","str","console","flatten","source","list","levelMap","idx","level","item","length","push","getTime","Date","now","keyBy","fn","reduce","acc","x","takeListFromEnd","count","slice","dummyFn","detectIsDepsDifferent","deps","prevDeps","i","defaultOptions","displayName","defaultProps","token","options","children","this","type","props","ref","shouldUpdate","createComponent","createElement","computedOptions","computedProps","ComponentFactory","NodeType","detectIsComponentFactory","getComponentFactoryKey","rootId","stores","Map","wipRoot","currentRoot","nextUnitOfWork","events","unsubscribers","deletions","fiberMount","navigation","isDeepWalking","componentFiber","effects","layoutEffects","isLayoutEffectsZone","isUpdateHookZone","isBatchZone","rootStore","set","id","Store","remove","delete","getRootId","store","wipRootStore","fiber","currentRootStore","nextUnitOfWorkStore","currentFiberStore","eventsStore","addUnsubscriber","unsubscribe","forEach","deletionsStore","fiberMountStore","reset","getIndex","jumpToChild","nextLevel","jumpToParent","jumpToSibling","deepWalking","effectsStore","add","effect","layoutEffectsStore","createEffect","useEffect","hasEffects","dropEffects","hook","values","runEffect","undefined","cleanup","some","$$virtualNode","TAG","name","isVoid","attrs","VirtualNode","text","TEXT","COMMENT","detectIsVirtualNode","vNode","detectIsTagVirtualNode","TagVirtualNode","detectIsCommentVirtualNode","CommentVirtualNode","detectIsTextVirtualNode","TextVirtualNode","detectIsEmptyVirtualNode","getVirtualNodeKey","createEmptyVirtualNode","detectIsVirtualNodeFactory","View","def","as","slot","rest","Text","Comment","$$fragment","Fragment","detectIsFragment","forwardRef","component","detectIsRef","mutableRef","$$memo","defaultShouldUpdate","nextProps","keys","detectIsMemo","memo","Memo","processValue","getValue","isDepsDifferent","check","wrap","useMemo","hookValue","computedGetValue","EffectTag","platform","createNativeElement","Error","requestAnimationFrame","scheduleCallback","shouldYeildToHost","applyCommit","finishCommitWork","detectIsPortal","unmountPortal","cloneTagMap","CREATE","SKIP","useLayoutEffect","hasLayoutEffects","dropLayoutEffects","walkFiber","onLoop","nextFiber","isReturn","isStopped","visitedMap","detectCanVisit","resetIsDeepWalking","stop","child","newFiber","nextSibling","parent","unmountFiber","effectHost","layoutEffectHost","portalHost","transposition","instance","unmountRoot","onComplete","nativeElement","alternate","effectTag","shadow","provider","mountedToHost","childrenCount","marker","isUsed","batched","markPortalHost","markEffectHost","markLayoutEffectHost","markMountedToHost","setError","catchException","workLoop","wipFiber","shouldYield","hasMoreWork","Boolean","performUnitOfWork","setTimeout","commitWork","commitChanges","hasChildrenProp","performChild","performedFiber","performSibling","performPartialUpdateEffects","DELETE","getChildAlternate","getHook","Fiber","pertformInstance","mutateAlternate","mutateFiber","performMemo","performedNextFiber","performedShadow","performedInstance","childrenIdx","getNextSiblingAlternate","isDifferentKeys","getElementKey","isUpdate","getInstanceType","UPDATE","alternateType","isSameType","isSameKeys","prevKeys","nextKeys","nextKey","extractKeys","diffKeys","getDiffKeys","fibersMap","map","createFibersByKeyMap","diffCount","fibers","getSiblingFibers","performRemoving","diffKeyMap","usedKeyMap","keyIdx","insertionFiber","getFibersByIdx","prevFiber","performInserting","memoFiber","alternateFactory","elements","splice","getAlternateByKey","getRootShadow","mountInstance","isComponentFactory","result","err","transformElementInstance","position","nextKeysMap","diff","element","createHook","createUpdateCallback","forceStart","onStart","batch","callback","useUpdate","scope","timeoutMs","forceSync","update","size","useContext","context","defaultValue","getProvider","prevValue","hasProvider","subscriber","newValue","is","subscribers","findIndex","createContext","Provider","Consumer","mutateContext","createProvider","createConsumer","getChildren","toString","tag","useCallback","useState","initialValue","setState","sourceValue","priority","LOW","SuspenseContext","fallback","isLoaded","trigger","Suspense","isSuspenseLoaded","setIsLoaded","$$lazy","lazy","dynamic","setScope","Promise","resolve","then","default","fetchModule","detectIsLazy","useDeferredValue","deferredValue","setDeferredValue","useError","useEvent","args","useImperativeHandle","createHandle","current","useReducer","reducer","initialState","initializer","state","dispatch","action","useRef"],"sourceRoot":""}