{"version":3,"file":"dark-core.production.min.js","mappings":"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","sources":["webpack://DarkCore/webpack/universalModuleDefinition","webpack://DarkCore/webpack/bootstrap","webpack://DarkCore/webpack/runtime/define property getters","webpack://DarkCore/webpack/runtime/hasOwnProperty shorthand","webpack://DarkCore/webpack/runtime/make namespace object","webpack://DarkCore/./src/constants.ts","webpack://DarkCore/./src/helpers/index.ts","webpack://DarkCore/./src/component/component.ts","webpack://DarkCore/./src/scope/scope.ts","webpack://DarkCore/./src/shared/index.ts","webpack://DarkCore/./src/view/model.ts","webpack://DarkCore/./src/use-effect/use-effect.ts","webpack://DarkCore/./src/view/view.ts","webpack://DarkCore/./src/ref/ref.ts","webpack://DarkCore/./src/memo/memo.ts","webpack://DarkCore/./src/use-memo/use-memo.ts","webpack://DarkCore/./src/global/global.ts","webpack://DarkCore/./src/fiber/model.ts","webpack://DarkCore/./src/fiber/fiber.ts","webpack://DarkCore/./src/use-update/use-update.ts","webpack://DarkCore/./src/use-context/use-context.ts","webpack://DarkCore/./src/context/context.ts","webpack://DarkCore/./src/element/element.ts","webpack://DarkCore/./src/fragment/fragment.ts","webpack://DarkCore/./src/use-callback/use-callback.ts","webpack://DarkCore/./src/use-state/use-state.ts","webpack://DarkCore/./src/suspense/suspense.ts","webpack://DarkCore/./src/lazy/lazy.ts","webpack://DarkCore/./src/use-error/use-error.ts","webpack://DarkCore/./src/use-imperative-handle/use-imperative-handle.ts","webpack://DarkCore/./src/use-reducer/use-reducer.ts","webpack://DarkCore/./src/use-ref/use-ref.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"DarkCore\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"DarkCore\"] = factory();\n\telse\n\t\troot[\"DarkCore\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const ROOT = 'root';\r\nexport const EMPTY_NODE = 'dark:matter';\r\nexport const ATTR_KEY = 'key';\r\nexport const ATTR_REF = 'ref';\r\nexport const PARTIAL_UPDATE = 'partial-update';\r\n\r\nexport enum TaskPriority {\r\n  HIGH = 2,\r\n  NORMAL = 1,\r\n  LOW = 0,\r\n}\r\n","import type { NestedArray } from '../shared';\r\n\r\nconst detectIsFunction = (o: any): o is Function => typeof o === 'function';\r\nconst detectIsUndefined = (o: any) => typeof o === 'undefined';\r\nconst detectIsNumber = (o: any) => typeof o === 'number';\r\nconst detectIsString = (o: any) => typeof o === 'string';\r\nconst detectIsObject = (o: any) => typeof o === 'object';\r\nconst detectIsBoolean = (o: any) => typeof o === 'boolean';\r\nconst detectIsArray = (o: any): o is Array<any> => Array.isArray(o);\r\nconst detectIsNull = (o: any) => o === null;\r\nconst detectIsEmpty = (o: any) => detectIsNull(o) || detectIsUndefined(o);\r\n\r\nfunction error(str: string) {\r\n  !detectIsUndefined(console) && console.error(str);\r\n}\r\n\r\nfunction flatten<T = any>(source: Array<NestedArray<T>>): Array<T> {\r\n  const list = [];\r\n  const levelMap = { 0: { idx: 0, source } };\r\n  let level = 0;\r\n\r\n  do {\r\n    const { source, idx } = levelMap[level];\r\n    const item = source[idx];\r\n\r\n    if (idx >= source.length) {\r\n      level--;\r\n      levelMap[level].idx++;\r\n      continue;\r\n    }\r\n\r\n    if (detectIsArray(item)) {\r\n      level++;\r\n      levelMap[level] = {\r\n        idx: 0,\r\n        source: item,\r\n      };\r\n    } else {\r\n      list.push(item);\r\n      levelMap[level].idx++;\r\n    }\r\n  } while (level > 0 || levelMap[level].idx < levelMap[level].source.length);\r\n\r\n  return list;\r\n}\r\n\r\nfunction getTime() {\r\n  return performance.now();\r\n}\r\n\r\nfunction keyBy<T = any>(\r\n  list: Array<T>,\r\n  fn: (o: T) => string | number,\r\n  value = false,\r\n): Record<string | number, T | boolean> {\r\n  return list.reduce((acc, x) => ((acc[fn(x)] = value ? x : true), acc), {});\r\n}\r\n\r\nfunction takeListFromEnd(source: Array<any>, count: number) {\r\n  return source.slice(source.length - count, source.length);\r\n}\r\n\r\nexport {\r\n  detectIsFunction,\r\n  detectIsUndefined,\r\n  detectIsNumber,\r\n  detectIsString,\r\n  detectIsObject,\r\n  detectIsBoolean,\r\n  detectIsArray,\r\n  detectIsNull,\r\n  detectIsEmpty,\r\n  error,\r\n  flatten,\r\n  getTime,\r\n  keyBy,\r\n  takeListFromEnd,\r\n};\r\n","import { ATTR_KEY } from '../constants';\r\nimport { error, detectIsEmpty } from '../helpers';\r\nimport type { DarkElementKey, DarkElementInstance } from '../shared/model';\r\nimport type { MutableRef } from '../ref';\r\nimport type { CreateElement, ComponentOptions, StandardComponentProps, SlotProps } from './model';\r\n\r\nconst $$component = Symbol('component');\r\nconst defaultOptions: ComponentOptions<any> = {\r\n  displayName: '',\r\n  defaultProps: {},\r\n  token: $$component,\r\n};\r\nclass ComponentFactory<P extends StandardComponentProps = any, R = any> {\r\n  public type: CreateElement<P>;\r\n  public token: Symbol;\r\n  public props: P;\r\n  public ref: MutableRef<R>;\r\n  public displayName: string;\r\n  public children: Array<DarkElementInstance> = [];\r\n  public shouldUpdate?: (props: P, nextProps: P) => boolean;\r\n\r\n  constructor(options: ComponentFactory<P>) {\r\n    this.type = options.type || null;\r\n    this.token = options.token || null;\r\n    this.props = options.props || null;\r\n    this.ref = options.ref || null;\r\n    this.displayName = options.displayName || '';\r\n    this.shouldUpdate = options.shouldUpdate || null;\r\n  }\r\n}\r\n\r\nfunction createComponent<P, R = any>(\r\n  createElement: CreateElement<P & SlotProps, R>,\r\n  options: ComponentOptions<P> = {},\r\n) {\r\n  type Props = P & StandardComponentProps;\r\n  const computedOptions = { ...defaultOptions, ...options };\r\n  const { token, defaultProps, displayName, shouldUpdate } = computedOptions;\r\n\r\n  return (props = {} as Props, ref?: MutableRef<R>): ComponentFactory<Props> => {\r\n    const computedProps = { ...defaultProps, ...props };\r\n    const factory = new ComponentFactory({\r\n      token,\r\n      ref,\r\n      displayName,\r\n      shouldUpdate,\r\n      props: computedProps,\r\n      type: createElement,\r\n      children: [],\r\n    });\r\n\r\n    if (computedProps.ref) {\r\n      delete computedProps.ref;\r\n\r\n      if (process.env.NODE_ENV === 'development') {\r\n        error(`[Dark]: To use ref you need to wrap the createComponent with forwardRef!`);\r\n      }\r\n    }\r\n\r\n    return factory;\r\n  };\r\n}\r\n\r\nconst detectIsComponentFactory = (factory: unknown): factory is ComponentFactory => factory instanceof ComponentFactory;\r\n\r\nconst getComponentFactoryKey = (factory: ComponentFactory): DarkElementKey =>\r\n  !detectIsEmpty(factory.props[ATTR_KEY]) ? factory.props[ATTR_KEY] : null;\r\n\r\nexport { ComponentFactory, createComponent, detectIsComponentFactory, getComponentFactoryKey };\r\n","import type { Fiber } from '../fiber';\r\n\r\nclass Store {\r\n  public wipRoot: Fiber = null;\r\n  public currentRoot: Fiber = null;\r\n  public nextUnitOfWork: Fiber = null;\r\n  public fromHookUpdate = false;\r\n  public events: Map<string, WeakMap<object, Function>> = new Map();\r\n  public deletions: Array<Fiber> = [];\r\n  public fiberMount = {\r\n    level: 0,\r\n    navigation: {},\r\n    isDeepWalking: true,\r\n  };\r\n  public componentFiber: Fiber = null;\r\n  public effects: Array<() => void> = [];\r\n}\r\n\r\nlet rootId = null;\r\nconst stores = new Map<number, Store>();\r\n\r\nconst effectStoreHelper = {\r\n  set: (id: number) => effectStore(id),\r\n};\r\n\r\nconst getRootId = (): number => rootId;\r\n\r\nconst effectStore = (id: number) => {\r\n  rootId = id;\r\n  !stores.get(rootId) && stores.set(rootId, new Store());\r\n};\r\n\r\nconst storeHelper = {\r\n  get: (id: number = rootId) => stores.get(id),\r\n};\r\n\r\nconst wipRootHelper = {\r\n  get: () => storeHelper.get()?.wipRoot || null,\r\n  set: (fiber: Fiber) => (storeHelper.get().wipRoot = fiber),\r\n};\r\n\r\nconst currentRootHelper = {\r\n  get: () => storeHelper.get()?.currentRoot || null,\r\n  set: (fiber: Fiber) => (storeHelper.get().currentRoot = fiber),\r\n};\r\n\r\nconst nextUnitOfWorkHelper = {\r\n  get: () => storeHelper.get()?.nextUnitOfWork || null,\r\n  set: (fiber: Fiber) => (storeHelper.get().nextUnitOfWork = fiber),\r\n};\r\n\r\nconst componentFiberHelper = {\r\n  get: () => storeHelper.get()?.componentFiber,\r\n  set: (fiber: Fiber) => (storeHelper.get().componentFiber = fiber),\r\n};\r\n\r\nconst fromHookUpdateHelper = {\r\n  get: () => storeHelper.get()?.fromHookUpdate || false,\r\n  set: (value: boolean) => (storeHelper.get().fromHookUpdate = value),\r\n};\r\n\r\nconst eventsHelper = {\r\n  get: () => storeHelper.get().events,\r\n};\r\n\r\nconst deletionsHelper = {\r\n  get: () => storeHelper.get().deletions,\r\n  set: (deletions: Array<Fiber>) => (storeHelper.get().deletions = deletions),\r\n};\r\n\r\nconst fiberMountHelper = {\r\n  reset: () => {\r\n    storeHelper.get().fiberMount = {\r\n      level: 0,\r\n      navigation: {},\r\n      isDeepWalking: true,\r\n    };\r\n  },\r\n  getIndex: () => storeHelper.get().fiberMount.navigation[storeHelper.get().fiberMount.level],\r\n  jumpToChild: () => {\r\n    const { fiberMount } = storeHelper.get();\r\n    const level = fiberMount.level;\r\n    const nextLevel = level + 1;\r\n\r\n    fiberMount.level = nextLevel;\r\n    fiberMount.navigation[nextLevel] = 0;\r\n  },\r\n  jumpToParent: () => {\r\n    const { fiberMount } = storeHelper.get();\r\n    const level = fiberMount.level;\r\n    const nextLevel = level - 1;\r\n\r\n    fiberMount.navigation[level] = 0;\r\n    fiberMount.level = nextLevel;\r\n  },\r\n  jumpToSibling: () => {\r\n    const { fiberMount } = storeHelper.get();\r\n    const level = fiberMount.level;\r\n    const idx = fiberMount.navigation[level] + 1;\r\n\r\n    fiberMount.navigation[level] = idx;\r\n  },\r\n  deepWalking: {\r\n    get: () => storeHelper.get().fiberMount.isDeepWalking,\r\n    set: (value: boolean) => (storeHelper.get().fiberMount.isDeepWalking = value),\r\n  },\r\n};\r\n\r\nconst effectsHelper = {\r\n  get: () => storeHelper.get().effects,\r\n  reset: () => (storeHelper.get().effects = []),\r\n  add: (effect: () => void) => storeHelper.get().effects.push(effect),\r\n};\r\n\r\nexport {\r\n  getRootId,\r\n  effectStoreHelper,\r\n  wipRootHelper,\r\n  currentRootHelper,\r\n  nextUnitOfWorkHelper,\r\n  componentFiberHelper,\r\n  fromHookUpdateHelper,\r\n  eventsHelper,\r\n  deletionsHelper,\r\n  fiberMountHelper,\r\n  effectsHelper,\r\n};\r\n","import { detectIsUndefined } from '@dark-engine/core/helpers';\r\n\r\nfunction detectIsDepsDifferent(deps: Array<unknown>, prevDeps: Array<unknown>): boolean {\r\n  if (!detectIsUndefined(deps) && !detectIsUndefined(prevDeps) && deps.length > 0 && prevDeps.length > 0) {\r\n    for (let i = 0; i < prevDeps.length; i++) {\r\n      if (prevDeps[i] !== deps[i]) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport * from './model';\r\nexport { detectIsDepsDifferent };\r\n","export type ViewDef = {\r\n  as: string;\r\n  slot?: any;\r\n  isVoid?: boolean;\r\n  [prop: string]: any;\r\n};\r\n\r\nexport enum NodeType {\r\n  TAG = 'TAG',\r\n  TEXT = 'TEXT',\r\n  COMMENT = 'COMMENT',\r\n}\r\n","import { detectIsUndefined, detectIsFunction } from '../helpers';\r\nimport { componentFiberHelper, effectsHelper } from '../scope';\r\nimport type { Hook, HookValue } from '../fiber';\r\nimport { detectIsDepsDifferent } from '../shared';\r\nimport type { Effect, EffectCleanup } from './model';\r\n\r\nconst $$useEffect = Symbol('use-effect');\r\n\r\nfunction useEffect(effect: Effect, deps?: Array<any>) {\r\n  const fiber = componentFiberHelper.get();\r\n  const hook = fiber.hook as Hook<HookValue<EffectCleanup>>;\r\n  const { idx, values } = hook;\r\n  const runEffect = () => {\r\n    values[idx] = {\r\n      deps,\r\n      value: undefined,\r\n      token: $$useEffect,\r\n    };\r\n    const run = () => {\r\n      values[idx].value = effect();\r\n    };\r\n\r\n    effectsHelper.add(() => setTimeout(run));\r\n  };\r\n\r\n  if (detectIsUndefined(values[idx])) {\r\n    runEffect();\r\n  } else {\r\n    const { deps: prevDeps, value: cleanup } = values[idx];\r\n    const isDepsDifferent = deps ? detectIsDepsDifferent(deps, prevDeps) : true;\r\n\r\n    if (isDepsDifferent) {\r\n      detectIsFunction(cleanup) && cleanup();\r\n      runEffect();\r\n    }\r\n  }\r\n\r\n  hook.idx++;\r\n}\r\n\r\nfunction runEffectCleanup(hook: Hook<HookValue<EffectCleanup>>) {\r\n  const { values } = hook;\r\n\r\n  for (const hookValue of values) {\r\n    if (hookValue.token === $$useEffect) {\r\n      const cleanup = hookValue.value;\r\n\r\n      detectIsFunction(cleanup) && cleanup();\r\n    }\r\n  }\r\n}\r\n\r\nexport { useEffect, runEffectCleanup };\r\n","import { EMPTY_NODE, ATTR_KEY } from '../constants';\r\nimport { detectIsArray, detectIsEmpty, detectIsFunction } from '../helpers';\r\nimport type { DarkElementKey } from '../shared/model';\r\nimport type { ComponentFactory, StandardComponentProps } from '../component';\r\nimport { NodeType, type ViewDef } from './model';\r\n\r\nexport type VirtualNodeFactory = () => VirtualNode;\r\nexport type TagVirtualNodeFactory = () => TagVirtualNode;\r\nexport type TextVirtualNodeFactory = () => TextVirtualNode;\r\nexport type CommentVirtualNodeFactory = () => CommentVirtualNode;\r\n\r\nconst $$virtualNode = Symbol('virtual-node');\r\n\r\nclass VirtualNode {\r\n  public type: NodeType = null;\r\n\r\n  constructor(options: Partial<VirtualNode>) {\r\n    this.type = options.type;\r\n  }\r\n}\r\n\r\nclass TagVirtualNode extends VirtualNode {\r\n  public type = NodeType.TAG;\r\n  public name: string = null;\r\n  public isVoid = false;\r\n  public attrs: Record<string, any> = {};\r\n  public children: Array<VirtualNodeFactory | ComponentFactory> = [];\r\n\r\n  constructor(options: Partial<TagVirtualNode>) {\r\n    super(options);\r\n    this.name = options.name || this.name;\r\n    this.isVoid = options.isVoid || this.isVoid;\r\n    this.attrs = options.attrs || this.attrs;\r\n    this.children = options.children || this.children;\r\n  }\r\n}\r\n\r\nclass TextVirtualNode extends VirtualNode {\r\n  public type = NodeType.TEXT;\r\n  public value = '';\r\n\r\n  constructor(text: string) {\r\n    super({});\r\n    this.value = text;\r\n  }\r\n}\r\n\r\nclass CommentVirtualNode extends VirtualNode {\r\n  public type = NodeType.COMMENT;\r\n  public value = '';\r\n\r\n  constructor(text: string) {\r\n    super({});\r\n    this.value = text;\r\n  }\r\n}\r\n\r\nconst detectIsVirtualNode = (vNode: unknown): vNode is VirtualNode => vNode instanceof VirtualNode;\r\nconst detectIsTagVirtualNode = (vNode: unknown): vNode is TagVirtualNode => vNode instanceof TagVirtualNode;\r\nconst detectIsCommentVirtualNode = (vNode: unknown): vNode is CommentVirtualNode => vNode instanceof CommentVirtualNode;\r\nconst detectIsTextVirtualNode = (vNode: unknown): vNode is TextVirtualNode => vNode instanceof TextVirtualNode;\r\nconst detectIsEmptyVirtualNode = (vNode: CommentVirtualNode): boolean =>\r\n  detectIsCommentVirtualNode(vNode) && vNode.value === EMPTY_NODE;\r\n\r\nfunction getVirtualNodeKey(vNode: TagVirtualNode): DarkElementKey | null {\r\n  const key = vNode && vNode.attrs[ATTR_KEY];\r\n\r\n  return !detectIsEmpty(key) ? key : null;\r\n}\r\n\r\nfunction Text(source: string | StandardComponentProps['slot']): string | TextVirtualNode {\r\n  const text =\r\n    typeof source === 'string' ? new TextVirtualNode(source) : detectIsTextVirtualNode(source) ? source.value : '';\r\n\r\n  return text;\r\n}\r\n\r\nfunction Comment(text: string): CommentVirtualNodeFactory {\r\n  const factory = () => new CommentVirtualNode(text);\r\n\r\n  factory[$$virtualNode] = true;\r\n\r\n  return factory;\r\n}\r\n\r\nfunction View(def: ViewDef): TagVirtualNodeFactory {\r\n  const factory = () => {\r\n    const { as, slot, isVoid = false, ...rest } = def;\r\n    const children = isVoid ? [] : detectIsArray(slot) ? slot : slot ? [slot] : [];\r\n\r\n    return new TagVirtualNode({\r\n      name: as,\r\n      isVoid,\r\n      attrs: { ...rest },\r\n      children: children as Array<VirtualNodeFactory>,\r\n    });\r\n  };\r\n\r\n  factory[$$virtualNode] = true;\r\n\r\n  return factory;\r\n}\r\n\r\nconst createEmptyVirtualNode = () => new CommentVirtualNode(EMPTY_NODE);\r\n\r\nconst detectIsVirtualNodeFactory = (factory: unknown): factory is VirtualNodeFactory =>\r\n  detectIsFunction(factory) && factory[$$virtualNode] === true;\r\n\r\nexport {\r\n  VirtualNode,\r\n  TagVirtualNode,\r\n  TextVirtualNode,\r\n  CommentVirtualNode,\r\n  detectIsVirtualNode,\r\n  detectIsTagVirtualNode,\r\n  detectIsCommentVirtualNode,\r\n  detectIsTextVirtualNode,\r\n  detectIsEmptyVirtualNode,\r\n  getVirtualNodeKey,\r\n  Text,\r\n  Comment,\r\n  View,\r\n  createEmptyVirtualNode,\r\n  detectIsVirtualNodeFactory,\r\n};\r\n","import { detectIsObject, detectIsNull } from '../helpers';\r\nimport type { Component, RefProps, ComponentFactory } from '../component';\r\nimport type { MutableRef } from './model';\r\n\r\nfunction forwardRef<P, R>(component: Component<P, R>) {\r\n  type Props = P & RefProps<R>;\r\n\r\n  return ({ ref, ...rest }: Props) => {\r\n    return component(rest as P, ref) as ComponentFactory<P, R>;\r\n  };\r\n}\r\n\r\nconst detectIsRef = (ref: unknown) => {\r\n  if (!detectIsObject(ref) || detectIsNull(ref)) return false;\r\n  const mutableRef = ref as MutableRef;\r\n\r\n  for (const key in mutableRef) {\r\n    if (key === 'current' && mutableRef.hasOwnProperty(key)) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nexport { forwardRef, detectIsRef };\r\n","import {\r\n  type Component,\r\n  type ComponentFactory,\r\n  type StandardComponentProps,\r\n  type RefProps,\r\n  type SlotProps,\r\n  createComponent,\r\n  detectIsComponentFactory,\r\n} from '../component';\r\nimport { type MutableRef, forwardRef } from '../ref';\r\n\r\ntype ShouldUpdate<T> = (props: T, nextProps: T) => boolean;\r\n\r\nconst $$memo = Symbol('memo');\r\n\r\nconst defaultShouldUpdate = (props: {}, nextProps: {}): boolean => {\r\n  const keys = Object.keys(nextProps);\r\n\r\n  for (const key of keys) {\r\n    if (key !== 'slot' && nextProps[key] !== props[key]) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst detectIsMemo = (factory: unknown) => detectIsComponentFactory(factory) && factory.token === $$memo;\r\n\r\nfunction memo<T>(\r\n  component: (props: T, ref?: MutableRef<unknown>) => ComponentFactory<T, unknown>,\r\n  shouldUpdate: ShouldUpdate<T & SlotProps> = defaultShouldUpdate,\r\n): Component<T & StandardComponentProps> {\r\n  return forwardRef(\r\n    createComponent(\r\n      (props: T & RefProps, ref) => {\r\n        ref && (props.ref = ref);\r\n\r\n        return component(props);\r\n      },\r\n      { token: $$memo, shouldUpdate },\r\n    ),\r\n  );\r\n}\r\n\r\nexport { $$memo, memo, detectIsMemo };\r\n","import { detectIsUndefined, detectIsArray } from '../helpers';\r\nimport { detectIsComponentFactory, createComponent } from '../component';\r\nimport { detectIsTagVirtualNode } from '../view';\r\nimport { componentFiberHelper } from '../scope';\r\nimport { detectIsDepsDifferent } from '../shared';\r\nimport { $$memo } from '../memo';\r\n\r\nconst Memo = createComponent(({ slot }) => slot, { token: $$memo });\r\n\r\nfunction wrap(value: unknown, isDepsDifferent: boolean) {\r\n  if (detectIsTagVirtualNode(value) || detectIsComponentFactory(value)) {\r\n    const factory = Memo({ slot: value });\r\n\r\n    factory.shouldUpdate = () => isDepsDifferent;\r\n\r\n    return factory;\r\n  }\r\n\r\n  return value;\r\n}\r\n\r\nfunction processValue(getValue: () => any, isDepsDifferent = false) {\r\n  let value = getValue();\r\n\r\n  if (detectIsArray(value)) {\r\n    value = value.map(x => wrap(x, isDepsDifferent));\r\n  } else {\r\n    value = wrap(value, isDepsDifferent);\r\n  }\r\n\r\n  return value;\r\n}\r\n\r\nfunction useMemo<T>(getValue: () => T, deps: Array<any>): T {\r\n  const fiber = componentFiberHelper.get();\r\n  const { hook } = fiber;\r\n  const { idx, values } = hook;\r\n\r\n  if (detectIsUndefined(values[idx])) {\r\n    const value = processValue(getValue);\r\n\r\n    values[idx] = {\r\n      deps,\r\n      value,\r\n    };\r\n\r\n    hook.idx++;\r\n\r\n    return value;\r\n  }\r\n\r\n  const hookValue = values[idx];\r\n  const prevDeps = hookValue.deps as Array<any>;\r\n  const isDepsDifferent = detectIsDepsDifferent(deps, prevDeps);\r\n  const computedGetValue = isDepsDifferent ? getValue : () => hookValue.value;\r\n\r\n  hookValue.deps = deps;\r\n  hookValue.value = processValue(computedGetValue, isDepsDifferent);\r\n  hook.idx++;\r\n\r\n  return hookValue.value;\r\n}\r\n\r\nexport { useMemo };\r\n","import type { Platform } from './model';\r\n\r\nexport const platform: Platform = {\r\n  scheduleCallback: () => {\r\n    throw new Error('scheduleCallback not installed by renderer');\r\n  },\r\n  shouldYeildToHost: () => {\r\n    throw new Error('shouldYeildToHost not installed by renderer');\r\n  },\r\n  createNativeElement: () => {\r\n    throw new Error('createNativeElement not installed by renderer');\r\n  },\r\n  applyCommits: () => {\r\n    throw new Error('applyCommits not installed by renderer');\r\n  },\r\n  detectIsPortal: () => {\r\n    throw new Error('detectIsPortal not installed by renderer');\r\n  },\r\n  unmountPortal: () => {\r\n    throw new Error('unmountPortal not installed by renderer');\r\n  },\r\n};\r\n","export enum EffectTag {\r\n  PLACEMENT = 'PLACEMENT',\r\n  UPDATE = 'UPDATE',\r\n  DELETION = 'DELETION',\r\n  SKIP = 'SKIP',\r\n}\r\n\r\nexport type NativeElement = unknown;\r\n\r\nexport type HookValue<T = any> = {\r\n  token?: Symbol;\r\n  deps: Array<any>;\r\n  value: T;\r\n};\r\n\r\nexport type Hook<T = any> = {\r\n  idx: number;\r\n  values: Array<T>;\r\n};\r\n\r\nexport const cloneTagMap = {\r\n  [EffectTag.PLACEMENT]: true,\r\n  [EffectTag.SKIP]: true,\r\n};\r\n","import { flatten, detectIsEmpty, error, keyBy, takeListFromEnd, detectIsUndefined, detectIsArray } from '../helpers';\r\nimport { platform } from '../global';\r\nimport {\r\n  wipRootHelper,\r\n  currentRootHelper,\r\n  nextUnitOfWorkHelper,\r\n  deletionsHelper,\r\n  fiberMountHelper,\r\n  componentFiberHelper,\r\n  fromHookUpdateHelper,\r\n  effectStoreHelper,\r\n  effectsHelper,\r\n} from '../scope';\r\nimport { type ComponentFactory, detectIsComponentFactory, getComponentFactoryKey } from '../component';\r\nimport {\r\n  type TagVirtualNode,\r\n  detectIsTagVirtualNode,\r\n  createEmptyVirtualNode,\r\n  getVirtualNodeKey,\r\n  detectIsVirtualNode,\r\n  detectIsVirtualNodeFactory,\r\n} from '../view';\r\nimport { detectIsMemo } from '../memo';\r\nimport type { Context, ContextProviderValue } from '../context/model';\r\nimport type { DarkElementKey, DarkElement, DarkElementInstance } from '../shared/model';\r\nimport { PARTIAL_UPDATE } from '../constants';\r\nimport { type NativeElement, type Hook, EffectTag, cloneTagMap } from './model';\r\n\r\nclass Fiber<N = NativeElement> {\r\n  public nativeElement: N;\r\n  public parent: Fiber<N>;\r\n  public child: Fiber<N>;\r\n  public nextSibling: Fiber<N>;\r\n  public alternate: Fiber<N>;\r\n  public effectTag: EffectTag;\r\n  public instance: DarkElementInstance;\r\n  public hook: Hook;\r\n  public shadow: Fiber<N>;\r\n  public provider: Map<Context, ContextProviderValue>;\r\n  public transposition: boolean;\r\n  public mountedToHost: boolean;\r\n  public portalHost: boolean;\r\n  public childrenCount: number;\r\n  public marker: string;\r\n  public isUsed: boolean;\r\n  public catchException: (error: Error) => void;\r\n\r\n  constructor(options: Partial<Fiber<N>>) {\r\n    this.nativeElement = options.nativeElement || null;\r\n    this.parent = options.parent || null;\r\n    this.child = options.child || null;\r\n    this.nextSibling = options.nextSibling || null;\r\n    this.alternate = options.alternate || null;\r\n    this.effectTag = options.effectTag || null;\r\n    this.instance = options.instance || null;\r\n    this.hook = options.hook || createHook();\r\n    this.shadow = options.shadow || null;\r\n    this.provider = options.provider || null;\r\n    this.transposition = !detectIsUndefined(options.transposition) ? options.transposition : false;\r\n    this.mountedToHost = !detectIsUndefined(options.mountedToHost) || false;\r\n    this.portalHost = !detectIsUndefined(options.portalHost) ? options.portalHost : false;\r\n    this.childrenCount = options.childrenCount || 0;\r\n    this.marker = options.marker || '';\r\n    this.isUsed = options.isUsed || false;\r\n  }\r\n\r\n  public markPortalHost() {\r\n    this.portalHost = true;\r\n    this.parent && !this.parent.portalHost && this.parent.markPortalHost();\r\n  }\r\n\r\n  public setError(error: Error) {\r\n    if (typeof this.catchException === 'function') {\r\n      this.catchException(error);\r\n    } else if (this.parent) {\r\n      this.parent.setError(error);\r\n    }\r\n  }\r\n}\r\n\r\nfunction workLoop() {\r\n  const wipFiber = wipRootHelper.get();\r\n  let nextUnitOfWork = nextUnitOfWorkHelper.get();\r\n  let shouldYield = false;\r\n  let hasMoreWork = Boolean(nextUnitOfWork);\r\n\r\n  while (nextUnitOfWork && !shouldYield) {\r\n    nextUnitOfWork = performUnitOfWork(nextUnitOfWork);\r\n    nextUnitOfWorkHelper.set(nextUnitOfWork);\r\n    hasMoreWork = Boolean(nextUnitOfWork);\r\n    shouldYield = platform.shouldYeildToHost();\r\n  }\r\n\r\n  if (!nextUnitOfWork && wipFiber) {\r\n    commitChanges();\r\n  }\r\n\r\n  return hasMoreWork;\r\n}\r\n\r\nfunction performUnitOfWork(fiber: Fiber) {\r\n  let isDeepWalking = true;\r\n  let nextFiber = fiber;\r\n  let shadow: Fiber = fiber.shadow;\r\n  let instance = fiber.instance;\r\n\r\n  while (true) {\r\n    isDeepWalking = fiberMountHelper.deepWalking.get();\r\n    nextFiber.hook.idx = 0;\r\n\r\n    if (isDeepWalking) {\r\n      const hasChildren = hasChildrenProp(instance) && instance.children.length > 0;\r\n\r\n      if (hasChildren) {\r\n        const { performedFiber, performedNextFiber, performedShadow, performedInstance } = performChild({\r\n          nextFiber,\r\n          shadow,\r\n          instance,\r\n        });\r\n\r\n        nextFiber = performedNextFiber;\r\n        shadow = performedShadow;\r\n        instance = performedInstance;\r\n\r\n        if (performedFiber) return performedFiber;\r\n      } else {\r\n        const { performedFiber, performedNextFiber, performedShadow, performedInstance } = performSibling({\r\n          nextFiber,\r\n          shadow,\r\n          instance,\r\n        });\r\n\r\n        nextFiber = performedNextFiber;\r\n        shadow = performedShadow;\r\n        instance = performedInstance;\r\n\r\n        if (performedFiber) return performedFiber;\r\n      }\r\n    } else {\r\n      const { performedFiber, performedNextFiber, performedShadow, performedInstance } = performSibling({\r\n        nextFiber,\r\n        shadow,\r\n        instance,\r\n      });\r\n\r\n      nextFiber = performedNextFiber;\r\n      shadow = performedShadow;\r\n      instance = performedInstance;\r\n\r\n      if (performedFiber) return performedFiber;\r\n    }\r\n\r\n    performPartialUpdateEffects(nextFiber);\r\n\r\n    if (nextFiber.parent === null) return null;\r\n  }\r\n}\r\n\r\nfunction performPartialUpdateEffects(nextFiber: Fiber) {\r\n  if (nextFiber.marker === PARTIAL_UPDATE) {\r\n    const alternate = nextFiber.child?.alternate || null;\r\n    const fiber = nextFiber.child || null;\r\n\r\n    if (alternate && fiber && alternate.nextSibling && !fiber.nextSibling) {\r\n      let nextFiber = alternate.nextSibling;\r\n      const deletions: Array<Fiber> = [];\r\n\r\n      while (nextFiber) {\r\n        nextFiber.effectTag = EffectTag.DELETION;\r\n        deletions.push(nextFiber);\r\n        nextFiber = nextFiber.nextSibling;\r\n      }\r\n\r\n      deletionsHelper.get().push(...deletions);\r\n    }\r\n  }\r\n}\r\n\r\ntype PerformChildOptions = {\r\n  nextFiber: Fiber;\r\n  shadow: Fiber;\r\n  instance: DarkElementInstance;\r\n};\r\n\r\nfunction performChild(options: PerformChildOptions) {\r\n  fiberMountHelper.jumpToChild();\r\n  let nextFiber = options.nextFiber;\r\n  let shadow = options.shadow;\r\n  let instance = options.instance;\r\n\r\n  shadow = shadow ? shadow.child : null;\r\n\r\n  const alternate = getChildAlternate(nextFiber);\r\n  const hook = shadow ? shadow.hook : alternate ? alternate.hook : createHook();\r\n  const provider = shadow ? shadow.provider : alternate ? alternate.provider : null;\r\n  let fiber = new Fiber({ hook, provider });\r\n\r\n  componentFiberHelper.set(fiber);\r\n  fiber.parent = nextFiber;\r\n\r\n  const { performedInstance, performedShadow } = pertformInstance({\r\n    instance,\r\n    idx: 0,\r\n    fiber,\r\n    alternate,\r\n  });\r\n  instance = performedInstance || instance;\r\n  shadow = performedShadow || shadow;\r\n  alternate && mutateAlternate({ fiber, alternate, instance });\r\n  mutateFiber({ fiber, alternate, instance });\r\n  fiber = alternate ? performMemo({ fiber, alternate, instance }) : fiber;\r\n\r\n  nextFiber.child = fiber;\r\n  fiber.parent = nextFiber;\r\n  fiber.shadow = shadow;\r\n  nextFiber = fiber;\r\n\r\n  cloneTagMap[fiber.parent.effectTag] && (fiber.effectTag = fiber.parent.effectTag);\r\n\r\n  return {\r\n    performedFiber: nextFiber,\r\n    performedNextFiber: nextFiber,\r\n    performedShadow: shadow,\r\n    performedInstance: instance,\r\n  };\r\n}\r\n\r\ntype PerformSiblingOptions = {\r\n  nextFiber: Fiber;\r\n  shadow: Fiber;\r\n  instance: DarkElementInstance;\r\n};\r\n\r\nfunction performSibling(options: PerformSiblingOptions) {\r\n  fiberMountHelper.jumpToSibling();\r\n  let nextFiber = options.nextFiber;\r\n  let shadow = options.shadow;\r\n  let instance = options.instance;\r\n  const parent = nextFiber.parent.instance;\r\n  const childrenIdx = fiberMountHelper.getIndex();\r\n  const hasSibling = hasChildrenProp(parent) && parent.children[childrenIdx];\r\n\r\n  if (hasSibling) {\r\n    fiberMountHelper.deepWalking.set(true);\r\n\r\n    shadow = shadow ? shadow.nextSibling : null;\r\n    const alternate = getNextSiblingAlternate(nextFiber);\r\n    const hook = shadow ? shadow.hook : alternate ? alternate.hook : createHook();\r\n    const provider = shadow ? shadow.provider : alternate ? alternate.provider : null;\r\n    let fiber = new Fiber({ hook, provider });\r\n\r\n    componentFiberHelper.set(fiber);\r\n    fiber.parent = nextFiber.parent;\r\n\r\n    const { performedInstance, performedShadow } = pertformInstance({\r\n      instance: parent,\r\n      idx: childrenIdx,\r\n      fiber,\r\n      alternate,\r\n    });\r\n    instance = performedInstance || instance;\r\n    shadow = performedShadow || shadow;\r\n    alternate && mutateAlternate({ fiber, alternate, instance });\r\n    mutateFiber({ fiber, alternate, instance });\r\n    fiber = alternate ? performMemo({ fiber, alternate, instance }) : fiber;\r\n\r\n    fiber.parent = nextFiber.parent;\r\n    nextFiber.nextSibling = fiber;\r\n    fiber.shadow = shadow;\r\n    nextFiber = fiber;\r\n\r\n    cloneTagMap[fiber.parent.effectTag] && (fiber.effectTag = fiber.parent.effectTag);\r\n\r\n    return {\r\n      performedFiber: nextFiber,\r\n      performedNextFiber: nextFiber,\r\n      performedShadow: shadow,\r\n      performedInstance: instance,\r\n    };\r\n  } else {\r\n    fiberMountHelper.jumpToParent();\r\n    fiberMountHelper.deepWalking.set(false);\r\n    shadow = shadow ? shadow.parent : null;\r\n    nextFiber = nextFiber.parent;\r\n    instance = nextFiber.instance;\r\n\r\n    if (hasChildrenProp(nextFiber.instance)) {\r\n      nextFiber.instance.children = [];\r\n    }\r\n  }\r\n\r\n  return {\r\n    performedFiber: null,\r\n    performedNextFiber: nextFiber,\r\n    performedShadow: shadow,\r\n    performedInstance: instance,\r\n  };\r\n}\r\n\r\ntype MutateFiberOptions = {\r\n  fiber: Fiber;\r\n  alternate: Fiber;\r\n  instance: DarkElementInstance;\r\n};\r\n\r\nfunction mutateFiber(options: MutateFiberOptions) {\r\n  const { fiber, alternate, instance } = options;\r\n  const key = alternate ? getElementKey(alternate.instance) : null;\r\n  const nextKey = alternate ? getElementKey(instance) : null;\r\n  const isDifferentKeys = key !== nextKey;\r\n  const isSameType = Boolean(alternate) && getInstanceType(alternate.instance) === getInstanceType(instance);\r\n  const isUpdate = isSameType && !isDifferentKeys;\r\n\r\n  fiber.instance = instance;\r\n  fiber.alternate = alternate || null;\r\n  fiber.nativeElement = isUpdate ? alternate.nativeElement : null;\r\n  fiber.effectTag = isUpdate ? EffectTag.UPDATE : EffectTag.PLACEMENT;\r\n  fiber.mountedToHost = fiber.nativeElement ? isUpdate : false;\r\n\r\n  if (hasChildrenProp(fiber.instance)) {\r\n    fiber.childrenCount = fiber.instance.children.length;\r\n  }\r\n\r\n  if (fiber.alternate) {\r\n    fiber.alternate.shadow = null;\r\n    fiber.alternate.alternate = null;\r\n  }\r\n\r\n  if (!fiber.nativeElement && detectIsVirtualNode(fiber.instance)) {\r\n    fiber.nativeElement = platform.createNativeElement(fiber);\r\n  }\r\n}\r\n\r\ntype PerformAlternateOptions = {\r\n  fiber: Fiber;\r\n  alternate: Fiber;\r\n  instance: DarkElementInstance;\r\n};\r\n\r\nfunction mutateAlternate(options: PerformAlternateOptions) {\r\n  const { fiber, alternate, instance } = options;\r\n  const alternateType = getInstanceType(alternate.instance);\r\n  const elementType = getInstanceType(instance);\r\n  const isSameType = elementType === alternateType;\r\n  const prevKey = getElementKey(alternate.instance);\r\n  const nextKey = getElementKey(instance);\r\n  const isSameKeys = prevKey === nextKey;\r\n\r\n  alternate.isUsed = true;\r\n\r\n  if (!isSameType || !isSameKeys) {\r\n    alternate.effectTag = EffectTag.DELETION;\r\n    deletionsHelper.get().push(alternate);\r\n  } else if (hasChildrenProp(alternate.instance) && hasChildrenProp(instance)) {\r\n    const prevElementsCount = alternate.childrenCount;\r\n    const nextElementsCount = instance.children.length;\r\n    const isRequestedKeys = prevElementsCount !== nextElementsCount;\r\n\r\n    if (isRequestedKeys) {\r\n      const isRemovingCase = nextElementsCount < prevElementsCount;\r\n      const isInsertingCase = nextElementsCount > prevElementsCount;\r\n      const children = hasChildrenProp(instance) ? instance.children : [];\r\n      const { keys, nextKeys } = extractKeys(alternate.child, children);\r\n      const hasKeys = keys.length > 0;\r\n      const hasAnyKeys = hasKeys || nextKeys.length > 0;\r\n\r\n      if (process.env.NODE_ENV === 'development') {\r\n        if (!hasAnyKeys) {\r\n          error(`\r\n            [Dark]: Operation of inserting, adding, replacing elements into list requires to have a unique key for every node (string or number, but not array index)!\r\n          `);\r\n        }\r\n      }\r\n\r\n      const performRemovingNodes = () => {\r\n        const diffKeys = getDiffKeys(keys, nextKeys);\r\n\r\n        if (diffKeys.length > 0) {\r\n          const fibersMap = createFibersByKeyMap(alternate.child);\r\n\r\n          for (const key of diffKeys) {\r\n            const childAlternate = fibersMap[key] || null;\r\n\r\n            if (childAlternate) {\r\n              childAlternate.effectTag = EffectTag.DELETION;\r\n              deletionsHelper.get().push(childAlternate);\r\n\r\n              if (childAlternate.portalHost) {\r\n                fiber.markPortalHost();\r\n              }\r\n            }\r\n          }\r\n        } else if (!hasKeys) {\r\n          const diffCount = prevElementsCount - nextElementsCount;\r\n          const childAlternates: Array<Fiber> = takeListFromEnd(getSiblingFibers(alternate.child), diffCount);\r\n\r\n          for (const childAlternate of childAlternates) {\r\n            childAlternate.effectTag = EffectTag.DELETION;\r\n\r\n            if (childAlternate.portalHost) {\r\n              fiber.markPortalHost();\r\n            }\r\n          }\r\n\r\n          deletionsHelper.get().push(...childAlternates);\r\n        }\r\n      };\r\n\r\n      const performInsertingNodes = () => {\r\n        const diffKeys = getDiffKeys(nextKeys, keys);\r\n\r\n        if (diffKeys.length > 0) {\r\n          const diffKeyMap = keyBy(diffKeys, x => x);\r\n          const fibersByPositionsMap = createFibersByPositionMap(alternate.child);\r\n          const usedKeyMap = {};\r\n          let keyIdx = 0;\r\n\r\n          for (const nextKey of nextKeys) {\r\n            if (process.env.NODE_ENV === 'development') {\r\n              if (usedKeyMap[nextKey]) {\r\n                error(`Some key of node already has been used!`);\r\n              }\r\n            }\r\n\r\n            usedKeyMap[nextKey] = true;\r\n\r\n            if (nextKey !== keys[keyIdx] && diffKeyMap[nextKey]) {\r\n              const insertionFiber = new Fiber({\r\n                instance: createEmptyVirtualNode(),\r\n                parent: alternate,\r\n                effectTag: EffectTag.PLACEMENT,\r\n              });\r\n\r\n              if (keyIdx === 0) {\r\n                insertionFiber.nextSibling = alternate.child;\r\n                alternate.child = insertionFiber;\r\n              } else {\r\n                const fiber = fibersByPositionsMap[keyIdx] || null;\r\n\r\n                if (fiber) {\r\n                  insertionFiber.nextSibling = fiber;\r\n                }\r\n              }\r\n            }\r\n\r\n            keyIdx++;\r\n          }\r\n        }\r\n      };\r\n\r\n      isRemovingCase && performRemovingNodes();\r\n      isInsertingCase && performInsertingNodes();\r\n    }\r\n  }\r\n}\r\n\r\ntype PerformMemoOptions = {\r\n  fiber: Fiber;\r\n  alternate: Fiber;\r\n  instance: DarkElementInstance;\r\n};\r\n\r\nfunction performMemo(options: PerformMemoOptions) {\r\n  const { fiber, alternate, instance } = options;\r\n\r\n  if (detectIsMemo(fiber.instance)) {\r\n    let memoFiber: Fiber = null;\r\n    const factory = instance as ComponentFactory;\r\n    const alternateFactory = alternate.instance as ComponentFactory;\r\n\r\n    if (factory.type !== alternateFactory.type) return fiber;\r\n\r\n    const props = alternateFactory.props;\r\n    const nextProps = factory.props;\r\n    const skip = !factory.shouldUpdate(props, nextProps);\r\n\r\n    if (skip) {\r\n      let nextFiber: Fiber = null;\r\n      fiberMountHelper.deepWalking.set(false);\r\n\r\n      memoFiber = new Fiber({\r\n        ...alternate,\r\n        alternate,\r\n        effectTag: EffectTag.SKIP,\r\n        nextSibling: alternate.nextSibling\r\n          ? alternate.nextSibling.effectTag === EffectTag.DELETION\r\n            ? null\r\n            : alternate.nextSibling\r\n          : null,\r\n      });\r\n\r\n      alternate.alternate = null;\r\n      nextFiber = memoFiber.child;\r\n\r\n      while (nextFiber) {\r\n        nextFiber.parent = memoFiber;\r\n        nextFiber = nextFiber.nextSibling;\r\n      }\r\n\r\n      return memoFiber;\r\n    }\r\n  }\r\n\r\n  return fiber;\r\n}\r\n\r\ntype PerformInstanceOptions = {\r\n  instance: DarkElementInstance;\r\n  idx: number;\r\n  fiber: Fiber;\r\n  alternate: Fiber;\r\n};\r\n\r\nfunction pertformInstance(options: PerformInstanceOptions) {\r\n  const { instance, idx, fiber, alternate } = options;\r\n  let performedInstance: DarkElementInstance = null;\r\n  let performedShadow: Fiber = null;\r\n\r\n  if (hasChildrenProp(instance)) {\r\n    const elements = detectIsArray(instance.children[idx])\r\n      ? flatten([instance.children[idx]])\r\n      : [instance.children[idx]];\r\n\r\n    instance.children.splice(idx, 1, ...elements);\r\n    performedInstance = instance.children[idx];\r\n    performedShadow = alternate\r\n      ? getRootShadow({\r\n          instance: performedInstance,\r\n          fiber,\r\n          alternate,\r\n        })\r\n      : performedShadow;\r\n    performedInstance = mountInstance(fiber, performedInstance);\r\n  }\r\n\r\n  if (detectIsComponentFactory(performedInstance) && platform.detectIsPortal(performedInstance)) {\r\n    fiber.markPortalHost();\r\n  }\r\n\r\n  return {\r\n    performedInstance,\r\n    performedShadow,\r\n  };\r\n}\r\n\r\ntype GetRootShadowOptions = {\r\n  instance: DarkElementInstance;\r\n  fiber: Fiber;\r\n  alternate: Fiber;\r\n};\r\n\r\nfunction getRootShadow(options: GetRootShadowOptions) {\r\n  const { instance, fiber, alternate } = options;\r\n  const key = getElementKey(alternate.instance);\r\n  const nextKey = getElementKey(instance);\r\n  let shadow: Fiber = null;\r\n\r\n  if (key !== nextKey) {\r\n    shadow = getAlternateByKey(nextKey, alternate.parent.child);\r\n\r\n    if (shadow) {\r\n      fiber.hook = shadow.hook;\r\n      fiber.provider = shadow.provider;\r\n      alternate.transposition = true;\r\n    }\r\n  }\r\n\r\n  return shadow;\r\n}\r\n\r\nfunction mountInstance(fiber: Fiber, instance: DarkElementInstance) {\r\n  const isComponentFactory = detectIsComponentFactory(instance);\r\n  const factory = instance as ComponentFactory;\r\n\r\n  if (isComponentFactory) {\r\n    try {\r\n      const result = factory.type(factory.props, factory.ref);\r\n\r\n      factory.children = detectIsArray(result)\r\n        ? (flatten([result]) as Array<DarkElementInstance>)\r\n        : ([result] as Array<DarkElementInstance>);\r\n    } catch (err) {\r\n      factory.children = [];\r\n      fiber.setError(err);\r\n      error(err);\r\n    }\r\n  } else if (detectIsVirtualNodeFactory(instance)) {\r\n    instance = instance();\r\n  }\r\n\r\n  if (hasChildrenProp(instance)) {\r\n    for (let i = 0; i < instance.children.length; i++) {\r\n      if (!instance.children[i]) {\r\n        instance.children[i] = transformElementInstance(instance.children[i]) as DarkElementInstance;\r\n      }\r\n    }\r\n\r\n    instance.children = isComponentFactory\r\n      ? instance.children\r\n      : detectIsArray(instance.children)\r\n      ? flatten([instance.children])\r\n      : [instance.children];\r\n\r\n    if (isComponentFactory && factory.children.length === 0) {\r\n      factory.children.push(createEmptyVirtualNode());\r\n    }\r\n  }\r\n\r\n  return instance;\r\n}\r\n\r\nfunction createFibersByPositionMap(fiber: Fiber) {\r\n  let nextFiber = fiber;\r\n  let position = 0;\r\n  const map: Record<string, Fiber> = {};\r\n\r\n  while (nextFiber) {\r\n    map[position] = nextFiber;\r\n\r\n    position++;\r\n    nextFiber = nextFiber.nextSibling;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\nfunction createFibersByKeyMap(fiber: Fiber) {\r\n  let nextFiber = fiber;\r\n  const map: Record<string, Fiber> = {};\r\n\r\n  while (nextFiber) {\r\n    const key = getElementKey(nextFiber.instance);\r\n\r\n    if (!detectIsEmpty(key)) {\r\n      map[key] = nextFiber;\r\n    }\r\n\r\n    nextFiber = nextFiber.nextSibling;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\nfunction extractKeys(alternate: Fiber, children: Array<DarkElementInstance>) {\r\n  let nextFiber = alternate;\r\n  let idx = 0;\r\n  const keys: Array<DarkElementKey> = [];\r\n  const nextKeys: Array<DarkElementKey> = [];\r\n\r\n  while (nextFiber || idx < children.length) {\r\n    const key = nextFiber && getElementKey(nextFiber.instance);\r\n    const nextKey = children[idx] && getElementKey(children[idx]);\r\n\r\n    if (!detectIsEmpty(key)) {\r\n      keys.push(key);\r\n    }\r\n\r\n    if (!detectIsEmpty(nextKey)) {\r\n      nextKeys.push(nextKey);\r\n    }\r\n\r\n    nextFiber = nextFiber ? nextFiber.nextSibling : null;\r\n    idx++;\r\n  }\r\n\r\n  return {\r\n    keys,\r\n    nextKeys,\r\n  };\r\n}\r\n\r\nfunction getAlternateByKey(key: DarkElementKey, fiber: Fiber) {\r\n  if (detectIsEmpty(key)) return null;\r\n  let nextFiber = fiber;\r\n\r\n  while (nextFiber) {\r\n    if (key === getElementKey(nextFiber.instance)) {\r\n      return nextFiber;\r\n    }\r\n\r\n    nextFiber = nextFiber.nextSibling;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction getElementKey(instance: DarkElementInstance): DarkElementKey | null {\r\n  const key = detectIsComponentFactory(instance)\r\n    ? getComponentFactoryKey(instance)\r\n    : detectIsTagVirtualNode(instance)\r\n    ? getVirtualNodeKey(instance)\r\n    : null;\r\n\r\n  return key;\r\n}\r\n\r\nfunction getDiffKeys(keys: Array<DarkElementKey>, nextKeys: Array<DarkElementKey>): Array<DarkElementKey> {\r\n  const nextKeysMap = nextKeys.reduce((acc, key) => ((acc[key] = true), acc), {});\r\n  const diff = [];\r\n\r\n  for (const key of keys) {\r\n    if (!nextKeysMap[key]) {\r\n      diff.push(key);\r\n    }\r\n  }\r\n\r\n  return diff;\r\n}\r\n\r\nfunction getChildAlternate(fiber: Fiber): Fiber | null {\r\n  let alternate = fiber.alternate && fiber.alternate.effectTag !== EffectTag.DELETION ? fiber.alternate.child : null;\r\n\r\n  while (alternate && alternate.effectTag === EffectTag.DELETION) {\r\n    alternate = alternate.nextSibling;\r\n  }\r\n\r\n  return alternate;\r\n}\r\n\r\nfunction getNextSiblingAlternate(fiber: Fiber): Fiber | null {\r\n  let alternate = fiber.alternate?.nextSibling || null;\r\n\r\n  while (alternate && alternate.effectTag === EffectTag.DELETION) {\r\n    alternate = alternate.nextSibling;\r\n  }\r\n\r\n  return alternate;\r\n}\r\n\r\nfunction transformElementInstance(instance: DarkElement) {\r\n  return detectIsEmpty(instance) || instance === false ? createEmptyVirtualNode() : instance;\r\n}\r\n\r\nfunction getInstanceType(instance: DarkElementInstance): string | Function {\r\n  return detectIsTagVirtualNode(instance)\r\n    ? instance.name\r\n    : detectIsVirtualNode(instance)\r\n    ? instance.type\r\n    : detectIsComponentFactory(instance)\r\n    ? instance.type\r\n    : null;\r\n}\r\n\r\nfunction getSiblingFibers(fiber: Fiber): Array<Fiber> {\r\n  const list = [];\r\n  let nextFiber = fiber;\r\n\r\n  while (nextFiber) {\r\n    list.push(nextFiber);\r\n    nextFiber = nextFiber.nextSibling;\r\n  }\r\n\r\n  return list;\r\n}\r\n\r\nfunction hasChildrenProp(element: DarkElementInstance): element is TagVirtualNode | ComponentFactory {\r\n  return detectIsTagVirtualNode(element) || detectIsComponentFactory(element);\r\n}\r\n\r\nfunction commitChanges() {\r\n  const wipFiber = wipRootHelper.get();\r\n  const fromHook = fromHookUpdateHelper.get();\r\n  const deletions = deletionsHelper.get();\r\n  const hasPortals = wipFiber.alternate && wipFiber.alternate.portalHost;\r\n\r\n  if (hasPortals) {\r\n    for (const fiber of deletions) {\r\n      fiber.portalHost && platform.unmountPortal(fiber);\r\n    }\r\n  }\r\n\r\n  commitWork(wipFiber.child, () => {\r\n    for (const fiber of deletions) {\r\n      platform.applyCommits(fiber);\r\n    }\r\n\r\n    deletionsHelper.set([]);\r\n    wipRootHelper.set(null);\r\n\r\n    for (const effect of effectsHelper.get()) {\r\n      effect();\r\n    }\r\n\r\n    effectsHelper.reset();\r\n\r\n    if (fromHook) {\r\n      fromHookUpdateHelper.set(false);\r\n    } else {\r\n      currentRootHelper.set(wipFiber);\r\n    }\r\n  });\r\n}\r\nfunction commitWork(fiber: Fiber, onComplete: Function) {\r\n  walkFiber({\r\n    fiber,\r\n    onLoop: ({ nextFiber, isReturn, resetIsDeepWalking }) => {\r\n      const skip = nextFiber.effectTag === EffectTag.SKIP;\r\n\r\n      if (skip) {\r\n        resetIsDeepWalking();\r\n      } else if (!isReturn) {\r\n        platform.applyCommits(nextFiber);\r\n      }\r\n\r\n      if (nextFiber && nextFiber.shadow) {\r\n        nextFiber.shadow = null;\r\n      }\r\n    },\r\n  });\r\n\r\n  onComplete();\r\n}\r\n\r\ntype WalkFiberOptions<T> = {\r\n  fiber: Fiber;\r\n  onLoop: (options: OnLoopOptions<T>) => void;\r\n};\r\n\r\ntype OnLoopOptions<T> = {\r\n  nextFiber: Fiber<T>;\r\n  isReturn: boolean;\r\n  resetIsDeepWalking: () => void;\r\n};\r\n\r\nfunction walkFiber<T = unknown>(options: WalkFiberOptions<T>) {\r\n  const { fiber, onLoop } = options;\r\n  let nextFiber = fiber;\r\n  let isDeepWalking = true;\r\n  let isReturn = false;\r\n  const visitedMap = new Map<Fiber, true>();\r\n  const detectCanVisit = (fiber: Fiber) => !visitedMap.get(fiber);\r\n\r\n  while (nextFiber) {\r\n    onLoop({\r\n      nextFiber: nextFiber as Fiber<T>,\r\n      isReturn,\r\n      resetIsDeepWalking: () => (isDeepWalking = false),\r\n    });\r\n\r\n    if (nextFiber.child && isDeepWalking && detectCanVisit(nextFiber.child)) {\r\n      const newFiber = nextFiber.child;\r\n\r\n      isReturn = false;\r\n      nextFiber = newFiber;\r\n      visitedMap.set(newFiber, true);\r\n    } else if (nextFiber.nextSibling && detectCanVisit(nextFiber.nextSibling)) {\r\n      const newFiber = nextFiber.nextSibling;\r\n\r\n      isDeepWalking = true;\r\n      isReturn = false;\r\n      nextFiber = newFiber;\r\n      visitedMap.set(newFiber, true);\r\n    } else if (\r\n      nextFiber.parent &&\r\n      nextFiber.parent === fiber &&\r\n      nextFiber.parent.nextSibling &&\r\n      detectCanVisit(nextFiber.parent.nextSibling)\r\n    ) {\r\n      const newFiber = nextFiber.parent.nextSibling;\r\n\r\n      isDeepWalking = true;\r\n      isReturn = false;\r\n      nextFiber = newFiber;\r\n      visitedMap.set(newFiber, true);\r\n    } else if (nextFiber.parent && nextFiber.parent !== fiber) {\r\n      isDeepWalking = false;\r\n      isReturn = true;\r\n      nextFiber = nextFiber.parent;\r\n    } else {\r\n      nextFiber = null;\r\n    }\r\n  }\r\n}\r\n\r\nfunction createHook(): Hook {\r\n  return {\r\n    idx: 0,\r\n    values: [],\r\n  };\r\n}\r\n\r\ntype CreateUpdateCallbackOptions = {\r\n  rootId: number;\r\n  fiber: Fiber;\r\n};\r\n\r\nfunction createUpdateCallback(options: CreateUpdateCallbackOptions) {\r\n  const { rootId, fiber } = options;\r\n  const callback = () => {\r\n    if (fiber.isUsed) return;\r\n    effectStoreHelper.set(rootId); // important order!\r\n    fromHookUpdateHelper.set(true);\r\n    fiberMountHelper.reset();\r\n\r\n    fiber.alternate = new Fiber({\r\n      ...fiber,\r\n      alternate: null,\r\n    });\r\n    fiber.marker = PARTIAL_UPDATE;\r\n    fiber.effectTag = EffectTag.UPDATE;\r\n    fiber.child = null;\r\n\r\n    wipRootHelper.set(fiber);\r\n    componentFiberHelper.set(fiber);\r\n    fiber.instance = mountInstance(fiber, fiber.instance);\r\n    nextUnitOfWorkHelper.set(fiber);\r\n  };\r\n\r\n  return callback;\r\n}\r\n\r\nexport { Fiber, workLoop, createHook, hasChildrenProp, createUpdateCallback };\r\n","import { platform } from '../global';\r\nimport { getRootId, componentFiberHelper } from '../scope';\r\nimport { createUpdateCallback } from '../fiber';\r\nimport { useMemo } from '../use-memo';\r\nimport { type TaskPriority } from '../constants';\r\n\r\nfunction useUpdate(priority?: TaskPriority) {\r\n  const rootId = getRootId();\r\n  const fiber = componentFiberHelper.get();\r\n  const scope = useMemo(() => ({ fiber }), []);\r\n\r\n  scope.fiber = fiber;\r\n\r\n  const update = () => {\r\n    const callback = createUpdateCallback({ rootId, fiber: scope.fiber });\r\n\r\n    platform.scheduleCallback(callback, priority);\r\n  };\r\n\r\n  return update;\r\n}\r\n\r\nexport { useUpdate };\r\n","import { useEffect } from '../use-effect';\r\nimport { useMemo } from '../use-memo';\r\nimport { componentFiberHelper } from '../scope';\r\nimport { useUpdate } from '../use-update';\r\nimport type { Fiber } from '../fiber';\r\nimport type { Context, ContextProviderValue } from '../context/model';\r\n\r\nfunction useContext<T>(context: Context<T>): T {\r\n  const { defaultValue } = context;\r\n  const fiber = componentFiberHelper.get();\r\n  const provider = getProvider<T>(context, fiber);\r\n  const value = provider ? provider.value : defaultValue;\r\n  const update = useUpdate();\r\n  const scope = useMemo(() => ({ prevValue: value }), []);\r\n  const hasProvider = Boolean(provider);\r\n\r\n  useEffect(() => {\r\n    if (!hasProvider) return;\r\n\r\n    const subscriber = (newValue: T) => {\r\n      if (!Object.is(scope.prevValue, newValue)) {\r\n        update();\r\n      }\r\n    };\r\n\r\n    provider.subscribers.push(subscriber);\r\n\r\n    return () => {\r\n      const idx = provider.subscribers.findIndex(x => x === subscriber);\r\n\r\n      if (idx !== -1) {\r\n        provider.subscribers.splice(idx, 1);\r\n      }\r\n    };\r\n  }, [hasProvider]);\r\n\r\n  scope.prevValue = value;\r\n\r\n  return value;\r\n}\r\n\r\nfunction getProvider<T>(context: Context<T>, fiber: Fiber): ContextProviderValue<T> {\r\n  let nextFiber = fiber;\r\n\r\n  while (nextFiber) {\r\n    if (nextFiber.provider && nextFiber.provider.get(context)) {\r\n      return nextFiber.provider.get(context) as ContextProviderValue<T>;\r\n    }\r\n\r\n    nextFiber = nextFiber.parent;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport { useContext };\r\n","import { createComponent } from '../component';\r\nimport { useEffect } from '../use-effect';\r\nimport { componentFiberHelper } from '../scope';\r\nimport { useContext } from '../use-context';\r\nimport { detectIsFunction } from '../helpers';\r\nimport type { Context, ContexProviderProps } from './model';\r\n\r\nfunction createContext<T>(defaultValue: T): Context<T> {\r\n  let displayName = 'Context';\r\n  const context: Context<T> = {\r\n    displayName,\r\n    defaultValue,\r\n    Provider: null,\r\n    Consumer: null,\r\n  };\r\n\r\n  mutateContext(context, defaultValue, displayName);\r\n\r\n  Object.defineProperty(context, 'displayName', {\r\n    get: () => displayName,\r\n    set: (newValue: string) => {\r\n      displayName = newValue;\r\n      mutateContext(context, defaultValue, displayName);\r\n    },\r\n  });\r\n\r\n  return context;\r\n}\r\n\r\nfunction mutateContext<T>(context: Context<T>, defaultValue: T, displayName: string) {\r\n  context.Provider = createProvider(context, defaultValue, displayName);\r\n  context.Consumer = createConsumer(context, displayName);\r\n}\r\n\r\nfunction createProvider<T>(context: Context<T>, defaultValue: T, displayName: string) {\r\n  return createComponent<ContexProviderProps<T>>(\r\n    ({ value = defaultValue, slot }) => {\r\n      const fiber = componentFiberHelper.get();\r\n\r\n      if (!fiber.provider) {\r\n        fiber.provider = new Map();\r\n      }\r\n\r\n      if (!fiber.provider.get(context)) {\r\n        fiber.provider.set(context, {\r\n          subscribers: [],\r\n          value,\r\n        });\r\n      }\r\n\r\n      const provider = fiber.provider.get(context);\r\n\r\n      useEffect(() => {\r\n        for (const subscriber of provider.subscribers) {\r\n          subscriber(value);\r\n        }\r\n      }, [value]);\r\n\r\n      provider.value = value;\r\n\r\n      return slot;\r\n    },\r\n    { displayName: `${displayName}.Provider` },\r\n  );\r\n}\r\n\r\nfunction createConsumer<T>(context: Context<T>, displayName: string) {\r\n  return createComponent(\r\n    ({ slot }) => {\r\n      const value = useContext(context);\r\n\r\n      return detectIsFunction(slot) ? slot(value) : null;\r\n    },\r\n    { displayName: `${displayName}.Consumer` },\r\n  );\r\n}\r\n\r\nexport { createContext };\r\n","import { detectIsNumber, detectIsString, detectIsFunction } from '../helpers';\r\nimport { View, Text, type TagVirtualNodeFactory } from '../view';\r\n\r\nfunction getChildren(children: Array<any>) {\r\n  children = children.map(x => (detectIsString(x) || detectIsNumber(x) ? Text(x.toString()) : x));\r\n\r\n  return children ? (Array.isArray(children) ? [...children] : [children]) : [];\r\n}\r\n\r\nfunction createElement(\r\n  tag: string | Function,\r\n  props: any,\r\n  ...children: Array<any>\r\n): TagVirtualNodeFactory | Function | null {\r\n  if (detectIsString(tag)) {\r\n    return View({\r\n      ...props,\r\n      as: tag,\r\n      slot: getChildren(children),\r\n    });\r\n  }\r\n\r\n  if (detectIsFunction(tag)) {\r\n    let slot = getChildren(children);\r\n\r\n    slot = slot.length === 1 ? slot[0] : slot;\r\n\r\n    return tag({ ...props, slot });\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport { createElement };\r\n","import { type KeyProps, createComponent, detectIsComponentFactory } from '../component';\r\n\r\nconst $$fragment = Symbol('fragment');\r\n\r\nconst Fragment = createComponent<KeyProps>(({ slot }) => slot || null, {\r\n  token: $$fragment,\r\n});\r\n\r\nconst detectIsFragment = (factory: unknown) => detectIsComponentFactory(factory) && factory.token === $$fragment;\r\n\r\nexport { Fragment, detectIsFragment };\r\n","import { detectIsUndefined } from '../helpers';\r\nimport { componentFiberHelper } from '../scope';\r\nimport { detectIsDepsDifferent } from '../shared';\r\n\r\nfunction useCallback<T = Function>(callback: T, deps: Array<any>): T {\r\n  const fiber = componentFiberHelper.get();\r\n  const { hook } = fiber;\r\n  const { idx, values } = hook;\r\n\r\n  if (detectIsUndefined(values[idx])) {\r\n    values[idx] = {\r\n      deps,\r\n      value: callback,\r\n    };\r\n\r\n    hook.idx++;\r\n\r\n    return callback;\r\n  }\r\n\r\n  const hookValue = values[idx];\r\n  const prevDeps = hookValue.deps as Array<any>;\r\n  const isDepsDifferent = detectIsDepsDifferent(deps, prevDeps);\r\n\r\n  if (isDepsDifferent) {\r\n    hookValue.deps = deps;\r\n    hookValue.value = callback;\r\n  }\r\n\r\n  hook.idx++;\r\n\r\n  return hookValue.value;\r\n}\r\n\r\nexport { useCallback };\r\n","import { detectIsUndefined, detectIsFunction } from '../helpers';\r\nimport { componentFiberHelper } from '../scope';\r\nimport { useUpdate } from '../use-update';\r\nimport { useMemo } from '../use-memo';\r\nimport { useCallback } from '../use-callback';\r\nimport { type TaskPriority } from '../constants';\r\n\r\ntype Value<T> = T | ((prevValue: T) => T);\r\ntype Scope = {\r\n  idx: number;\r\n  values: Array<any>;\r\n};\r\n\r\nfunction useState<T = unknown>(initialValue: T, priority?: TaskPriority): [T, (value: Value<T>) => void] {\r\n  const fiber = componentFiberHelper.get();\r\n  const update = useUpdate(priority);\r\n  const scope: Scope = useMemo(\r\n    () => ({\r\n      idx: fiber.hook.idx,\r\n      values: fiber.hook.values,\r\n    }),\r\n    [],\r\n  );\r\n  const setState = useCallback((sourceValue: Value<T>) => {\r\n    const value = scope.values[scope.idx];\r\n    const newValue = detectIsFunction(sourceValue) ? sourceValue(value) : sourceValue;\r\n\r\n    if (!Object.is(value, newValue)) {\r\n      scope.values[scope.idx] = newValue;\r\n      update();\r\n    }\r\n  }, []);\r\n  const { hook } = fiber;\r\n  const { idx, values } = hook;\r\n  const value: T = !detectIsUndefined(values[idx]) ? values[idx] : initialValue;\r\n\r\n  values[idx] = value;\r\n  scope.idx = idx;\r\n  scope.values = values;\r\n  hook.idx++;\r\n\r\n  return [value, setState];\r\n}\r\n\r\nexport { useState };\r\n","import { createComponent } from '../component';\r\nimport { useState } from '../use-state';\r\nimport { createContext } from '../context';\r\nimport { useContext } from '../use-context';\r\nimport { useMemo } from '../use-memo';\r\nimport { useCallback } from '../use-callback';\r\nimport type { DarkElement } from '../shared';\r\n\r\ntype SuspenseProps = {\r\n  fallback: DarkElement;\r\n};\r\n\r\ntype SuspenseContextValue = {\r\n  fallback: DarkElement;\r\n  isLoaded: boolean;\r\n  trigger: () => void;\r\n};\r\n\r\nconst SuspenseContext = createContext<SuspenseContextValue>({\r\n  fallback: null,\r\n  isLoaded: true,\r\n  trigger: () => {},\r\n});\r\n\r\nconst Suspense = createComponent<SuspenseProps>(({ fallback, slot }) => {\r\n  if (!fallback) {\r\n    throw new Error(`Suspense fallback doesn't found`);\r\n  }\r\n  const { isLoaded: isSuspenseLoaded } = useContext(SuspenseContext);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const trigger = useCallback(() => setIsLoaded(true), []);\r\n  const value = useMemo(() => ({ fallback, isLoaded, trigger }), [fallback, isLoaded]);\r\n\r\n  return SuspenseContext.Provider({\r\n    value,\r\n    slot: isSuspenseLoaded ? slot : null,\r\n  });\r\n});\r\n\r\nexport { SuspenseContext, Suspense };\r\n","import { type Component, createComponent, detectIsComponentFactory } from '../component';\r\nimport { useState } from '../use-state';\r\nimport { useEffect } from '../use-effect';\r\nimport { forwardRef } from '../ref';\r\nimport { SuspenseContext } from '../suspense';\r\nimport { useContext } from '../use-context';\r\n\r\nconst $$lazy = Symbol('lazy');\r\n\r\ntype LazyScope<P, R> = {\r\n  component: Component<P, R>;\r\n};\r\n\r\nfunction lazy<P, R = unknown>(dynamic: () => Promise<{ default: Component<P> }>) {\r\n  return forwardRef(\r\n    createComponent<P, R>(\r\n      (props, ref) => {\r\n        const { fallback, trigger } = useContext(SuspenseContext);\r\n        const [scope, setScope] = useState<LazyScope<P, R>>({\r\n          component: null,\r\n        });\r\n\r\n        useEffect(() => {\r\n          fetchModule(dynamic).then(component => {\r\n            setScope({ component });\r\n          });\r\n        }, []);\r\n\r\n        useEffect(() => {\r\n          if (!scope.component) return;\r\n          trigger();\r\n        }, [scope.component]);\r\n\r\n        return scope.component ? scope.component(props, ref) : fallback;\r\n      },\r\n      { token: $$lazy },\r\n    ),\r\n  );\r\n}\r\n\r\nconst detectIsLazy = (factory: unknown) => detectIsComponentFactory(factory) && factory.token === $$lazy;\r\n\r\nfunction fetchModule(dynamic: () => Promise<{ default: Component }>) {\r\n  return new Promise<Component>(resolve => {\r\n    dynamic().then(module => {\r\n      if (!module.default) {\r\n        throw new Error('lazy loaded component should be exported as default!');\r\n      }\r\n\r\n      resolve(module.default);\r\n    });\r\n  });\r\n}\r\n\r\nexport { lazy, detectIsLazy };\r\n","import { componentFiberHelper } from '../scope';\r\nimport { useEffect } from '../use-effect';\r\nimport { useUpdate } from '../use-update';\r\nimport { useMemo } from '../use-memo';\r\n\r\ntype ErrorScope = {\r\n  error: Error;\r\n};\r\n\r\nfunction useError(): Error | null {\r\n  const fiber = componentFiberHelper.get();\r\n  const update = useUpdate();\r\n  const scope: ErrorScope = useMemo(() => ({ error: null }), []);\r\n\r\n  fiber.catchException = (error: Error) => {\r\n    scope.error = error;\r\n    update();\r\n  };\r\n\r\n  useEffect(() => {\r\n    scope.error = null;\r\n  }, [scope.error]);\r\n\r\n  return scope.error;\r\n}\r\n\r\nexport { useError };\r\n","import { useMemo } from '../use-memo';\r\nimport type { MutableRef } from '../ref';\r\n\r\nfunction useImperativeHandle<T>(ref: MutableRef<T>, createHandle: () => T, deps: Array<any>) {\r\n  const current = useMemo(() => createHandle(), deps);\r\n\r\n  ref.current = current;\r\n}\r\n\r\nexport { useImperativeHandle };\r\n","import { useState } from '../use-state';\r\nimport { useCallback } from '../use-callback';\r\nimport { useMemo } from '../use-memo';\r\nimport { detectIsFunction } from '../helpers';\r\nimport type { Reducer, Dispatch, ReducerAction, ReducerState } from './model';\r\n\r\nfunction useReducer<R extends Reducer>(\r\n  reducer: R,\r\n  initialState: ReducerState<R>,\r\n  initializer?: (state: ReducerState<R>) => ReducerState<R>,\r\n): [ReducerState<R>, Dispatch<ReducerAction<R>>] {\r\n  const initialValue = useMemo(() => {\r\n    return detectIsFunction(initializer) ? initializer(initialState) : initialState;\r\n  }, []);\r\n  const [state, setState] = useState<ReducerState<R>>(initialValue);\r\n  const dispatch = useCallback((action: ReducerAction<R>) => setState(state => reducer(state, action)), []) as Dispatch<\r\n    ReducerAction<R>\r\n  >;\r\n\r\n  return [state, dispatch];\r\n}\r\n\r\nexport { useReducer };\r\n","import { useMemo } from '../use-memo';\r\nimport type { MutableRef } from '../ref/model';\r\n\r\nfunction useRef<T>(initialValue: T = null): MutableRef<T> {\r\n  const ref = useMemo(() => ({ current: initialValue }), []) as MutableRef<T>;\r\n\r\n  return ref;\r\n}\r\n\r\nexport { useRef };\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","TaskPriority","ROOT","EMPTY_NODE","ATTR_KEY","ATTR_REF","PARTIAL_UPDATE","detectIsFunction","detectIsUndefined","detectIsNumber","detectIsString","detectIsObject","detectIsBoolean","detectIsArray","Array","isArray","detectIsNull","detectIsEmpty","error","str","console","flatten","source","list","levelMap","idx","level","item","length","push","getTime","performance","now","keyBy","fn","reduce","acc","x","takeListFromEnd","count","slice","defaultOptions","displayName","defaultProps","token","options","children","this","type","props","ref","shouldUpdate","createComponent","createElement","computedOptions","computedProps","ComponentFactory","detectIsComponentFactory","getComponentFactoryKey","wipRoot","currentRoot","nextUnitOfWork","fromHookUpdate","events","Map","deletions","fiberMount","navigation","isDeepWalking","componentFiber","effects","rootId","stores","effectStoreHelper","set","id","effectStore","getRootId","Store","storeHelper","wipRootHelper","fiber","currentRootHelper","nextUnitOfWorkHelper","componentFiberHelper","fromHookUpdateHelper","eventsHelper","deletionsHelper","fiberMountHelper","reset","getIndex","jumpToChild","nextLevel","jumpToParent","jumpToSibling","deepWalking","effectsHelper","add","effect","detectIsDepsDifferent","deps","prevDeps","i","NodeType","$$useEffect","useEffect","hook","values","runEffect","undefined","run","setTimeout","cleanup","runEffectCleanup","hookValue","$$virtualNode","TAG","name","isVoid","attrs","VirtualNode","text","TEXT","COMMENT","detectIsVirtualNode","vNode","detectIsTagVirtualNode","TagVirtualNode","detectIsCommentVirtualNode","CommentVirtualNode","detectIsTextVirtualNode","TextVirtualNode","detectIsEmptyVirtualNode","getVirtualNodeKey","Text","Comment","View","def","as","slot","rest","createEmptyVirtualNode","detectIsVirtualNodeFactory","forwardRef","component","detectIsRef","mutableRef","$$memo","defaultShouldUpdate","nextProps","keys","detectIsMemo","memo","Memo","wrap","isDepsDifferent","processValue","getValue","map","useMemo","computedGetValue","EffectTag","platform","scheduleCallback","Error","shouldYeildToHost","createNativeElement","applyCommits","detectIsPortal","unmountPortal","cloneTagMap","PLACEMENT","SKIP","nativeElement","parent","child","nextSibling","alternate","effectTag","instance","shadow","provider","transposition","mountedToHost","portalHost","childrenCount","marker","isUsed","markPortalHost","setError","catchException","workLoop","wipFiber","shouldYield","hasMoreWork","Boolean","performUnitOfWork","fromHook","onComplete","onLoop","nextFiber","isReturn","visitedMap","detectCanVisit","resetIsDeepWalking","newFiber","walkFiber","commitWork","commitChanges","hasChildrenProp","performChild","performedFiber","performSibling","performPartialUpdateEffects","DELETION","getChildAlternate","Fiber","pertformInstance","mutateAlternate","mutateFiber","performMemo","performedNextFiber","performedShadow","performedInstance","childrenIdx","getNextSiblingAlternate","isDifferentKeys","getElementKey","isUpdate","getInstanceType","UPDATE","alternateType","isSameType","isSameKeys","isRemovingCase","isInsertingCase","nextKeys","nextKey","extractKeys","diffKeys","getDiffKeys","fibersMap","createFibersByKeyMap","childAlternate","diffCount","childAlternates","getSiblingFibers","performRemovingNodes","diffKeyMap","fibersByPositionsMap","position","createFibersByPositionMap","usedKeyMap","keyIdx","insertionFiber","performInsertingNodes","memoFiber","alternateFactory","elements","splice","getAlternateByKey","getRootShadow","mountInstance","isComponentFactory","result","err","transformElementInstance","nextKeysMap","diff","element","createHook","createUpdateCallback","useUpdate","priority","scope","callback","useContext","context","defaultValue","getProvider","update","prevValue","hasProvider","subscriber","newValue","is","subscribers","findIndex","createContext","Provider","Consumer","mutateContext","createProvider","createConsumer","getChildren","toString","tag","$$fragment","Fragment","detectIsFragment","useCallback","useState","initialValue","setState","sourceValue","SuspenseContext","fallback","isLoaded","trigger","Suspense","isSuspenseLoaded","setIsLoaded","$$lazy","lazy","dynamic","setScope","Promise","resolve","then","default","fetchModule","detectIsLazy","useError","useImperativeHandle","createHandle","current","useReducer","reducer","initialState","initializer","state","dispatch","action","useRef"],"sourceRoot":""}